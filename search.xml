<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>编译安装nginx及php</title>
    <url>/2021/03/03/bian-yi-an-zhuang-nginx/</url>
    <content><![CDATA[<h3 id="安装nginx所需依赖"><a href="#安装nginx所需依赖" class="headerlink" title="安装nginx所需依赖"></a>安装nginx所需依赖</h3><h4 id="安装pcre-devel"><a href="#安装pcre-devel" class="headerlink" title="安装pcre-devel"></a>安装pcre-devel</h4><h5 id="源安装"><a href="#源安装" class="headerlink" title="源安装"></a>源安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y pcre-devel</span><br></pre></td></tr></table></figure>
<h5 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h5><h4 id="安装openssl-devel"><a href="#安装openssl-devel" class="headerlink" title="安装openssl-devel"></a>安装openssl-devel</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y openssl-devel</span><br></pre></td></tr></table></figure>

<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--sbin-path=/usr/<span class="built_in">local</span>/nginx/sbin/nginx \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \ </span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_v2_module</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h3 id="php7-4-15依赖"><a href="#php7-4-15依赖" class="headerlink" title="php7.4.15依赖"></a>php7.4.15依赖</h3><p>libxml2-devel、sqlite-devel、libcurl-devel、libpng-devel、libzip-devel、openssl-devel</p>
<h3 id="安装php7-4-15"><a href="#安装php7-4-15" class="headerlink" title="安装php7.4.15"></a>安装php7.4.15</h3><p>安装时可能会出现 libzip 无法找到</p>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;/usr/local/lib/pkgconfig/&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/php@7.4 \</span><br><span class="line">--with-config-file-path=/usr/<span class="built_in">local</span>/php@7.4/etc \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-libxml \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-calendar \</span><br><span class="line">--with-curl \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-gd \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--with-pdo-mysql \</span><br><span class="line">--enable-soap \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-zip \</span><br><span class="line">--with-pear</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>–prefix</td>
<td>安装目录</td>
</tr>
<tr>
<td>–enable-fpm</td>
<td>开启php-fpm</td>
</tr>
<tr>
<td>–enable-ftp</td>
<td>开启ftp</td>
</tr>
<tr>
<td>–enable-bcmath</td>
<td>开启bcmath</td>
</tr>
<tr>
<td>–enable-calendar</td>
<td>开启calendar</td>
</tr>
<tr>
<td>–with-libxml</td>
<td>安装XML扩展</td>
</tr>
<tr>
<td>–with-openssl</td>
<td>安装OPENSSL扩展</td>
</tr>
<tr>
<td>–with-zlib</td>
<td>安装ZLIB扩展</td>
</tr>
<tr>
<td>–with-curl</td>
<td>安装CURL扩展</td>
</tr>
<tr>
<td>–with-pdo-mysql</td>
<td>安装PDO-MYSQL扩展</td>
</tr>
<tr>
<td>–with-zip</td>
<td>安装ZIP扩展</td>
</tr>
<tr>
<td>–with-pear</td>
<td>安装PEAR扩展</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链从入门到放弃</title>
    <url>/2019/07/27/block-chain-in-out/</url>
    <content><![CDATA[<h3 id="入门介绍与原理："><a href="#入门介绍与原理：" class="headerlink" title="入门介绍与原理："></a>入门介绍与原理：</h3><p>一、比特币<br>1.<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system">比特币白皮书</a></p>
<p>这是一切的开始</p>
<p>2.<a href="http://8btc.com/topic-mastering-bitcoin.html">精通比特币</a></p>
<p>讲比特币很详细的一本书，看完基本对比特币的认识就清楚了。</p>
<p>3.<a href="http://nakamotoinstitute.org/mempool/the-proof-of-work-concept/">TheProof-of-Work Concept</a></p>
<p>PoW机制理论介绍，英文</p>
<p>4.<a href="http://blog.codinglabs.org/articles/bitcoin-mechanism-make-easy.html">比特币的原理及运作机制</a></p>
<p>这篇是新手向，适合向圈外人介绍什么是比特币什么是区块链</p>
<p>5.<a href="https://bbs.bumeng.cn/thread-815-1-1.html">比特币pow难度调节机制</a></p>
<p>PoW的难度调节是一个要点，一篇简介</p>
<span id="more"></span>

<p>二、区块链<br>1.<a href="https://yeasy.gitbooks.io/blockchain_guide/content/">区块链技术指南</a></p>
<p>这本书也很推荐，对区块链技术讲解得非常全面</p>
<p>2.<a href="http://lib.csdn.net/case/blockchain">csdn的blockchain知识库</a></p>
<p>老牌站CSDN论坛里没有区块链的板块，不过知识库还是有些值得一看的</p>
<p>3.<a href="https://bbs.bumeng.cn/thread-849-1-1.html">区块链可应用场景</a></p>
<p>应用场景探讨，只是简述，欢迎讨论</p>
<p>4.<a href="http://wangxiaoming.com/">汪晓明对区块链、以太坊的思考</a></p>
<p>小明说还是做得很不错的一个系列专题</p>
<p>5.<a href="http://www.8btc.com/enabling-blockchain-innovations-with-pegged-sidechains-abstract-">侧链技术介绍</a></p>
<p>侧链是区块链技术里很重要的一个分支技术，这篇讲得很详细了</p>
<p>6.<a href="https://bbs.bumeng.cn/thread-801-1-1.html">Quorum(NRW)算法机制简介</a></p>
<p>这篇其实是一个引申，更多是关于分布式存储算法的</p>
<p>7.<a href="https://bbs.bumeng.cn/thread-803-1-1.html">PoS的设计思想</a></p>
<p>PoS也是很重要的一种共识算法，原理讲解，当中还有对共识算法的一些基础内容</p>
<p>8.<a href="https://bbs.bumeng.cn/thread-809-1-1.html">分布式日志系统</a></p>
<p>另一篇引申，分布式日志</p>
<p>9.<a href="https://bbs.bumeng.cn/thread-857-1-1.html">非对称加密基本概念</a></p>
<p>区块链中非对称加密是一个重要的基础概念</p>
<h3 id="技术操作向："><a href="#技术操作向：" class="headerlink" title="技术操作向："></a>技术操作向：</h3><p>一、以太坊</p>
<p>1.<a href="https://github.com/ethereum/wiki/wiki/White-Paper">ethereum white paper</a><br>不多说，白皮书</p>
<p>2.<a href="http://gavwood.com/paper.pdf">以太坊黄皮书</a></p>
<p>黄皮书更多偏向技术，英文</p>
<p>3.<a href="https://github.com/ethereum/wiki/wiki/FAQ">以太坊常见问题</a></p>
<p>可以看做是官方FAQ了，英文</p>
<p>4.<a href="https://solidity.readthedocs.io/en/develop/">Solidity语言</a></p>
<p>Solidity语言的文档，英文</p>
<p>5.<a href="https://bbs.bumeng.cn/thread-823-1-1.html">理解以太坊Serenity</a></p>
<p>以太坊第四阶段介绍，虽然还有点遥远</p>
<p>6.<a href="https://bbs.bumeng.cn/thread-824-1-1.html">Vlad谈Casper共识协议</a></p>
<p>Casper其实就是以太坊想要转的PoS，简介</p>
<p>7.<a href="http://ethfans.org/posts/101-noob-intro">以太坊智能合约编程之菜鸟教程</a></p>
<p>8.<a href="https://bitshuo.com/topic/584241f863baf1df6cad0d40">通过truffle部署以太坊智能合约</a></p>
<p>9.<a href="https://juejin.im/post/58f97521b123db41195481f3">Truffle 3.0部署智能合约至Ethereum节点</a></p>
<p>10.<a href="http://wiki.jikexueyuan.com/project/blockchain/">以太坊智能合约编写实例</a></p>
<p>11.<a href="http://blog.csdn.net/u013137970/article/details/53018423">以太坊智能合约编写实例2</a></p>
<p>12.<a href="http://www.huiyanghua.com/article/plant/469/4707.html">在CentOS6.5上搭建以太坊私有链</a></p>
<p>剩下几篇是实际操作向，有些可能因为发表时间不同会有些过时，不过也有一定的参考价值</p>
<p>二、Hyperledger fabric<br>1.<a href="https://zhuanlan.zhihu.com/p/25070745">Hyperledger Fabric V1.0– 开发者快速入门</a></p>
<p>万达大佬写的开发者入门指南</p>
<p>2.<a href="https://www.gitbook.com/book/yeasy/hyperledger_code_fabric/details">Hyperledger 源码分析之 Fabric</a></p>
<p>源码分析，感兴趣研究的同学可以看看</p>
<p>3. <a href="http://blog.csdn.net/zhaoliang1131/article/details/54896276">Hyperledgerfablic 1.0 在centos7环境下的安装与部署和动态增加节点</a></p>
<p>4.<a href="https://hyperledger-fabric.readthedocs.io/en/latest/dev-setup/build.html">fabric源码搭建</a></p>
<p>5.<a href="http://www.8btc.com/hyperledger-fabric1-0">Hyperledger Fabric1.0架构概览</a></p>
<p>6.<a href="https://github.com/hyperledger-archives/fabric/blob/master/docs/protocol-spec_zh.md">fabric中文文档</a></p>
<p>7.<a href="https://g2ex.github.io/2016/10/14/Deploy-Hyperledger-Fabric-with-Docker/">Ubuntu中使用 Docker 部署 HyperledgerFabric</a></p>
<p>剩下几篇也是操作向，同上</p>
<p>三、布萌<br>1.<a href="https://bbs.bumeng.cn/thread-851-1-1.html">布萌接入指南</a></p>
<p>布萌官方的指南有些模糊，个人整理了一版出来仅供参考</p>
<p>2.<a href="https://www.bumeng.cn/document/API">布萌API文档</a></p>
<p>3.<a href="https://www.bumeng.cn/document/SDK">布萌SDK文档</a></p>
<p>两个官方文档，其实官网就有，顺手列在这了：D</p>
<p>4.<a href="https://bbs.bumeng.cn/thread-917-1-1.html">布萌PHP SDK</a></p>
<p>今天看到有朋友放出的PHP的SDK，膜拜大神</p>
<p>四、其他<br>1.<a href="http://bitcoin-on-nodejs.ebookchain.org/">Nodejs开发加密货币</a></p>
<p>基于Ebookcoin（亿书币）的开发教程，有一定参考价值</p>
<p>2.<a href="https://bitshuo.com/topic/5847b86b63baf1df6cad0d6f">创建自己的私有比特币测试链</a></p>
<p>比特币私链搭建教程</p>
<p>3.<a href="https://programmingblockchain.gitbooks.io/programmingblockchain/content/">programmingblockchain in c#</a></p>
<p>用C#开发区块链教程，英文</p>
]]></content>
  </entry>
  <entry>
    <title>蓝屏编码含义</title>
    <url>/2019/01/28/blue-screen-coding-table/</url>
    <content><![CDATA[<h2 id="蓝屏含义"><a href="#蓝屏含义" class="headerlink" title="蓝屏含义"></a>蓝屏含义</h2><h3 id="故障检查信息"><a href="#故障检查信息" class="headerlink" title="故障检查信息"></a>故障检查信息</h3><blockquote>
<p>***STOP 0x0000001E(0xC0000005,0xFDE38AF9,0x0000001,0x7E8B0EB4)</p>
</blockquote>
<p>MODE_EXCEPTION_NOT_HANDLED ***其中错误的第一部分是停机码(Stop Code)也就是STOP 0x0000001E, 用于识别已发生错误的类型, 错误第二部分是被括号括起来的四个数字集, 表示随机的开发人员定义的参数(这个参数对于普通用户根本无法理解, 只有驱动程序编写者或者微软操作系统的开发人员才懂). 第三部分是错误名. 信息第一行通常用来识别生产错误的驱动程序或者设备. 这种信息多数很简洁, 但停机码可以作为搜索项在微软知识库和其他技术资料中使用</p>
<span id="more"></span>

<h3 id="推荐操作"><a href="#推荐操作" class="headerlink" title="推荐操作"></a>推荐操作</h3><p>蓝屏第二部分是推荐用户进行的操作信息. 有时, 推荐的操作仅仅是一般性的建议(比如: 到销售商网站查找BIOS的更新等); 有时, 也就是显示一条与当前问题相关的提示. 一般来说, 惟一的建议就是重启.</p>
<p>调试端口告诉用户内存转储映像是否写到磁盘商了, 使用内存转储映像可以确定发生问题的性质, 还会告诉用户调试信息是否被传到另一台电脑商, 以及使用了什么端口完成这次通讯. 不过, 这里的信息对于普通用户来说, 没有什么意义.有时保卫科可以顺利的查到是哪个生产小组的问题, 会在第一部分明确报告是哪个文件犯的错, 但常常它也只能查个大概范围, 而无法明确指明问题所在. 由于工厂全面被迫停止, 只有重新整顿开工, 有时, 那个生产小组会意识到错误 , 不再重犯. 但有时仍然会试图哄抢零件, 于是厂领导不得不重复停工决定(不能启动并显示蓝屏信息, 或在进行相同操作时再次出现蓝屏).</p>
<h2 id="蓝屏的处理方法"><a href="#蓝屏的处理方法" class="headerlink" title="蓝屏的处理方法"></a>蓝屏的处理方法</h2><p>Windows 2K/XP蓝屏信息非常多, 无法在一篇文章中全面讲解, 但他们产生的原因往往集中在不兼容的硬件和驱动程序、有问题的软件、病毒等, 因此首先为大家提供了一些常规的解决方案, 在遇到蓝屏错误时, 应先对照这些方案进行排除.</p>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>有时只是某个程序或驱动程序一时犯错, 重启后他们会改过自新.(注意:此时参见7.查询停机码)</p>
<h3 id="新硬件"><a href="#新硬件" class="headerlink" title="新硬件"></a>新硬件</h3><p>首先, 应该检查新硬件是否插牢, 这个被许多人忽视的问题往往会引发许多莫名其妙的故障. 如果确认没有问题, 将其拔下, 然后换个插槽试试, 并安装最新的驱动程序. 同时还应对照微软网站的硬件兼容类别检查一下硬件是否与操作系统兼容. 如果你的硬件没有在表中, 那么就得到硬件厂商网站进行查询, 或者拨打他们的咨询电话.</p>
<h3 id="新驱动和新服务"><a href="#新驱动和新服务" class="headerlink" title="新驱动和新服务"></a>新驱动和新服务</h3><p>如果刚安装完某个硬件的新驱动, 或安装了某个软件, 而它又在系统服务中添加了相应项目(比如:杀毒软件、CPU降温软件、防火墙软件等), 在重启或使用中出现了蓝屏故障, 请到安全模式来卸载或禁用它们.</p>
<h3 id="检查病毒"><a href="#检查病毒" class="headerlink" title="检查病毒"></a>检查病毒</h3><p>比如冲击波和振荡波等病毒有时会导致Windows蓝屏死机, 因此查杀病毒必不可少. 同时一些木马间谍软件也会引发蓝屏, 所以最好再用相关工具进行扫描检查.</p>
<h3 id="检查BIOS和硬件兼容性"><a href="#检查BIOS和硬件兼容性" class="headerlink" title="检查BIOS和硬件兼容性"></a>检查BIOS和硬件兼容性</h3><p>对于新装的电脑经常出现蓝屏问题, 应该检查并升级BIOS到最新版本, 同时关闭其中的内存相关项, 比如:缓存和映射. 另外, 还应该对照微软的硬件兼容列表检查自己的硬件. 还有就是, 如果主板BIOS无法支持大容量硬盘也会导致蓝屏, 需要对其进行升级.</p>
<blockquote>
<p>小提示:<br>BIOS的缓存和映射项<br>Video BIOS Shadowing (视频BIOS映射)<br>Shadowing address ranges(映射地址列)<br>System BIOS Cacheable(系统BIOS缓冲)<br>Video BIOS Cacheable(视频BIOS缓冲)<br>Video RAM Cacheable(视频内存缓冲)</p>
</blockquote>
<h3 id="检查系统日志"><a href="#检查系统日志" class="headerlink" title="检查系统日志"></a>检查系统日志</h3><p>在开始–&gt;菜单中输入:EventVwr.msc, 回车出现”事件查看器”, 注意检查其中的”系统日志”和”应用程序日志”中表明”错误”的项.</p>
<h3 id="查询停机码"><a href="#查询停机码" class="headerlink" title="查询停机码"></a>查询停机码</h3><p>把蓝屏中密密麻麻的E文记下来, 接着到其他电脑中上网, 进入微软帮助与支持网站<a href="http://support.microsoft.com/">http://support.microsoft.com</a>?, 在左上角的”搜索(知识库)”中输入停机码, 如果搜索结果没有适合信息, 可以选择”英文知识库”在搜索一遍. 一般情况下, 会在这里找到有用的解决案例. 另外, 在baidu、Google等搜索引擎中使用蓝屏的停机码或者后面的说明文字为关键词搜索, 往往也会有以外的收获.</p>
<h3 id="最后一次正确配置"><a href="#最后一次正确配置" class="headerlink" title="最后一次正确配置"></a>最后一次正确配置</h3><p>一般情况下, 蓝屏都出现于更新了硬件驱动或新加硬件并安装其驱动后, 这时Windows 2K/XP提供的”最后一次正确配置”就是解决蓝屏的快捷方式. 重启系统, 在出现启动菜单时按下F8键就会出现高级启动选项菜单, 接着选择”最后一次正确配置”.</p>
<h3 id="安装最新的系统补丁和Service-Pack"><a href="#安装最新的系统补丁和Service-Pack" class="headerlink" title="安装最新的系统补丁和Service Pack"></a>安装最新的系统补丁和Service Pack</h3><p>有些蓝屏是Windows本身存在缺陷造成的, 应此可通过安装最新的系统补丁和Service Pack来解决.</p>
<h2 id="蓝屏代码含义和解决方案"><a href="#蓝屏代码含义和解决方案" class="headerlink" title="蓝屏代码含义和解决方案"></a>蓝屏代码含义和解决方案</h2><h3 id="0x0000000A-IRQL-NOT-LESS-OR-EQUAL"><a href="#0x0000000A-IRQL-NOT-LESS-OR-EQUAL" class="headerlink" title="0x0000000A:IRQL_NOT_LESS_OR_EQUAL"></a>0x0000000A:IRQL_NOT_LESS_OR_EQUAL</h3><h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><p>主要是由问题的驱动程序、有缺陷或不兼容的硬件与软件造成的. 从技术角度讲. 表明在内核模式中存在以太高的进程内部请求级别(IRQL)访问其没有权限访问的内存地址.</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>请用前面介绍的解决方案中的2、3、5、8、9方案尝试排除.</p>
<h3 id="0x00000012-TRAP-CAUSE-UNKNOWN"><a href="#0x00000012-TRAP-CAUSE-UNKNOWN" class="headerlink" title="0x00000012:TRAP_CAUSE_UNKNOWN"></a>0x00000012:TRAP_CAUSE_UNKNOWN</h3><h4 id="错误分析-1"><a href="#错误分析-1" class="headerlink" title="错误分析"></a>错误分析</h4><p>如果遇到这个错误信息, 那么很不幸, 应为KeBudCheck分析的结果是错误原因未知.</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>既然微软都帮不上忙, 就得靠自己了, 请仔细回想这个错误是什么时候出现的; 第一次发生时你对系统做了哪些操作; 发生时正在进行什么操作. 从这些信息中找出可能的原因, 从而选择相应解决方案尝试排除.</p>
<h3 id="0x0000001A-MEMORY-MANAGEMENT"><a href="#0x0000001A-MEMORY-MANAGEMENT" class="headerlink" title="0x0000001A:MEMORY_MANAGEMENT"></a>0x0000001A:MEMORY_MANAGEMENT</h3><h4 id="错误分析-2"><a href="#错误分析-2" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个内存管理错误往往是由硬件引起的, 比如: 新安装的硬件、内存本身有问题等.</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果是在安装Windows时出现, 有可能是由于你的电脑达不到安装Windows的最小内存和磁盘要求.</p>
<h3 id="0x0000001E-KMODE-EXCEPTION-NOT-HANDLED"><a href="#0x0000001E-KMODE-EXCEPTION-NOT-HANDLED" class="headerlink" title="0x0000001E:KMODE_EXCEPTION_NOT_HANDLED"></a>0x0000001E:KMODE_EXCEPTION_NOT_HANDLED</h3><h4 id="错误分析-3"><a href="#错误分析-3" class="headerlink" title="错误分析"></a>错误分析</h4><p>Windows内核检查到一个非法或者未知的进程指令, 这个停机码一般是由问题的内存或是与前面0x0000000A相似的原因造成的.</p>
<h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>硬件兼容有问题:请对照前面提到的最新硬件兼容性列表, 查看所有硬件是否包含在该列表中.</li>
<li>有问题的设备驱动、系统服务或内存冲突和中断冲突: 如果在蓝屏信息中出现了驱动程序的名字, 请试着在安装模式或者故障恢复控制台中禁用或删除驱动程序, 并禁用所有刚安装的驱动和软件. 如果错误出现在系统启动过程中, 请进入安全模式, 将蓝屏信息中所标明的文件重命名或者删除.</li>
<li>如果错误信息中明确指出Win32K.sys: 很有可能是第三方远程控制软件造成的, 需要从故障恢复控制台中将对该软件的服务关闭.</li>
<li>在安装Windows后第一次重启时出现:最大嫌疑可能时系统分区的磁盘空间不足或BIOS兼容有问题.</li>
<li>如果是在关闭某个软件时出现的:很有可能时软件本省存在设计缺陷, 请升级或卸载它.</li>
</ol>
<h3 id="0x00000023-FAT-FILE-SYSTEM、0x00000024-NTFS-FILE-SYSTEM"><a href="#0x00000023-FAT-FILE-SYSTEM、0x00000024-NTFS-FILE-SYSTEM" class="headerlink" title="0x00000023:FAT_FILE_SYSTEM、0x00000024:NTFS_FILE_SYSTEM"></a>0x00000023:FAT_FILE_SYSTEM、0x00000024:NTFS_FILE_SYSTEM</h3><h4 id="错误分析-4"><a href="#错误分析-4" class="headerlink" title="错误分析"></a>错误分析</h4><p>0x00000023通常发生在读写FAT16或者FAT32文件系统的系统分区时, 而0x00000024则是由于NTFS.sys文件出现错误(这个驱动文件的作用是容许系统读写使用NTFS文件系统的磁盘). 这两个蓝屏错误很有可能是磁盘本身存在物理损坏, 或是中断要求封包(IRP)损坏而导致的. 其他原因还包括:硬盘磁盘碎片过多; 文件读写操作过于频繁, 并且数据量非常达或者是由于一些磁盘镜像软件或杀毒软件引起的.</p>
<h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>首先打开命令行提示符, 运行”Chkdsk /r”(注:不是CHKDISK, 感觉象这个, 但是……)命令检查并修复硬盘错误, 如果报告存在怀道(Bad Track), 请使用硬盘厂商提供的检查工具进行检查和修复.</li>
<li>接着禁用所有即使扫描文件的软件, 比如:杀毒软件、防火墙或备份工具.</li>
<li>右击C:\winnt\system32\drivers\fastfat.sys文件并选择”属性”, 查看其版本是否与当前系统所使用的Windows版本相符.(注:如果是XP, 应该是C:\windows\system32\drivers\fastfat.sys)</li>
<li>安装最新的主板驱动程序, 特别IDE驱动. 如果你的光驱、可移动存储器也提供有驱动程序, 最好将它们升级至最新版.</li>
</ol>
<h3 id="0x00000027-RDR-FILE-SYSTEM"><a href="#0x00000027-RDR-FILE-SYSTEM" class="headerlink" title="0x00000027:RDR_FILE_SYSTEM"></a>0x00000027:RDR_FILE_SYSTEM</h3><h4 id="错误分析-5"><a href="#错误分析-5" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个错误产生的原因很难判断, 不过Windows内存管理出了问题很可能会导致这个停机码的出现.</p>
<h4 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果是内存管理的缘故, 通常增加内存会解决问题.</p>
<h3 id="0x0000002EATA-BUS-ERROR"><a href="#0x0000002EATA-BUS-ERROR" class="headerlink" title="0x0000002EATA_BUS_ERROR"></a>0x0000002EATA_BUS_ERROR</h3><h4 id="错误分析-6"><a href="#错误分析-6" class="headerlink" title="错误分析"></a>错误分析</h4><p>系统内存存储器奇偶校验产生错误, 通常是因为有缺陷的内存(包括物理内存、二级缓存或者显卡显存)时设备驱动程序访问不存在的内存地址等原因引起的. 另外, 硬盘被病毒或者其他问题所损伤, 以出现这个停机码.</p>
<h4 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>检查病毒</li>
<li>使用”chkdsk /r”命令检查所有磁盘分区.</li>
<li>用Memtest86等内存测试软件检查内存.</li>
<li>检查硬件是否正确安装, 比如:是否牢固、金手指是否有污渍.</li>
</ol>
<h3 id="0x00000035-NO-MORE-IRP-STACK-LOCATIONS"><a href="#0x00000035-NO-MORE-IRP-STACK-LOCATIONS" class="headerlink" title="0x00000035:NO_MORE_IRP_STACK_LOCATIONS"></a>0x00000035:NO_MORE_IRP_STACK_LOCATIONS</h3><h4 id="错误分析-7"><a href="#错误分析-7" class="headerlink" title="错误分析"></a>错误分析</h4><p>从字面上理解, 应该时驱动程序或某些软件出现堆栈问题. 其实这个故障的真正原因应该时驱动程序本省存在问题, 或是内存有质量问题.</p>
<h4 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h4><p>请使用前面介绍的常规解决方案中与驱动程序和内存相关的方案进行排除.</p>
<h3 id="0x0000003F-NO-MORE-SYSTEM-PTES"><a href="#0x0000003F-NO-MORE-SYSTEM-PTES" class="headerlink" title="0x0000003F:NO_MORE_SYSTEM_PTES"></a>0x0000003F:NO_MORE_SYSTEM_PTES</h3><h4 id="错误分析-8"><a href="#错误分析-8" class="headerlink" title="错误分析"></a>错误分析</h4><p>一个与系统内存管理相关的错误, 比如:由于执行了大量的输入/输出操作, 造成内存管理出现问题: 有缺陷的驱动程序不正确地使用内存资源; 某个应用程序(比如:备份软件)被分配了大量的内核内存等.</p>
<h4 id="解决方案-8"><a href="#解决方案-8" class="headerlink" title="解决方案"></a>解决方案</h4><p>卸载所有最新安装的软件(特别是哪些增强磁盘性能的应用程序和杀毒软件)和驱动程序.</p>
<h3 id="0x00000044-MULTIPLE-IRP-COMPLIETE-REQUESTS"><a href="#0x00000044-MULTIPLE-IRP-COMPLIETE-REQUESTS" class="headerlink" title="0x00000044:MULTIPLE_IRP_COMPLIETE_REQUESTS"></a>0x00000044:MULTIPLE_IRP_COMPLIETE_REQUESTS</h3><h4 id="错误分析-9"><a href="#错误分析-9" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是由硬件驱动程序引起的.</p>
<h4 id="解决方案-9"><a href="#解决方案-9" class="headerlink" title="解决方案"></a>解决方案</h4><p>卸载最近安装的驱动程序. 这个故障很少出现, 目前已经知道的是, 在使用<a href="http://www.in-system.com/">www.in-system.com</a>这家公司的某些软件时会出现, 其中的罪魁就是Falstaff.sys文件.(作者难道不怕吃官司嘛, 把公司网址公布)</p>
<h3 id="0x00000050-PAGE-FAULT-IN-NONPAGED-AREA"><a href="#0x00000050-PAGE-FAULT-IN-NONPAGED-AREA" class="headerlink" title="0x00000050: PAGE_FAULT_IN_NONPAGED+AREA"></a>0x00000050: PAGE_FAULT_IN_NONPAGED+AREA</h3><h4 id="错误分析-10"><a href="#错误分析-10" class="headerlink" title="错误分析"></a>错误分析</h4><p>有问题的内存(包括屋里内存、二级缓存、显存)、不兼容的软件(主要是远程控制和杀毒软件)、损坏的NTFS卷以及有问题的硬件(比如: PCI插卡本身已损坏)等都会引发这个错误.</p>
<h4 id="解决方案-10"><a href="#解决方案-10" class="headerlink" title="解决方案"></a>解决方案</h4><p>请使用前面介绍的常规解决方案中与内存、软件、硬件、硬盘等相关的方案进行排除.</p>
<h3 id="0x00000051-REGISTRY-ERROR"><a href="#0x00000051-REGISTRY-ERROR" class="headerlink" title="0x00000051:REGISTRY_ERROR"></a>0x00000051:REGISTRY_ERROR</h3><h4 id="错误分析-11"><a href="#错误分析-11" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个停机码说明注册表或系统配置管理器出现错误, 由于硬盘本身有物理损坏或文件系统存在问题, 从而造成在读取注册文件时出现输入/输出错误.</p>
<h4 id="解决方案-11"><a href="#解决方案-11" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用”chkdsk /r”检查并修复磁盘错误.</p>
<h3 id="0x00000058-FTDISK-INTERNAL-ERROR"><a href="#0x00000058-FTDISK-INTERNAL-ERROR" class="headerlink" title="0x00000058:FTDISK_INTERNAL_ERROR"></a>0x00000058:FTDISK_INTERNAL_ERROR</h3><h4 id="错误分析-12"><a href="#错误分析-12" class="headerlink" title="错误分析"></a>错误分析</h4><p>说明在容错集的主驱动发生错误.</p>
<h4 id="解决方案-12"><a href="#解决方案-12" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先尝试重启电脑看是否能解决问题, 如果不行, 则尝试”最后一次正确配置”进行解决.</p>
<h3 id="0x0000005E-CRITICAL-SERVICE-FAILED"><a href="#0x0000005E-CRITICAL-SERVICE-FAILED" class="headerlink" title="0x0000005E:CRITICAL_SERVICE_FAILED"></a>0x0000005E:CRITICAL_SERVICE_FAILED</h3><h4 id="错误分析-13"><a href="#错误分析-13" class="headerlink" title="错误分析"></a>错误分析</h4><p>某个非常重要的系统服务启动识别造成的.</p>
<h4 id="解决方案-13"><a href="#解决方案-13" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果是在安装了某个新硬件后出新的, 可以先移除该硬件, 并通过网上列表检查它是否与Windows 2K/XP兼容, 接着启动电脑, 如果蓝屏还是出现, 请使用”最后一次正确配置”来启动Windows, 如果这样还是失败, 建议进行修复安装或是重装.</p>
<h3 id="0x0000006F-SESSION3-INITIALIZATION-FAILED"><a href="#0x0000006F-SESSION3-INITIALIZATION-FAILED" class="headerlink" title="0x0000006F:SESSION3_INITIALIZATION-FAILED"></a>0x0000006F:SESSION3_INITIALIZATION-FAILED</h3><h4 id="错误分析-14"><a href="#错误分析-14" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个错误通常出现在Windows启动时, 一般是由有问题的驱动程序或损坏的系统文件引起的.</p>
<h4 id="解决方案-14"><a href="#解决方案-14" class="headerlink" title="解决方案"></a>解决方案</h4><p>建议使用Windows安装光盘对系统进行修复安装.</p>
<h3 id="0x00000076ROCESS-HAS-LOCKED-PAGES"><a href="#0x00000076ROCESS-HAS-LOCKED-PAGES" class="headerlink" title="0x00000076ROCESS_HAS_LOCKED_PAGES"></a>0x00000076ROCESS_HAS_LOCKED_PAGES</h3><h4 id="错误分析-15"><a href="#错误分析-15" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是因为某个驱动程序在完成了一次输入/输出操作后, 没有正确释放所占有的内存</p>
<h4 id="解决方案-15"><a href="#解决方案-15" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>点击开始–&gt;运行:regedt32, 找到[HKLM\SYSTEM\Currentcontrol set\control\session manager\memory management], 在右侧新建双字节值”TrackLockedPages”, 值为1. 这样Windows便会在错误再次出现时跟踪到是哪个驱动程序的问题.</li>
<li>如果再次出现蓝屏, 那么错误信息会变成:STOP:0x0000000CB(0xY,0xY,0xY,0xY)DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS其中第四个”0xY”会显示为问题驱动程序的名字, 接着对其进行更新或删除.</li>
<li>进入注册表, 删除添加的”TrackLockedPages”.</li>
</ol>
<h3 id="0x00000077-KERNEL-STACK-INPAGE-ERROR"><a href="#0x00000077-KERNEL-STACK-INPAGE-ERROR" class="headerlink" title="0x00000077:KERNEL_STACK_INPAGE_ERROR"></a>0x00000077:KERNEL_STACK_INPAGE_ERROR</h3><h4 id="错误分析-16"><a href="#错误分析-16" class="headerlink" title="错误分析"></a>错误分析</h4><p>说明需要使用的内核数据没有在虚拟内存或物理内存中找到. 这个错误常常于是着磁盘有问题, 相应数据损坏或受到病毒侵蚀.</p>
<h4 id="解决方案-16"><a href="#解决方案-16" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用杀毒软件扫描系统; 使用”chkdsk /r”命令检查并修复磁盘错误, 如不行则使用磁盘厂商提供的工具检查修复.</p>
<h3 id="0x0000007A-KERNEL-DATA-INPAGE-ERROR"><a href="#0x0000007A-KERNEL-DATA-INPAGE-ERROR" class="headerlink" title="0x0000007A:KERNEL_DATA_INPAGE_ERROR"></a>0x0000007A:KERNEL_DATA_INPAGE_ERROR</h3><h4 id="错误分析-17"><a href="#错误分析-17" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个错误往往是虚拟内存中的内核数据无法读入内存造成的. 原因可能是虚拟内存页面文件中存在坏簇、病毒、磁盘控制器出错、内存有问题.</p>
<h4 id="解决方案-17"><a href="#解决方案-17" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先用升级为最新病毒库杀毒软件查杀病毒, 如果促无信息中还0xC000009C或0xC000016A代码, 那么表示是坏簇造成的, 并且系统的磁盘检测工具无法自动修复, 这时要进入”故障恢复控制台”, 用”chkdsk /r”命令进行手动修复.</p>
<h3 id="0x0000007B-INACESSIBLE-BOOT-DEVICE"><a href="#0x0000007B-INACESSIBLE-BOOT-DEVICE" class="headerlink" title="0x0000007B:INACESSIBLE_BOOT_DEVICE"></a>0x0000007B:INACESSIBLE_BOOT_DEVICE</h3><h4 id="错误分析-18"><a href="#错误分析-18" class="headerlink" title="错误分析"></a>错误分析</h4><p>Windows在启动过程中无法访问系统分区或启动卷. 一般发生在更换主板后第一次启动时, 主要是因为新主板和旧主板的IDE控制器使用了不同芯片组造成的. 有时也可能是病毒或硬盘损伤所引起的.</p>
<h4 id="解决方案-18"><a href="#解决方案-18" class="headerlink" title="解决方案"></a>解决方案</h4><p>一般只要用安装光盘启动电脑, 然后执行修复安装即可解决问题. 对于病毒则可使用DOS版的杀毒软件进行查杀(主战有kv2005DOS版下载). 如果是硬盘本身存在问题, 请将其安装到其他电脑中, 然后使用”chkdsk /r”来检查并修复磁盘错误.</p>
<h3 id="0x0000007E-SYSTEM-THREAD-EXCEPTION-NOT-HANDLED"><a href="#0x0000007E-SYSTEM-THREAD-EXCEPTION-NOT-HANDLED" class="headerlink" title="0x0000007E:SYSTEM_THREAD_EXCEPTION_NOT_HANDLED"></a>0x0000007E:SYSTEM_THREAD_EXCEPTION_NOT_HANDLED</h3><h4 id="错误分析-19"><a href="#错误分析-19" class="headerlink" title="错误分析"></a>错误分析</h4><p>系统进程产生错误, 但Windows错误处理器无法捕获. 其产生原因很多, 包括:硬件兼容性、有问题的驱动程序或系统服务、 或者是某些软件.</p>
<h4 id="解决方案-19"><a href="#解决方案-19" class="headerlink" title="解决方案"></a>解决方案</h4><p>请使用”事件查看器”来获取更多的信息, 从中发现错误根源.(发现好像不是解决哦, 看来这里大家要自力更生了!)</p>
<h3 id="0x0000007F-UNEXPECTED-KERNEL-MOED-TRAP"><a href="#0x0000007F-UNEXPECTED-KERNEL-MOED-TRAP" class="headerlink" title="0x0000007F:UNEXPECTED_KERNEL_MOED_TRAP"></a>0x0000007F:UNEXPECTED_KERNEL_MOED_TRAP</h3><h4 id="错误分析-20"><a href="#错误分析-20" class="headerlink" title="错误分析"></a>错误分析</h4><p>一般是由于有问题的硬件(比如:内存)或某些软件引起的. 有时超频也会产生这个错误.</p>
<h4 id="解决方案-20"><a href="#解决方案-20" class="headerlink" title="解决方案"></a>解决方案</h4><p>用检测软件(比如:Memtest86)检查内存, 如果进行了超频, 请取消超频. 将PCI硬件插卡从主板插槽拔下来, 或更换插槽. 另外, 有些主板(比如:nForce2主板)在进行超频后, 南桥芯片过热也会导致蓝屏, 此时为该芯片单独增加散热片往往可以有效解决问题.</p>
<h3 id="0x00000080-NMI-HARDWARE-FAILURE"><a href="#0x00000080-NMI-HARDWARE-FAILURE" class="headerlink" title="0x00000080:NMI_HARDWARE_FAILURE"></a>0x00000080:NMI_HARDWARE_FAILURE</h3><h4 id="错误分析-21"><a href="#错误分析-21" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是有硬件引起的.(似乎蓝屏与硬件错误有不解之缘)</p>
<h4 id="解决方案-21"><a href="#解决方案-21" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果最近安装了新硬件, 请将其移除, 然后试试更换插槽和安装最新的驱动程序, 如果升级了驱动程序, 请恢复后原来的版本; 检查内存金手指是否有污染和损坏; 扫描病毒; 运行”chkdsk /r”检查并修复磁盘错误; 检查所有硬件插卡已经插牢. 如果以上尝试都无效果, 就得找专业的电脑维修公司请求帮助了.</p>
<h3 id="0x0000008E-KERNEL-MODE-EXCEPTION-NOT-HANDLED"><a href="#0x0000008E-KERNEL-MODE-EXCEPTION-NOT-HANDLED" class="headerlink" title="0x0000008E:KERNEL_MODE_EXCEPTION_NOT_HANDLED"></a>0x0000008E:KERNEL_MODE_EXCEPTION_NOT_HANDLED</h3><h4 id="错误分析-22"><a href="#错误分析-22" class="headerlink" title="错误分析"></a>错误分析</h4><p>内核级应用程序产生了错误, 但Windows错误处理器没有捕获. 通常是硬件兼容性错误.</p>
<h4 id="解决方案-22"><a href="#解决方案-22" class="headerlink" title="解决方案"></a>解决方案</h4><p>升级驱动程序或升级BIOS.</p>
<h3 id="0x0000009C-MACHINE-CHECK-EXCEPTION"><a href="#0x0000009C-MACHINE-CHECK-EXCEPTION" class="headerlink" title="0x0000009C:MACHINE_CHECK_EXCEPTION"></a>0x0000009C:MACHINE_CHECK_EXCEPTION</h3><h4 id="错误分析-23"><a href="#错误分析-23" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是硬件引起的. 一般是因为超频或是硬件存在问题(内存、CPU、总线、电源).</p>
<h4 id="解决方案-23"><a href="#解决方案-23" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果进行了超频, 请降会CPU原来频率, 检查硬件.</p>
<h3 id="0x0000009FRIVER-POWER-STATE-FAILURE"><a href="#0x0000009FRIVER-POWER-STATE-FAILURE" class="headerlink" title="0x0000009FRIVER_POWER_STATE_FAILURE"></a>0x0000009FRIVER_POWER_STATE_FAILURE</h3><h4 id="错误分析-24"><a href="#错误分析-24" class="headerlink" title="错误分析"></a>错误分析</h4><p>往往与电源有关系, 常常发生在与电源相关的操作, 比如:关机、待机或休睡.</p>
<h4 id="解决方案-24"><a href="#解决方案-24" class="headerlink" title="解决方案"></a>解决方案</h4><p>重装系统, 如果不能解决, 请更换电源.</p>
<h3 id="0x000000A5-ACPI-BIOS-ERROR"><a href="#0x000000A5-ACPI-BIOS-ERROR" class="headerlink" title="0x000000A5:ACPI_BIOS_ERROR"></a>0x000000A5:ACPI_BIOS_ERROR</h3><h4 id="错误分析-25"><a href="#错误分析-25" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是因为主板BIOS不能全面支持ACPI规范.</p>
<h4 id="解决方案-25"><a href="#解决方案-25" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果没有相应BIOS升级, 那么可在安装Windows 2K/XP时, 当出现”press F6 if you need to install a third-party SCSI or RAID driver”提示时, 按下F7键, 这样Windows便会自动禁止安装ACPI HAL, 而安装 Standard PC HAL.</p>
<h3 id="0x000000B4-VIDEO-DRIVER-INIT-FAILURE"><a href="#0x000000B4-VIDEO-DRIVER-INIT-FAILURE" class="headerlink" title="0x000000B4:VIDEO_DRIVER_INIT_FAILURE"></a>0x000000B4:VIDEO_DRIVER_INIT_FAILURE</h3><h4 id="错误分析-26"><a href="#错误分析-26" class="headerlink" title="错误分析"></a>错误分析</h4><p>这个停止信息表示Windows因为不能启动显卡驱动, 从而无法进入图形界面. 通常是显卡的问题, 或者是存在与显卡的硬件冲突(比如:与并行或串行端口冲突).</p>
<h4 id="解决方案-26"><a href="#解决方案-26" class="headerlink" title="解决方案"></a>解决方案</h4><p>进入安全模式查看问题是否解决, 如果可以, 请升级最新的显卡驱动程序, 如果还不行, 则很可能是显卡与并行端口存在冲突, 需要在安全模式按下WIN+break组合键打开”系统属性”, 在硬件–&gt;设备管理器中找到并双击连接打印的LPT1端口的项, 在”资源”选项卡中取消”使用自动配置”的构选, 然后将”输入/输出范围”的”03BC”改为”0378”.</p>
<h3 id="0x000000BE-ATTEMPTED-WRITE-TO-READONLY-MEMORY"><a href="#0x000000BE-ATTEMPTED-WRITE-TO-READONLY-MEMORY" class="headerlink" title="0x000000BE:ATTEMPTED_WRITE_TO_READONLY_MEMORY"></a>0x000000BE:ATTEMPTED_WRITE_TO_READONLY_MEMORY</h3><h4 id="错误分析-27"><a href="#错误分析-27" class="headerlink" title="错误分析"></a>错误分析</h4><p>某个驱动程序试图向只读内存写入数据造成的. 通常是在安装了新的驱动程序, 系统服务或升级了设备的固件程序后.</p>
<h4 id="解决方案-27"><a href="#解决方案-27" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果在错误信息中包含有驱动程序或者服务文件名称, 请根据这个信息将新安装的驱动程序或软件卸载或禁用.</p>
<h3 id="0x000000C2-BAD-POOL-CALLER"><a href="#0x000000C2-BAD-POOL-CALLER" class="headerlink" title="0x000000C2:BAD_POOL_CALLER"></a>0x000000C2:BAD_POOL_CALLER</h3><h4 id="错误分析-28"><a href="#错误分析-28" class="headerlink" title="错误分析"></a>错误分析</h4><p>一个内核层的进程或驱动程序错误地试图进入内存操作. 通常是驱动程序或存在BUG的软件造成的.</p>
<h4 id="解决方案-28"><a href="#解决方案-28" class="headerlink" title="解决方案"></a>解决方案</h4><p>请参考前面介绍的常规解决方案相关项目进行排除.</p>
<h3 id="0x000000CERIVER-UNLOADED-WITHOUT-CANCELLING-PENDING-OPERATIONS"><a href="#0x000000CERIVER-UNLOADED-WITHOUT-CANCELLING-PENDING-OPERATIONS" class="headerlink" title="0x000000CERIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS"></a>0x000000CERIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS</h3><h4 id="错误分析-29"><a href="#错误分析-29" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是由有问题的驱动程序或系统服务造成的.</p>
<h4 id="解决方案-29"><a href="#解决方案-29" class="headerlink" title="解决方案"></a>解决方案</h4><p>请参考前面介绍的常规解决方案相关项目进行排除.</p>
<h3 id="0x000000D1RIVER-IRQL-NOT-LESS-OR-EQUAL"><a href="#0x000000D1RIVER-IRQL-NOT-LESS-OR-EQUAL" class="headerlink" title="0x000000D1RIVER_IRQL_NOT_LESS_OR_EQUAL"></a>0x000000D1RIVER_IRQL_NOT_LESS_OR_EQUAL</h3><h4 id="错误分析-30"><a href="#错误分析-30" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是由有问题的驱动程序引起的(比如罗技鼠标的Logitech MouseWare 9.10和9.24版驱动程序会引发这个故障). 同时,有缺陷的内存、 损坏的虚拟内存文件、 某些软件(比如多媒体软件、杀毒软件、备份软件、DVD播放软件)等也会导致这个错误.</p>
<h4 id="解决方案-30"><a href="#解决方案-30" class="headerlink" title="解决方案"></a>解决方案</h4><p>检查最新安装或升级的驱动程序(如果蓝屏中出现”acpi.sys”等类似文件名, 可以非常肯定时驱动程序问题)和软件; 测试内存是否存在问题; 进入”故障恢复控制台”, 转到虚拟内存页面文件Pagefile.sys所在分区, 执行”del pagefile.sys”命令, 将页面文件删除; 然后在页面文件所在分区执行”chkdsk /r”命令;进入Windows后重新设置虚拟内存.如果在上网时遇到这个蓝屏, 而你恰恰又在进行大量的数据下载和上传(比如:网络游戏、BT下载), 那么应该是网卡驱动的问题, 需要升级其驱动程序.</p>
<h3 id="0x000000EA-THREAD-STUCK-IN-DEVICE-DRIVER"><a href="#0x000000EA-THREAD-STUCK-IN-DEVICE-DRIVER" class="headerlink" title="0x000000EA:THREAD_STUCK_IN_DEVICE_DRIVER"></a>0x000000EA:THREAD_STUCK_IN_DEVICE_DRIVER</h3><h4 id="错误分析-31"><a href="#错误分析-31" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是由显卡或显卡驱动程序引发的.</p>
<h4 id="解决方案-31"><a href="#解决方案-31" class="headerlink" title="解决方案"></a>解决方案</h4><p>先升级最新的显卡驱动, 如果不行, 则需要更换显卡测试故障是否依然发生.</p>
<h3 id="0x000000ED-UNMOUNTABLE-BOOT-VOLUME"><a href="#0x000000ED-UNMOUNTABLE-BOOT-VOLUME" class="headerlink" title="0x000000ED:UNMOUNTABLE_BOOT_VOLUME"></a>0x000000ED:UNMOUNTABLE_BOOT_VOLUME</h3><h4 id="错误分析-32"><a href="#错误分析-32" class="headerlink" title="错误分析"></a>错误分析</h4><p>一般是由于磁盘存在错误导致的, 有时也建议检查硬盘连线是否接触不良, 或是没有使用合乎该硬盘传输规格的连接线, 例如ATA-100仍使用ATA-33的连接线, 对低速硬盘无所谓, 但告诉硬盘(支持ATA-66以上)的要求较严格, 规格不对的连线有时也会引起这类没办法开机的故障. 如果在修复后, 还是经常出现这个错误, 很可能是硬盘损坏的前兆.</p>
<h4 id="解决方案-32"><a href="#解决方案-32" class="headerlink" title="解决方案"></a>解决方案</h4><p>一般情况下, 重启会解决问题, 不管怎么样都建议执行”chkdsk /r”命令来检查修复硬盘</p>
<h3 id="0x000000F2-HARDWARE-INTERRUPT-STORM"><a href="#0x000000F2-HARDWARE-INTERRUPT-STORM" class="headerlink" title="0x000000F2:HARDWARE)INTERRUPT_STORM"></a>0x000000F2:HARDWARE)INTERRUPT_STORM</h3><h4 id="错误分析-33"><a href="#错误分析-33" class="headerlink" title="错误分析"></a>错误分析</h4><p>内核层检查到系统出现中断风暴, 比如:某个设备在完成操作后没有释放所占用的中断. 通常这是由缺陷的驱动程序造成的.</p>
<h4 id="解决方案-33"><a href="#解决方案-33" class="headerlink" title="解决方案"></a>解决方案</h4><p>升级或卸载最新安装的硬件驱动程序.</p>
<h3 id="0x00000135-UNABLE-TO-LOCATE-DLL"><a href="#0x00000135-UNABLE-TO-LOCATE-DLL" class="headerlink" title="0x00000135:UNABLE_TO_LOCATE_DLL"></a>0x00000135:UNABLE_TO_LOCATE_DLL</h3><h4 id="错误分析-34"><a href="#错误分析-34" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常表示某个文件丢失或已经损坏, 或者是注册表出现错误.</p>
<h4 id="解决方案-34"><a href="#解决方案-34" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果是文件丢失或损坏, 在蓝屏信息中通常会显示相应的文件名, 你可以通过网络或是其他电脑找到相应的文件, 并将其复制到系统文件夹下的SYSTEM32子文件夹中. 如果没有显示文件名, 那就很有可能是注册表损坏, 请利用系统还原或是以前的注册表备份进行恢复.</p>
<h3 id="0x0000021A-STATUS-SYSTEM-PROCESS-TERMINATED"><a href="#0x0000021A-STATUS-SYSTEM-PROCESS-TERMINATED" class="headerlink" title="0x0000021A:STATUS_SYSTEM_PROCESS_TERMINATED"></a>0x0000021A:STATUS_SYSTEM_PROCESS_TERMINATED</h3><h4 id="错误分析-35"><a href="#错误分析-35" class="headerlink" title="错误分析"></a>错误分析</h4><p>用户模式子系统, 例如Winlogon或客服服务运行时子系统(CSRSS)已损坏, 所以无法再保证安全性, 导致系统无法启动. 有时, 当系统管理员错误地修改了用户帐号权限, 导致其无法访问系统文件和文件夹.</p>
<h4 id="解决方案-35"><a href="#解决方案-35" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用”最后一次正确的配置”, 如果无效, 可使用安装光盘进行修复安装.</p>
<h3 id="STOP-0xC0000221-or-STATUS-IMAGE-CHECKSUM-MISMATCH"><a href="#STOP-0xC0000221-or-STATUS-IMAGE-CHECKSUM-MISMATCH" class="headerlink" title="STOP 0xC0000221 or STATUS_IMAGE_CHECKSUM_MISMATCH"></a>STOP 0xC0000221 or STATUS_IMAGE_CHECKSUM_MISMATCH</h3><h4 id="错误分析-36"><a href="#错误分析-36" class="headerlink" title="错误分析"></a>错误分析</h4><p>通常是由于驱动程序或系统DLL文件损坏造成的. 一般情况下, 在蓝屏中会出现文件名称</p>
<h4 id="解决方案-36"><a href="#解决方案-36" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>使用Windows安装光盘进行修复安装;</li>
<li>如果还能进入安全模式, 可以”开始–&gt;运行”: sfc /scannow</li>
<li>还可以采用提取文件的方法来解决, 进入”故障恢复控制台”, 使用copy或expand命令从光盘中复制或解压受损的文件. 不过, 蓝屏一般都是驱动程序文件的问题, 所以expand命令会用的都一些, 比如:蓝屏中提示tdi.sys文件, 因为驱动文件一般在i386\driver压缩包里, 所以使用: expand %CDROM:\i386\driver.cab \f:tdi.sys c:\winnt\system\drivers.(xp为expand %CDROM:\i386\driver.cab \f:tdi.sys c:\windowns\system\drivers)</li>
</ol>
<h3 id="如果启动时出现这些蓝屏停机码"><a href="#如果启动时出现这些蓝屏停机码" class="headerlink" title="如果启动时出现这些蓝屏停机码"></a>如果启动时出现这些蓝屏停机码</h3><p>如果在Windows启动时出现蓝屏, 并出现附表一中的错误信息, 那么多半时硬件出现了问题, 请用硬件厂商提供的诊断工具来判断硬件是否存在问题, 并到其网站查看是否有最新的BIOS或固件更新程序. 如果硬件没有问题, 重装Windows 2K/XP, 若相同问题还是出现, 就只能求助专业的技术支持了.</p>
<p>如果遇到的时附表二中的错误信息, 也只有重装Windows了, 如果不能解决问题, 建议求救专业的技术支持。</p>
<blockquote>
<p>友情链接：<a href="https://jingyan.baidu.com/article/fec4bce22b9569f2618d8b96.html">https://jingyan.baidu.com/article/fec4bce22b9569f2618d8b96.html</a></p>
</blockquote>
<p>蓝屏编码表</p>
<!--more-->

<table>
<thead>
<tr>
<th>编码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0X0000000</td>
<td>操作完成</td>
</tr>
<tr>
<td>0X0000001</td>
<td>不正确的函数</td>
</tr>
<tr>
<td>0X0000002</td>
<td>系统找不到指定的文件</td>
</tr>
<tr>
<td>0X0000003</td>
<td>系统找不到指定的路径</td>
</tr>
<tr>
<td>0X0000004</td>
<td>系统无法打开文件</td>
</tr>
<tr>
<td>0X0000005</td>
<td>拒绝存取</td>
</tr>
<tr>
<td>0X0000006</td>
<td>无效的代码</td>
</tr>
<tr>
<td>0X0000007</td>
<td>内存控制模块已损坏</td>
</tr>
<tr>
<td>0X0000008</td>
<td>内存空间不足，无法处理这个指令</td>
</tr>
<tr>
<td>0X0000009</td>
<td>内存控制模块位址无效</td>
</tr>
<tr>
<td>0X000000A</td>
<td>环境不正确</td>
</tr>
<tr>
<td>0X000000B</td>
<td>尝试载入一个格式错误的程序</td>
</tr>
<tr>
<td>0X000000C</td>
<td>存取码错误</td>
</tr>
<tr>
<td>0X000000D</td>
<td>资料错误</td>
</tr>
<tr>
<td>0X000000E</td>
<td>内存空间不够，无法完成这项操作</td>
</tr>
<tr>
<td>0X000000F</td>
<td>系统找不到指定的硬盘</td>
</tr>
<tr>
<td>0X0000010</td>
<td>无法移除目录</td>
</tr>
<tr>
<td>0X0000011</td>
<td>系统无法将文件移到其他的硬盘</td>
</tr>
<tr>
<td>0X0000012</td>
<td>没有任何文件</td>
</tr>
<tr>
<td>0X0000019</td>
<td>找不到指定扇区或磁道</td>
</tr>
<tr>
<td>0X000001A</td>
<td>指定的磁盘或磁片无法存取</td>
</tr>
<tr>
<td>0X000001B</td>
<td>磁盘找不到要求的装置</td>
</tr>
<tr>
<td>0X000001C</td>
<td>打印机没有纸</td>
</tr>
<tr>
<td>0X000001D</td>
<td>系统无法将资料写入指定的磁盘</td>
</tr>
<tr>
<td>0X000001E</td>
<td>系统无法读取指定的装置</td>
</tr>
<tr>
<td>0X000001F</td>
<td>连接到系统的某个装置没有作用</td>
</tr>
<tr>
<td>0X0000021</td>
<td>文件的一部分被锁定，现在无法存取</td>
</tr>
<tr>
<td>0X0000024</td>
<td>开启的分享文件数量太多</td>
</tr>
<tr>
<td>0X0000026</td>
<td>到达文件结尾</td>
</tr>
<tr>
<td>0X0000027</td>
<td>磁盘已满</td>
</tr>
<tr>
<td>0X0000036</td>
<td>网络繁忙</td>
</tr>
<tr>
<td>0X000003B</td>
<td>网络发生意外的错误</td>
</tr>
<tr>
<td>0X0000043</td>
<td>网络名称找不到</td>
</tr>
<tr>
<td>0X0000050</td>
<td>文件已经存在</td>
</tr>
<tr>
<td>0X0000052</td>
<td>无法建立目录或文件</td>
</tr>
<tr>
<td>0X0000053</td>
<td>INT24失败(什麼意思？还请高手指点一二)</td>
</tr>
<tr>
<td>0X000006B</td>
<td>因为代用的磁盘尚未插入，所以程序已经停止</td>
</tr>
<tr>
<td>0X000006C</td>
<td>磁盘正在使用中或被锁定</td>
</tr>
<tr>
<td>0X000006F</td>
<td>文件名太长</td>
</tr>
<tr>
<td>0X0000070</td>
<td>硬盘空间不足</td>
</tr>
<tr>
<td>0X000007F</td>
<td>找不到指定的程序</td>
</tr>
<tr>
<td>0X000045B</td>
<td>系统正在关机</td>
</tr>
<tr>
<td>0X000045C</td>
<td>无法中止系统关机，因为没有关机的动作在进行中</td>
</tr>
<tr>
<td>0X000046A</td>
<td>可用服务器储存空间不足</td>
</tr>
<tr>
<td>0X0000475</td>
<td>系统BIOS无法变更系统电源状态</td>
</tr>
<tr>
<td>0X000047E</td>
<td>指定的程序需要新的windows版本</td>
</tr>
<tr>
<td>0X000047F</td>
<td>指定的程序不是windwos或ms-dos程序</td>
</tr>
<tr>
<td>0X0000480</td>
<td>指定的程序已经启动，无法再启动一次</td>
</tr>
<tr>
<td>0X0000481</td>
<td>指定的程序是为旧版的 windows所写的</td>
</tr>
<tr>
<td>0X0000482</td>
<td>执行此应用程序所需的程序库文件之一被损</td>
</tr>
<tr>
<td>0X0000483</td>
<td>没有应用程序与此项操作的指定文件建立关联</td>
</tr>
<tr>
<td>0X0000484</td>
<td>传送指令到应用程序无效</td>
</tr>
<tr>
<td>0X00005A2</td>
<td>指定的装置名称无效</td>
</tr>
<tr>
<td>0X00005AA</td>
<td>系统资源不足，无法完成所要求的服务</td>
</tr>
<tr>
<td>0X00005AB</td>
<td>系统资源不足，无法完成所要求的服务</td>
</tr>
<tr>
<td>0X00005AC</td>
<td>系统资源不足，无法完成所要求的服务</td>
</tr>
<tr>
<td>110 0x006E</td>
<td>系统无法开启指定的 装置或档案。</td>
</tr>
<tr>
<td>111 0x006F</td>
<td>档名太长。</td>
</tr>
<tr>
<td>112 0x0070</td>
<td>磁碟空间不足。</td>
</tr>
<tr>
<td>113 0x0071</td>
<td>没有可用的内部档案识别字。</td>
</tr>
<tr>
<td>114 0x0072</td>
<td>目标内部档案识别字不正确。</td>
</tr>
<tr>
<td>117 0x0075</td>
<td>由应用程式所执行的 IOCTL 呼叫 不正确。</td>
</tr>
<tr>
<td>118 0x0076</td>
<td>写入验证参数值不正确。</td>
</tr>
<tr>
<td>119 0x0077</td>
<td>系统不支援所要求的指令。</td>
</tr>
<tr>
<td>120 0x0078</td>
<td>此项功能仅在 Win32 模式有效。</td>
</tr>
<tr>
<td>121 0x0079</td>
<td>semaphore 超过逾时期间。</td>
</tr>
<tr>
<td>122 0x007A</td>
<td>传到系统呼叫的资料区域 太小。</td>
</tr>
<tr>
<td>123 0x007B</td>
<td>档名、目录名称或储存体标?***语法错?***。</td>
</tr>
<tr>
<td>124 0x007C</td>
<td>系统呼叫层次不正确。</td>
</tr>
<tr>
<td>125 0x007D</td>
<td>磁碟没有设定标?***。</td>
</tr>
<tr>
<td>126 0x007E</td>
<td>找不到指定的模组。</td>
</tr>
<tr>
<td>127 0x007F</td>
<td>找不到指定的程序。</td>
</tr>
<tr>
<td>128 0x0080</td>
<td>没有子行程可供等待。</td>
</tr>
<tr>
<td>129 0x0081</td>
<td>%1 这个应用程式无法在 Win32 模式下执行。</td>
</tr>
<tr>
<td>130 0x0082</td>
<td>Attempt to use a file handle to an open disk partition for an operation other than raw disk I/O.</td>
</tr>
<tr>
<td>131 0x0083</td>
<td>尝试将档案指标移至档案开头之前。</td>
</tr>
<tr>
<td>132 0x0084</td>
<td>无法在指定的装置或档案，设定档案指标。</td>
</tr>
<tr>
<td>133 0x0085</td>
<td>JOIN 或 SUBST 指令 无法用於 内含事先结合过的磁碟机。</td>
</tr>
<tr>
<td>134 0x0086</td>
<td>尝试在已经结合的磁碟机，使用 JOIN 或 SUBST 指令。</td>
</tr>
<tr>
<td>135 0x0087</td>
<td>尝试在已经替换的磁碟机，使 用 JOIN 或 SUBST 指令。</td>
</tr>
<tr>
<td>136 0x0088</td>
<td>系统尝试删除 未连结过的磁碟机的连结关系。</td>
</tr>
<tr>
<td>137 0x0089</td>
<td>系统尝试删除 未替换过的磁碟机的替换关系。</td>
</tr>
<tr>
<td>138 0x008A</td>
<td>系统尝试将磁碟机结合到已经结合过之磁碟机的目录。</td>
</tr>
<tr>
<td>139 0x008B</td>
<td>系统尝试将磁碟机替换成已经替换过之磁碟机的目录。</td>
</tr>
<tr>
<td>140 0x008C</td>
<td>系统尝试将磁碟机替换成已经替换过之磁碟机的目录。</td>
</tr>
<tr>
<td>141 0x008D</td>
<td>系统尝试将磁碟机 SUBST 成已结合的磁碟机 目录。</td>
</tr>
<tr>
<td>142 0x008E</td>
<td>系统此刻无法执行 JOIN 或 SUBST。</td>
</tr>
<tr>
<td>143 0x008F</td>
<td>系统无法将磁碟机结合或替换同一磁碟机下目录。</td>
</tr>
<tr>
<td>144 0x0090</td>
<td>这个目录不是根目录的子目录。</td>
</tr>
<tr>
<td>145 0x0091</td>
<td>目录仍有资料。</td>
</tr>
<tr>
<td>146 0x0092</td>
<td>指定的路恕w经被替换过。</td>
</tr>
<tr>
<td>147 0x0093</td>
<td>资源不足，无法处理这项 指令。</td>
</tr>
<tr>
<td>148 0x0094</td>
<td>指定的路拿o时候无法使用。</td>
</tr>
<tr>
<td>149 0x0095</td>
<td>尝试要结合或替换的磁碟机目录，是已经替换过的的目标。</td>
</tr>
<tr>
<td>150 0x0096</td>
<td>CONFIG.SYS 档未指定系统追踪资讯，或是追踪功能被取消。</td>
</tr>
<tr>
<td>151 0x0097</td>
<td>指定的 semaphore事件 DosMuxSemWait 数目不正确。</td>
</tr>
<tr>
<td>152 0x0098</td>
<td>DosMuxSemWait 没有执行；设定太多的 semaphore。</td>
</tr>
<tr>
<td>153 0x0099</td>
<td>DosMuxSemWait 清单不正确。</td>
</tr>
<tr>
<td>154 0x009A</td>
<td>您所输入的储存媒体标 元长度限制。</td>
</tr>
<tr>
<td>155 0x009B</td>
<td>无法建立其他的执行绪。</td>
</tr>
<tr>
<td>156 0x009C</td>
<td>接收行程拒绝接受信号。</td>
</tr>
<tr>
<td>157 0x009D</td>
<td>区段已经被舍弃，无法被锁定。</td>
</tr>
<tr>
<td>158 0x009E</td>
<td>区段已经解除锁定。</td>
</tr>
<tr>
<td>159 0x009F</td>
<td>执行绪识别码的位址不正确。</td>
</tr>
<tr>
<td>160 0x00A0</td>
<td>传到 DosExecPgm 的引数字串不正确。</td>
</tr>
<tr>
<td>161 0x00A1</td>
<td>指定的路恕ㄔ萧T。</td>
</tr>
<tr>
<td>162 0x00A2</td>
<td>信号等候处理。</td>
</tr>
<tr>
<td>164 0x00A4</td>
<td>系统无法建立执行绪。</td>
</tr>
<tr>
<td>167 0x00A7</td>
<td>无法锁定档案的部份范围。</td>
</tr>
<tr>
<td>170 0x00AA</td>
<td>所要求的资源正在使用中。</td>
</tr>
<tr>
<td>173 0x00AD</td>
<td>取消范围的锁定要求不明显。</td>
</tr>
<tr>
<td>174 0x00AE</td>
<td>档案系统不支援自动变更锁定类型。</td>
</tr>
<tr>
<td>180 0x00B4</td>
<td>系统发现不正确的区段号码。</td>
</tr>
<tr>
<td>182 0x00B6</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>183 0x00B7</td>
<td>档案已存在，无法建立同一档案。</td>
</tr>
<tr>
<td>186 0x00BA</td>
<td>传送的旗号错?***。</td>
</tr>
<tr>
<td>187 0x00BB</td>
<td>指定的系统旗号找不到。</td>
</tr>
<tr>
<td>188 0x00BC</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>189 0x00BD</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>190 0x00BE</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>191 0x00BF</td>
<td>无法在 Win32 模式下执行 %1。</td>
</tr>
<tr>
<td>192 0x00C0</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>193 0x00C1</td>
<td>%1 不是正确的 Win32 应用程式。</td>
</tr>
<tr>
<td>194 0x00C2</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>195 0x00C3</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>196 0x00C4</td>
<td>作业系统无法执行 这个应用程式。</td>
</tr>
<tr>
<td>197 0x00C5</td>
<td>作业系统目前无法执行 这个应用程式。</td>
</tr>
<tr>
<td>198 0x00C6</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>199 0x00C7</td>
<td>作业系统无法执行 这个应用程式。</td>
</tr>
<tr>
<td>200 0x00C8</td>
<td>程式码的区段不可以大於或等於 64KB。</td>
</tr>
<tr>
<td>201 0x00C9</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>202 0x00CA</td>
<td>作业系统无法执行 %1。</td>
</tr>
<tr>
<td>203 0x00CB</td>
<td>系统找不到输入的环境选项。</td>
</tr>
<tr>
<td>205 0x00CD</td>
<td>在指令子目录下，没有任何行程有信号副处理程式。</td>
</tr>
<tr>
<td>206 0x00CE</td>
<td>档案名称或副档名太长。</td>
</tr>
<tr>
<td>207 0x00CF</td>
<td>ring 2 堆衬洏峇丑C</td>
</tr>
<tr>
<td>208 0x00D0</td>
<td>输入的通用档名字元 * 或 ? 不正确， 或指定太多的通用档名字元。</td>
</tr>
<tr>
<td>209 0x00D1</td>
<td>所传送的信号不正确。</td>
</tr>
<tr>
<td>210 0x00D2</td>
<td>无法设定信号处理程式。</td>
</tr>
<tr>
<td>212 0x00D4</td>
<td>区段被锁定，而且无法重新配置。</td>
</tr>
<tr>
<td>214 0x00D6</td>
<td>附加到此程式或动态连结模组的动态连结模组太多。</td>
</tr>
<tr>
<td>215 0x00D7</td>
<td>Can’t nest calls to LoadModule.</td>
</tr>
<tr>
<td>230 0x00E6</td>
<td>The pipe state is inv</td>
</tr>
<tr>
<td>231 0x00E7</td>
<td>所有的 pipe instances 都在忙碌中。</td>
</tr>
<tr>
<td>232 0x00E8</td>
<td>The pipe is being closed.</td>
</tr>
<tr>
<td>233 0x00E9</td>
<td>No process is on the other end of the pipe.</td>
</tr>
<tr>
<td>234 0x00EA</td>
<td>有更多可用的资料。</td>
</tr>
<tr>
<td>240 0x00F0</td>
<td>作业阶段被取消。</td>
</tr>
<tr>
<td>254 0x00FE</td>
<td>指定的延伸属性名称无效。</td>
</tr>
<tr>
<td>255 0x00FF</td>
<td>延伸的属性不一致。</td>
</tr>
<tr>
<td>259 0x0103</td>
<td>没有可用的资料。</td>
</tr>
<tr>
<td>266 0x010A</td>
<td>无法使用 Copy API。</td>
</tr>
<tr>
<td>267 0x010B</td>
<td>目录名称错?***。</td>
</tr>
<tr>
<td>275 0x0113</td>
<td>延伸属性不适用於缓冲区。</td>
</tr>
<tr>
<td>276 0x0114</td>
<td>在外挂的档案系统上的延伸属性档案已经毁损。</td>
</tr>
<tr>
<td>277 0x0115</td>
<td>延伸属性表格档满。</td>
</tr>
<tr>
<td>278 0x0116</td>
<td>指定的延伸属性代码无效。</td>
</tr>
<tr>
<td>282 0x011A</td>
<td>外挂的这个档案系统不支援延伸属性。</td>
</tr>
<tr>
<td>288 0x0120</td>
<td>意图释放不属於叫用者的 mutex。</td>
</tr>
<tr>
<td>298 0x012A</td>
<td>semaphore 传送次数过多。</td>
</tr>
<tr>
<td>299 0x012B</td>
<td>只完成 Read/WriteProcessMemory 的部份要求。</td>
</tr>
<tr>
<td>317 0x013D</td>
<td>系统找不到位於讯息档 %2 中编号为 0x%1 的讯息。</td>
</tr>
<tr>
<td>487 0x01E7</td>
<td>尝试存取无效的位址。</td>
</tr>
<tr>
<td>534 0x0216</td>
<td>运算结果超过 32 位元。</td>
</tr>
<tr>
<td>535 0x0217</td>
<td>通道的另一端有一个行程在接送资料。</td>
</tr>
<tr>
<td>536 0x0218</td>
<td>等候行程来开启通道的另一端。</td>
</tr>
<tr>
<td>994 0x03E2</td>
<td>存取延伸的属性被拒。</td>
</tr>
<tr>
<td>995 0x03E3</td>
<td>由於执行绪结束或应用程式要求，而异常终止 I/O 作业。</td>
</tr>
<tr>
<td>996 0x03E4</td>
<td>重读?I/O 事件不是设定成通知状态。</td>
</tr>
<tr>
<td>997 0x03E5</td>
<td>正在处理重读?I/O 作业。</td>
</tr>
<tr>
<td>998 0x03E6</td>
<td>对记忆体位置的无效存取。</td>
</tr>
<tr>
<td>999 0x03E7</td>
<td>执行 inpage 作业发生错?***。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>蓝屏</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（一）—— 基本原型</title>
    <url>/2019/01/21/build-blockchain-in-java-base-prototype/</url>
    <content><![CDATA[<p><img src="/images/Blockchain-Technology-is-Changing-the-World-As-We-Know-It.webp"></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>区块链技术是一项比人工智能更具革命性的技术，人工智能只是提高了人类的生产力，而区块链则将改变人类社会的生产关系，它将会颠覆我们人类社会现有的协作方式。了解和掌握区块链相关知识和技术，是我们每位开发人员必须要去做的事情，这样我们才能把握住这波时代趋势的红利。<br>本文将基于Java语言构建简化版的blockchain，来实现数字货币。</p>
<span id="more"></span>

<h2 id="创建区块"><a href="#创建区块" class="headerlink" title="创建区块"></a>创建区块</h2><p>区块链是由包含交易信息的区块从后向前有序链接起来的数据结构。区块被从后向前有序地链接在这个链条里，每个区块都指向前一个区块。以比特币为例，每个区块主要包含如下信息字段：</p>
<ul>
<li>区块大小：用字节表示的区块数据大小</li>
<li>区块头：组成区块头的几个字段 <ul>
<li>区块头hash值</li>
<li>父区块头hash值</li>
<li>时间戳：区块产生的近似时间</li>
<li>Merkle根：该区块中交易的merkle树根的哈希值</li>
<li>难度目标：该区块工作量证明算法的难度目标</li>
<li>Nonce：用于工作量证明算法的计数器</li>
</ul>
</li>
<li>交易计数器：交易的数量</li>
<li>交易：记录在区块里的交易信息</li>
</ul>
<p>详见：《精通比特币》（第二版）第9章——区块链</p>
<p>在这里，我们主要是为了实现最简单的区块链结构，仅仅包含以下几个信息字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(String hash, String previousHash, String data, <span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="区块Hash值计算"><a href="#区块Hash值计算" class="headerlink" title="区块Hash值计算"></a>区块Hash值计算</h3><p>加密Hash值，一个通过SHA256算法对区块头进行二次哈希计算而得到的数字指纹。Hash值用于确保blockchain的安全。Hash计算是计算敏感的操作，即使在高性能电脑也需要花费一段时间来完成计算(这也就是为什么人们购买高性能GPU进行比特币挖矿的原因)。blockchain架构设计有意使Hash计算变得困难，这样做是为了加大新增一个block的难度，进而防止block在增加后被随意修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">        Block block = <span class="keyword">new</span> Block(<span class="string">&quot;&quot;</span>, previousHash, data.getBytes(),     Instant.now().getEpochSecond());</span><br><span class="line">        block.setHash();</span><br><span class="line">        <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算区块Hash</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getPrevBlockHash())) &#123;</span><br><span class="line">        prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] headers = ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getTimeStamp()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setHash(DigestUtils.sha256Hex(headers));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h2><p>区块链本质上是一种有序、反向链接链表的数据结构。这意味着，block按照插入的顺序存放，同时每个block都保存指向上一个block的链接。这种结构保证可以快速获取最新插入的block同时获取它的hash值。这种结构保证可以快速获取最新插入的block同时（高效地）获取它的hash值。</p>
<h3 id="区块链数据结构"><a href="#区块链数据结构" class="headerlink" title="区块链数据结构"></a>区块链数据结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Block&gt; blockList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blockchain</span><span class="params">(List&lt;Block&gt; blockList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockList = blockList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="添加区块"><a href="#添加区块" class="headerlink" title="添加区块"></a>添加区块</h3><p>新增一个添加区块链的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">   Block previousBlock = blockList.get(blockList.size() - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(previousBlock.getHash(), data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block 区块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.blockList.add(block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h3><p>在添加区块之前，区块链必须有个创世区块，在Block中新增创世区块方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Block.newBlock(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Genesis Block&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建区块链-1"><a href="#创建区块链-1" class="headerlink" title="创建区块链"></a>创建区块链</h3><p>再在Blockchain中新增创建区块链的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Block&gt; blocks = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    blocks.add(Block.newGenesisBlock());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(blocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line">        blockchain.addBlock(<span class="string">&quot;Send 1 BTC to Ivan&quot;</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">&quot;Send 2 more BTC to Ivan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Prev. hash: &quot;</span> + block.getPreviousHash());</span><br><span class="line">            System.out.println(<span class="string">&quot;Data: &quot;</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">&quot;Hash: &quot;</span> + block.getHash());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出如下信息：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Prev. hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: 4492cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line"></span><br><span class="line">Prev. hash: 4492cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line"></span><br><span class="line">Prev. hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: 42f78d6a86f88aa9b5b10e468494dfd1b3f558a9fb74a01eb348c2cbfc5d000a</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们构建了一个非常简单的区块链原型：它只是一个块的数组，每个块都与前一个块有连接。 实际的区块链要复杂得多。</p>
<ul>
<li>缺少交易信息：我们的区块链还没有任何交易信息。</li>
<li>缺少工作量证明：我们的生产区块非常简单快捷，实际的区块链中，生产一个区块需要进行大量的计算。</li>
<li>缺少共识机制：区块链是一个非单一决策者的分布式数据库。 因此，一个新的区块必须得到网络的其他参与者的确认和批</li>
</ul>
<p>在以后的文章中，我们将介绍这些功能。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype">https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook">《精通比特币（第二版）》</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（三）—— 持久化 &amp; 命令行</title>
    <url>/2019/01/23/build-blockchain-in-java-data-persistence/</url>
    <content><![CDATA[<p><img src="/images/Millerblockchainadj-3200x2400.webp"></p>
<blockquote>
<p>文章的主要思想和内容均来自：<a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上一篇 文章我们实现了区块链的工作量证明机制（Pow），尽可能地实现了挖矿。但是距离真正的区块链应用还有很多重要的特性没有实现。今天我们来实现区块链数据的存储机制，将每次生成的区块链数据保存下来。有一点需要注意，区块链本质上是一款分布式的数据库，我们这里不实现”分布式”，只聚焦于数据存储部分。</p>
<span id="more"></span>

<h2 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h2><p>到目前为止，我们的实现机制中还没有区块存储这一环节，导致我们的区块每次生成之后都保存在了内存中。这样不便于我们重新使用区块链，每次都要从头开始生成区块，也不能够跟他人共享我们的区块链，因此，我们需要将其存储在磁盘上。</p>
<p>我们该选择哪一款数据库呢？事实上，在<a href="https://github.com/wangweiX/blockchain-explore/tree/master/white-paper/0000-bitcoin">《比特币白皮书》</a>中并没有明确指定使用哪一种的数据库，因此这个由开发人员自己决定。中本聪 开发的 <a href="https://github.com/bitcoin/bitcoin">Bitcoin Core</a> 中使用的是<a href="https://github.com/google/leveldb">LevelDB</a>。原文 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/">Building Blockchain in Go. Part 3: Persistence and CLI</a> 中使用的是 BoltDB ，对Go语言支持比较好。</p>
<p>但是我们这里使用的是Java来实现，BoltDB不支持Java，这里我们选用 <a href="https://github.com/facebook/rocksdb">Rocksdb</a> 。</p>
<blockquote>
<p>当然也可以选择 LevelDB，非常不错的LevelDB介绍文章：<a href="https://mp.weixin.qq.com/s/rN6HX2VzsRi3_EKXYKuJAA">https://mp.weixin.qq.com/s/rN6HX2VzsRi3_EKXYKuJAA</a><br>RocksDB是由Facebook数据库工程团队开发和维护的一款key-value存储引擎，比LevelDB性能更加强大，有关Rocksdb的详细介绍，请移步至官方文档：<a href="https://github.com/facebook/rocksdb">https://github.com/facebook/rocksdb</a> ，这里不多做介绍。</p>
</blockquote>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在我们开始实现数据持久化之前，我们先要确定我们该如何去存储我们的数据。为此，我们先来看看比特币是怎么做的。</p>
<p>简单来讲，比特币使用了两个”buckets(桶)”来存储数据：</p>
<ul>
<li>blocks. 描述链上所有区块的元数据.</li>
<li>chainstate. 存储区块链的状态，指的是当前所有的UTXO（未花费交易输出）以及一些元数据.</li>
</ul>
<blockquote>
<p>“在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO。”<br>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transaction-outputs-and-inputs">《精通比特币》第二版 第06章节 —— 交易的输入与输出</a></p>
</blockquote>
<p>此外，每个区块数据都是以单独的文件形式存储在磁盘上。这样做是出于性能的考虑：当读取某一个单独的区块数据时，不需要加载所有的区块数据到内存中来。</p>
<p>在 blocks 这个桶中，存储的键值对：</p>
<ul>
<li>‘b’ + 32-byte block hash -&gt; block index record<blockquote>
<p>区块的索引记录</p>
</blockquote>
</li>
<li>‘f’ + 4-byte file number -&gt; file information record<blockquote>
<p>文件信息记录</p>
</blockquote>
</li>
<li>‘l’ -&gt; 4-byte file number: the last block file number used<blockquote>
<p>最新的一个区块所使用的文件编码</p>
</blockquote>
</li>
<li>‘R’ -&gt; 1-byte boolean: whether we’re in the process of reindexing<blockquote>
<p>是否处于重建索引的进程当中</p>
</blockquote>
</li>
<li>‘F’ + 1-byte flag name length + flag name string -&gt; 1 byte boolean: various flags that can be on or off<blockquote>
<p>各种可以打开或关闭的flag标志</p>
</blockquote>
</li>
<li>‘t’ + 32-byte transaction hash -&gt; transaction index record<blockquote>
<p>交易索引记录<br>在 chainstate 这个桶中，存储的键值对：</p>
</blockquote>
</li>
<li>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction<blockquote>
<p>某笔交易的UTXO记录</p>
</blockquote>
</li>
<li>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs<blockquote>
<p>数据库所表示的UTXO的区块Hash（抱歉，这一点我还没弄明白……）</p>
</blockquote>
</li>
</ul>
<p>由于我们还没有实现交易相关的特性，因此，我们这里只使用 block 桶。另外，前面提到过的，这里我们不会实现各个区块数据各自存储在独立的文件上，而是统一存放在一个文件里面。因此，我们不要存储和文件编码相关的数据，这样一来，我们所用到的键值对就简化为：</p>
<ul>
<li>32-byte block-hash -&gt; Block structure (serialized)<blockquote>
<p>区块数据与区块hash的键值对</p>
</blockquote>
</li>
<li>‘l’ -&gt; the hash of the last block in a chain<blockquote>
<p>最新一个区块hash的键值对<br>(<a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2):_Data_Storage">查看更加详细的解释</a>)</p>
</blockquote>
</li>
</ul>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>RocksDB的Key与Value只能以byte[]的形式进行存储，这里我们需要用到序列化与反序列化库 <a href="https://github.com/EsotericSoftware/kryo">Kryo</a>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 对象对应的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        Input input = <span class="keyword">new</span> Input(bytes);</span><br><span class="line">        Object obj = <span class="keyword">new</span> Kryo().readClassAndObject(input);</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 需要序列化的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        Output output = <span class="keyword">new</span> Output(<span class="number">4096</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Kryo().writeClassAndObject(output, object);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = output.toBytes();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>上面已经说过，我们这里使用RocksDB，我们先写一个相关的工具类RocksDBUtils，主要的功能如下：</p>
<ul>
<li>putLastBlockHash：保存最新一个区块的Hash值</li>
<li>getLastBlockHash：查询最新一个区块的Hash值</li>
<li>putBlock：保存区块</li>
<li>getBlock：查询区块<blockquote>
<p>注意：BoltDB 支持 Bucket 的特性，而RocksDB 不支持，所以需要我们自己使用Map来做一个映射。</p>
</blockquote>
<h3 id="RocksDBUtils"><a href="#RocksDBUtils" class="headerlink" title="RocksDBUtils"></a>RocksDBUtils</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.block.Block;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.SerializeUtils;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDB;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocksDBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链数据文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_FILE = <span class="string">&quot;blockchain.db&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块桶前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLOCKS_BUCKET_KEY = <span class="string">&quot;blocks&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新一个区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_BLOCK_KEY = <span class="string">&quot;l&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> RocksDBUtils instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RocksDBUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RocksDBUtils.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> RocksDBUtils();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RocksDB db;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * block buckets</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; blocksBucket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RocksDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        openDB();</span><br><span class="line">        initBlockBucket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db = RocksDB.open(DB_FILE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to open db ! &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 blocks 数据桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBlockBucket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY);</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketBytes = db.get(blockBucketKey);</span><br><span class="line">            <span class="keyword">if</span> (blockBucketBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                blocksBucket = Maps.newHashMap();</span><br><span class="line">                db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to init block bucket ! &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlockHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putLastBlockHash</span><span class="params">(String tipBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to put last block hash ! &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastBlockHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY);</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHashBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) SerializeUtils.deserialize(lastBlockHashBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(block.getHash(), SerializeUtils.serialize(block));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to put block ! &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getBlock</span><span class="params">(String blockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Block) SerializeUtils.deserialize(blocksBucket.get(blockHash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to close db ! &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h2>现在我们来优化 Blockchain.newBlockchain 接口的代码逻辑，改为如下逻辑：<br><img src="https://img.i7years.com/blog/blockchain_flow.jpg" alt="blockchain_flow"></li>
</ul>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock();</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 Blockchain 的数据结构，只记录最新一个区块链的Hash值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String lastBlockHash;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Blockchain</span><span class="params">(String lastBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastBlockHash = lastBlockHash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次挖矿完成后，我们也需要将最新的区块信息保存下来，并且更新最新区块链Hash值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Fail to add block into blockchain ! &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(lastBlockHash, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RocksDBUtils.getInstance().putLastBlockHash(block.getHash());</span><br><span class="line">    RocksDBUtils.getInstance().putBlock(block);</span><br><span class="line">    <span class="keyword">this</span>.lastBlockHash = block.getHash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此，存储部分的功能就实现完毕，我们还缺少一个功能：</p>
<h2 id="检索区块链"><a href="#检索区块链" class="headerlink" title="检索区块链"></a>检索区块链</h2><p>现在，我们所有的区块都保存到了数据库，因此，我们能够重新打开已有的区块链并且向其添加新的区块。但这也导致我们再也无法打印出区块链中所有区块的信息，因为，我们没有将区块存储在数组当中。让我们来修复这个瑕疵！</p>
<p>我们在Blockchain中创建一个内部类 BlockchainIterator ，作为区块链的迭代器，通过区块之前的hash连接来依次迭代输出区块信息，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String currentBlockHash;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BlockchainIterator</span><span class="params">(String currentBlockHash)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currentBlockHash = currentBlockHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有下一个区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hashNext</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(currentBlockHash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (lastBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创世区块直接放行</span></span><br><span class="line">            <span class="keyword">if</span> (lastBlock.getPrevBlockHash().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Block <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (currentBlock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.currentBlockHash = currentBlock.getPrevBlockHash();</span><br><span class="line">                <span class="keyword">return</span> currentBlock;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    ....    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">            blockchain.addBlock(<span class="string">&quot;Send 1.0 BTC to wangwei&quot;</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">&quot;Send 2.5 more BTC to wangwei&quot;</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">&quot;Send 3.5 more BTC to wangwei&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">                Block block = iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (block != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> validate = ProofOfWork.newProofOfWork(block).validate();</span><br><span class="line">                    System.out.println(block.toString() + <span class="string">&quot;, validate = &quot;</span> + validate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出*/</span></span><br><span class="line"></span><br><span class="line">Block&#123;hash=<span class="string">&#x27;0000012f87a0510dd0ee7048a6bd52db3002bae7d661126dc28287bd6c23189a&#x27;</span>, prevBlockHash=<span class="string">&#x27;0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf&#x27;</span>, data=<span class="string">&#x27;Send 3.5 more BTC to wangwei&#x27;</span>, timeStamp=<span class="number">1519724875</span>, nonce=<span class="number">369110</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">&#x27;0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf&#x27;</span>, prevBlockHash=<span class="string">&#x27;00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79&#x27;</span>, data=<span class="string">&#x27;Send 2.5 more BTC to wangwei&#x27;</span>, timeStamp=<span class="number">1519724872</span>, nonce=<span class="number">896348</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">&#x27;00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79&#x27;</span>, prevBlockHash=<span class="string">&#x27;0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703&#x27;</span>, data=<span class="string">&#x27;Send 1.0 BTC to wangwei&#x27;</span>, timeStamp=<span class="number">1519724869</span>, nonce=<span class="number">673955</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">&#x27;0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703&#x27;</span>, prevBlockHash=<span class="string">&#x27;&#x27;</span>, data=<span class="string">&#x27;Genesis Block&#x27;</span>, timeStamp=<span class="number">1519724866</span>, nonce=<span class="number">840247</span>&#125;, validate = <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><p>CLI 部分的内容，这里不做详细介绍，具体可以去查看文末的Github源码链接。大致步骤如下：</p>
<p>添加pom.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>one.wangwei.blockchain.cli.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- this is used for inheritance merges --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 指定在打包节点执行jar包合并操作 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加shell脚本 blockchain.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if the jar has been built.</span></span><br><span class="line"><span class="keyword">if</span> [ ! -e target/blockchain-java-jar-with-dependencies.jar ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Compiling blockchain project to a JAR&quot;</span></span><br><span class="line">  mvn package -DskipTests</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">java -jar target/blockchain-java-jar-with-dependencies.jar <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入工程根路劲</span></span><br><span class="line">$ <span class="built_in">cd</span> blockchain-java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印帮助信息</span></span><br><span class="line">$ ./blockchain.sh -h </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加区块</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">&quot;Send 1.5 BTC to wangwei&quot;</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">&quot;Send 2.5 BTC to wangwei&quot;</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">&quot;Send 3.5 BTC to wangwei&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印区块链</span></span><br><span class="line">$ ./blockchain.sh -<span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇我们实现了区块链的存储功能，接下来我们将实现地址、交易、钱包这一些列的功能。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part3-persistence">https://github.com/wangweiX/blockchain-java/tree/part3-persistence</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook">《精通比特币》第二版</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（二）—— 工作量证明</title>
    <url>/2019/01/21/build-blockchain-in-java-proof-of-work/</url>
    <content><![CDATA[<p><img src="/images/bitcoin-miner.webp"></p>
<blockquote>
<p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在上一篇文章中，我们实现了区块链最基本的数据结构模型，添加区块以及和前一个区块连接在一起。但是，我们的实现方式非常简单，而真实的比特币区块链中，每一个区块的添加都是需要经过大量的计算才可以完成，这个过程就是我们熟知的挖矿。</p>
<span id="more"></span>

<h2 id="工作量证明机制"><a href="#工作量证明机制" class="headerlink" title="工作量证明机制"></a>工作量证明机制</h2><p>区块链最关键的一个思想就是，必须进行大量且困难的计算工作才能将交易数据存放到区块链上。这种工作机制才能保证整个区块链数据的安全性和一致性。同时，完成这个计算工作的矿工会得到相应的Token奖励。</p>
<p>这套机制和我们的现实生活非常相似：我们必须努力工作来赚取报酬用以维持我们的生活。在区块链中，网络中的矿工们努力工作来维持区块链网络，为其添加区块，并且获得一定的Token奖励。作为他们工作的成果，一个区块以安全的方式被组合进了区块链中，这样就保证了整个区块链数据库的稳定性。还有一个必须要注意的是，某个矿工完成了计算工作的结果，还必须得到其他所有矿工的认同（证明是正确的），这样才算完成。</p>
<p>这一整套的计算和证明机制，就称为Proof-of-Work（工作量证明）。计算工作是非常非常困难的，因为它需要消耗大量的计算机算力资源，即使是性能非常高的计算机都不能非常快地计算出正确的结果。此外，随着时间的推移，这项计算工作的难度也会随之增加，目的是为了保证每小时6个新区块的出块率。在比特币中，这种工作的目标是找到满足某个特定要求的区块Hash（哈希值）。这个区块哈希值就是工作结果的一个证明。因此，计算工作的目的就是为了寻找到这个证明值。</p>
<p>最后要注意的是，计算出这个特定的Hash（哈希值）是非常困难的，但是别人来验证这个Hash值是否正确的时候，是非常简单的，一下子就能完成。</p>
<h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><blockquote>
<p>Hash：哈希 | 散列</p>
</blockquote>
<p>我们来讨论一下Hashing（哈希），对这一块非常熟悉的朋友可以直接跳过这一段内容。</p>
<p>哈希是一种计算机算法，该算法能够计算出任意大小数据的哈希值，并且这个哈希值的长度是固定的，256bit。这个被计算出来的哈希值能够作为这个数据的唯一代表。哈希算法有几个关键的特性：</p>
<ul>
<li>不可逆性。不能根据一个哈希值推导出原始数据。所以，哈希不是加密。</li>
<li>唯一性。每个数据有且仅有一个唯一的哈希值。</li>
<li>迥异性。原始数据一丁点的变化都将得到完全不一样的哈希值。<br>例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHA256(&quot;wangwei1&quot;) ——&gt; 1e898b7c9adaad86c20139a302ccd5277f81040cab68dc2aecfc684773532652</span><br><span class="line">SHA256(&quot;wangwei2&quot;) ——&gt; c9cc7417c17318c8aab448cc8ace24c53b6dcf350f5c5fd8e91cbc3b011a179d</span><br></pre></td></tr></table></figure>
哈希算法被广泛用于验证文件的一致性上。比如软件提供商通常会在安装包上附加一个检验码（checksums），当我们下载完一个软件安装包后，可以用哈希函数计算一下这个软件安装包的哈希值，然后再和软件安装包的检验码做个对比，就可以知道下载的安装包是否完整、是否有数据丢失。</li>
</ul>
<p>在区块链中，哈希值用于保证区块的一致性。每一个区块被用于进行哈希计算的数据，都包含前一个区块链的哈希值，因此任何人想要修改区块的数据几乎是不可能的，他必须要把整个区块链中从创世区块到最新的区块的所有哈希值全部重新计算一遍。</p>
<blockquote>
<p>你可以脑补一下这个工作量有多大，按照目前计算机的算力来看，几乎不可能</p>
</blockquote>
<h3 id="Hashcash"><a href="#Hashcash" class="headerlink" title="Hashcash"></a>Hashcash</h3><p>比特币的工作量证明是使用的是Hashcash算法，一种最初被用于反垃圾邮件的算法，它可以被拆解为以下几步：</p>
<ol>
<li>获取某种公开可知的数据data（在邮件案例中，指的是收件人邮件地址；比特币案例中，指的是区块头）</li>
<li>添加一个计数器counter，初始值设置为0；</li>
<li>计算 data 与 counter拼接字符串的哈希值；</li>
<li>检查上一步的哈希值是否满足某个条件，满足则停止计算，不满足则 counter 加1，然后重复第3步和第4步，直到满足这个特定的条件为止。</li>
</ol>
<p>这是一种粗暴的算法：你改变计数器，计算一个新的哈希值，检查它，增加计数器，计算一个新的哈希值，循环往复，这就是为什么它需要花费大量计算机算力资源的原因所在。</p>
<p>让我们来近距离看一下这个特定的条件指的是什么。在原始的Hashcash算法中，这个特殊的要求指的是计算出来的哈希值的前20bit必须全是零，</p>
<p>在比特币种，这种要求哈希值前面有多少个零打头的要求是随着时间的推移而不断调整的，这是出于设计的目的，尽管在计算机的算力会不断的提升和越来越多的矿工加入这个网络中的情况下，都要保证每10min生产一个区块。</p>
<p>我们演示一下这个算法，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 计算字符串&#x27;I like donuts&#x27;的哈希值</span><br><span class="line">SHA256(&quot;I like donuts&quot;) </span><br><span class="line">——&gt; f80867f6efd4484c23b0e7184e53fe4af6ab49b97f5293fcd50d5b2bfa73a4d0</span><br><span class="line"></span><br><span class="line"># 拼接一个计数器值(ca07ca)，再次进行Hash计算</span><br><span class="line">SHA256(&quot;I like donutsca07ca&quot;) </span><br><span class="line">——&gt; 0000002f7c1fe31cb82acdc082cfec47620b7e4ab94f2bf9e096c436fc8cee06</span><br></pre></td></tr></table></figure>
<p>这里的ca07ca是计数器值的十六进制，他表示的十进制值为13240266</p>
<blockquote>
<p>即，从0开始，总共计算了13240266次，才计算出I like donuts这个数据的Hash值，满足前6位(3字节)全是零。</p>
</blockquote>
<p>代码实现</p>
<blockquote>
<p>思路：</p>
<p>1）每次区块被添加到区块链之前，先要进行挖矿（Pow）</p>
<p>2）挖矿过程中，产生的 Hash 值，如果小于难度目标值则添加进区块，否则继续挖矿，直到找到正确的Hash为止</p>
<p>3）最后，验证区块Hash是否有效</p>
</blockquote>
<h3 id="定义Pow类"><a href="#定义Pow类" class="headerlink" title="定义Pow类"></a>定义Pow类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作量证明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProofOfWork</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TARGET_BITS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Block block;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigInteger target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProofOfWork</span><span class="params">(Block block, BigInteger target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.block = block;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的工作量证明，设定难度目标值</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 对1进行移位运算，将1向左移动 (256 - TARGET_BITS) 位，得到我们的难度目标值</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProofOfWork <span class="title">newProofOfWork</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        BigInteger targetValue = BigInteger.valueOf(<span class="number">1</span>).shiftLeft((<span class="number">256</span> - TARGET_BITS));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProofOfWork(block, targetValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设定一个难度目标位TARGET_BITS，表示最终挖矿挖出来Hash值，转化为二进制后，与256相比，长度少了多少bit，也即二进制前面有多少bit是零.<blockquote>
<ul>
<li>TARGET_BITS 越大，最终targetValue就越小，要求计算出来的Hash越来越小，也就是挖矿的难度越来越大。</li>
<li>我们这里的TARGET_BITS是固定的，但是在真实的比特币中，难度目标是随着时间的推推，会动态调整的。详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch10.asciidoc#target-representation">《精通比特币 （第二版）》第10章</a></li>
</ul>
</blockquote>
</li>
<li>由于数值比较大，这里要使用BitInteger类型。</li>
</ul>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参与Hash运算的如下几个信息：<ul>
<li>前一个区块（父区块）的Hash值；</li>
<li>区块中的交易数据；</li>
<li>区块生成的时间；</li>
<li>难度目标；</li>
<li>用于工作量证明算法的计数器<blockquote>
<p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#block-header">《精通比特币 （第二版）》第09章</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Pow算法"><a href="#Pow算法" class="headerlink" title="Pow算法"></a>Pow算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行工作量证明，开始挖矿，找到小于难度目标值的Hash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PowResult <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> nonce = <span class="number">0</span>;</span><br><span class="line">    String shaHex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    System.out.printf(<span class="string">&quot;Mining the block containing：%s \n&quot;</span>, <span class="keyword">this</span>.getBlock().getData());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">while</span> (nonce &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">        String data = <span class="keyword">this</span>.prepareData(nonce);</span><br><span class="line">        shaHex = DigestUtils.sha256Hex(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> BigInteger(shaHex, <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Elapsed Time: %s seconds \n&quot;</span>, (<span class="keyword">float</span>) (System.currentTimeMillis() - startTime) / <span class="number">1000</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;correct hash Hex: %s \n\n&quot;</span>, shaHex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonce++;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> PowResult(nonce, shaHex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环体里面主要以下四步：<ul>
<li>准备数据</li>
<li>进行sha256运算</li>
<li>转化为BigInter类型</li>
<li>与target进行比较</li>
</ul>
</li>
<li>最后，返回正确的Hash值以及运算计数器nonce</li>
</ul>
<h3 id="验证区块Hash有效性"><a href="#验证区块Hash有效性" class="headerlink" title="验证区块Hash有效性"></a>验证区块Hash有效性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证区块是否有效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = <span class="keyword">this</span>.prepareData(<span class="keyword">this</span>.getBlock().getNonce());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(DigestUtils.sha256Hex(data), <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改区块添加逻辑"><a href="#修改区块添加逻辑" class="headerlink" title="修改区块添加逻辑"></a>修改区块添加逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">    Block block = <span class="keyword">new</span> Block(<span class="string">&quot;&quot;</span>, previousHash, data, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">    ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">    PowResult powResult = pow.run();</span><br><span class="line">    block.setHash(powResult.getHash());</span><br><span class="line">    block.setNonce(powResult.getNonce());</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建区块</li>
<li>创建Pow算法对象</li>
<li>执行Pow算法</li>
<li>保存返回的Hash以及运算计数器</li>
</ul>
<h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">        blockchain.addBlock(<span class="string">&quot;Send 1 BTC to Ivan&quot;</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">&quot;Send 2 more BTC to Ivan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Prev.hash: &quot;</span> + block.getPrevBlockHash());</span><br><span class="line">            System.out.println(<span class="string">&quot;Data: &quot;</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">&quot;Hash: &quot;</span> + block.getHash());</span><br><span class="line">            System.out.println(<span class="string">&quot;Nonce: &quot;</span> + block.getNonce());</span><br><span class="line"></span><br><span class="line">            ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">            System.out.println(<span class="string">&quot;Pow valid: &quot;</span> +  pow.validate() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定TARGET_BITS = 20，得到如下结果：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Mining the block containing：Genesis Block </span><br><span class="line">Elapsed Time: <span class="number">2.118</span> seconds </span><br><span class="line">correct hash Hex: 00000828ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">1</span> BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">1.069</span> seconds </span><br><span class="line">correct hash Hex: 00000a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">2</span> more BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">4.258</span> seconds </span><br><span class="line">correct hash Hex: 00000777f93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f </span><br><span class="line"></span><br><span class="line">Prev.hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: 00000828ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Nonce: <span class="number">522163</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: 00000828ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: 00000a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Nonce: <span class="number">474758</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: 00000a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: 00000777f93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f</span><br><span class="line">Nonce: <span class="number">1853839</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们正在一步一步接近真实的区块链架构，本篇我们实现了挖矿机制，但是我们还有很多关键性的功能没有实现：区块链数据库的持久性、钱包、地址、交易、共识机制，这些我们后面一步一步来实现</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part2-pow">https://github.com/wangweiX/blockchain-java/tree/part2-pow</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook">《精通比特币（第二版）》</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（六）—— 交易（Merkle Tree）</title>
    <url>/2019/01/23/build-blockchain-in-java-transaction-merkle-tree/</url>
    <content><![CDATA[<p><img src="/images/pexels-photo-38136.webp"></p>
<blockquote>
<p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6/">https://jeiwan.cc/posts/building-blockchain-in-go-part-6/</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在这一系列文章的最开始部分，我们提到过区块链是一个分布式的数据库。那时候，我们决定跳过”分布式”这一环节，并且聚焦于”数据存储”这一环节。到目前为止，我们几乎实现了区块链的所有组成部分。在本篇文章中，我们将会涉及一些在前面的文章中所忽略的一些机制，并且在下一篇文章中我们将开始研究区块链的分布式特性。</p>
<span id="more"></span>

<p>前面各个部分内容：</p>
<ol>
<li>基本原型</li>
<li>工作量证明</li>
<li>持久化 &amp; 命令行</li>
<li>交易（UTXO）</li>
<li>地址（钱包）</li>
</ol>
<h2 id="UTXO池"><a href="#UTXO池" class="headerlink" title="UTXO池"></a>UTXO池</h2><p>在 持久化 &amp; 命令行 这篇文章中，我们研究了比特币核心存储区块的方式。当中我们提到过与区块相关的数据存储在 blocks 这个数据桶中，而交易数据则存储在 chainstate 这个数据桶中，让我们来回忆一下，chainstate 数据桶的数据结构：</p>
<ul>
<li>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction<blockquote>
<p>某笔交易的UTXO记录</p>
</blockquote>
</li>
<li>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs<blockquote>
<p>数据库所表示的UTXO的区块Hash</p>
</blockquote>
</li>
</ul>
<p>从那篇文章开始，我们已经实现了比特币的交易机制，但是我们还没有用到 chainstate 数据桶去存储我们的交易输出。所以，这将是我们现在要去做的事情。</p>
<p>chainstate 不会去存储交易数据。相反，它存储的是 UTXO 集，也就是未被花费的交易输出集合。除此之外，它还存储了”数据库所表示的UTXO的区块Hash”，我们这里先暂且忽略这一点，因为我们还没有用到区块高度（这一点我们会在后面的文章进行实现）。</p>
<p>那么，我们为什么需要 UTXO 池呢？</p>
<p>一起来看一下我们前面实现的 findUnspentTransactions 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Transaction[] findUnspentTransactions(<span class="keyword">byte</span>[] pubKeyHash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(pubKeyHash);</span><br><span class="line">     Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">     <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">         Block block = blockchainIterator.next();</span><br><span class="line">         <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">             String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">             <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                 <span class="keyword">if</span> (transaction.getOutputs()[outIndex].isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                     unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> unspentTxs;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>该方法是用来查找钱包地址对应的包含未花费交易输出的交易信息。由于交易信息是存储在区块当中，所以我们现有的做法是遍历区块链中的每个区块，然后遍历每个区块中的交易信息，再然后遍历每个交易中的交易输出，并检查交易输出是否被相应的钱包地址所锁定，效率非常低下。截止2018年3月29号，比特币中有 515698 个区块，并且这些数据占据了140+Gb 的磁盘空间。这也就意味着一个人必须运行全节点（下载所有的区块数据）才能验证交易信息。此外，验证交易信息需要遍历所有的区块。</p>
<p>针对这个问题的解决办法是需要有一个存储了所有UTXOs（未花费交易输出）的索引，这就是 UTXOs 池所要做的事情：UTXOs池其实是一个缓存空间，它所缓存的数据需要从构建区块链中所有的交易数据中获得（通过遍历所有的区块链，不过这个构建操作只需要执行一次即可），并且它后续还会用于钱包余额的计算以及新的交易数据的验证。截止到2017年9月，UTXOs池大约为 2.7Gb。</p>
<p>好了，让我们来想一下，为了实现 UTXOs 池我们需要做哪些事情。当前，有下列方法被用于查找交易信息：</p>
<ol>
<li>Blockchain.getAllSpentTXOs —— 查询所有已被花费的交易输出。它需要遍历区块链中所有区块中交易信息。</li>
<li>Blockchain.findUnspentTransactions —— 查询包含未被花费的交易输出的交易信息。它也需要遍历区块链中所有区块中交易信息。</li>
<li>Blockchain.findSpendableOutputs —— 该方法用于新的交易创建之时。它需要找到足够多的交易输出，以满足所需支付的金额。需要调用 Blockchain.findUnspentTransactions 方法。</li>
<li>Blockchain.findUTXO —— 查询钱包地址所对应的所有未花费交易输出，然后用于计算钱包余额。需要调用Blockchain.findUnspentTransactions 方法。</li>
<li>Blockchain.findTransaction —— 通过交易ID查询交易信息。它需要遍历所有的区块直到找到交易信息为止。</li>
</ol>
<p>如你所见，上面这些方法都需要去遍历数据库中的所有区块。由于UTXOs池只存储未被花费的交易输出，而不会存储所有的交易信息，因此我们不会对有 Blockchain.findTransaction 进行优化。</p>
<p>那么，我们需要下列这些方法：</p>
<ol>
<li>Blockchain.findUTXO —— 通过遍历所有的区块来找到所有未被花费的交易输出.</li>
<li>UTXOSet.reindex —— 调用上面 findUTXO 方法，然后将查询结果存储在数据库中。也即需要进行缓存的地方。</li>
<li>UTXOSet.findSpendableOutputs —— 与 Blockchain.findSpendableOutputs 类似，区别在于会使用 UTXO 池。</li>
<li>UTXOSet.findUTXO —— 与Blockchain.findUTXO 类似，区别在于会使用 UTXO 池。</li>
<li>Blockchain.findTransaction —— 逻辑保持不变。</li>
</ol>
<p>这样，两个使用最频繁的方法将从现在开始使用缓存！让我们开始编码吧！</p>
<p>定义 UTXOSet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Blockchain blockchain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重建 UTXO 池索引:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重建 UTXO 池索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Synchronized</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Start to reIndex UTXO set !&quot;</span>);</span><br><span class="line">        RocksDBUtils.getInstance().cleanChainStateBucket();</span><br><span class="line">        Map&lt;String, TXOutput[]&gt; allUTXOs = blockchain.findAllUTXOs();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, TXOutput[]&gt; entry : allUTXOs.entrySet()) &#123;</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;ReIndex UTXO set finished ! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此方法用于初始化 UTXOSet。首先，需要清空 chainstate 数据桶，然后查询所有未被花费的交易输出，并将它们保存到 chainstate 数据桶中。</p>
<p>实现 findSpendableOutputs 方法，供 Transation.newUTXOTransaction 调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, <span class="keyword">byte</span>[]&gt; entry : chainstateBucket.entrySet()) &#123;</span><br><span class="line">            String txId = entry.getKey();</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; txOutputs.length; outId++) &#123;</span><br><span class="line">                TXOutput txOutput = txOutputs[outId];</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现 findUTXOs 接口，供 CLI.getBalance 调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXOs(<span class="keyword">byte</span>[] pubKeyHash) &#123;</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">if</span> (chainstateBucket.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] value : chainstateBucket.values()) &#123;</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value);</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上这些方法都是先前 Blockchain 中相应方法的微调版，先前的方法将不再使用。</p>
<p>有了UTXO池之后，意味着我们的交易数据分开存储到了两个不同的数据桶中：交易数据存储到了 block 数据桶中，而UTXO存储到了 chainstate 数据桶中。这就需要一种同步机制来保证每当一个新的区块产生时，UTXO池能够及时同步最新区块中的交易数据，毕竟我们不想频地进行 reIndex 。因此，我们需要如下方法：</p>
<p>更新UTXO池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新UTXO池</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 当一个新的区块产生时，需要去做两件事情：</span></span><br><span class="line"><span class="comment">     * 1）从UTXO池中移除花费掉了的交易输出；</span></span><br><span class="line"><span class="comment">     * 2）保存新的未花费交易输出；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlock 最新的区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Block tipBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tipBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Fail to update UTXO set ! tipBlock is null !&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Fail to update UTXO set ! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction transaction : tipBlock.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据交易输入排查出剩余未被使用的交易输出</span></span><br><span class="line">            <span class="keyword">if</span> (!transaction.isCoinbase()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="comment">// 余下未被使用的交易输出</span></span><br><span class="line">                    TXOutput[] remainderUTXOs = &#123;&#125;;</span><br><span class="line">                    String txId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                    TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (txOutputs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; txOutputs.length; outIndex++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (outIndex != txInput.getTxOutputIndex()) &#123;</span><br><span class="line">                            remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 没有剩余则删除，否则更新</span></span><br><span class="line">                    <span class="keyword">if</span> (remainderUTXOs.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().deleteUTXOs(txId);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新的交易输出保存到DB中</span></span><br><span class="line">            TXOutput[] txOutputs = transaction.getOutputs();</span><br><span class="line">            String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(txId, txOutputs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我们将 UTXOSet 用到它们所需之处去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建区块链</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createBlockchain</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        UTXOSet utxoSet = <span class="keyword">new</span> UTXOSet(blockchain);</span><br><span class="line">        utxoSet.reIndex();</span><br><span class="line">        log.info(<span class="string">&quot;Done ! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当创建一个新的区块链是，我们需要重建 UTXO 池索引。截止目前，这是唯一一处用到 reIndex 的地方，尽管看起有些多余，因为在区块链创建之初仅仅只有一个区块和一笔交易。</p>
<p>修改 CLI.send 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当一个新的区块产生后，需要去更新 UTXO 池数据。</p>
<p>让我们来检查一下它们的运行情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">Elapsed Time: 164.961 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00225493862611bc517cb6b3610e99d26d98a6b52484c9fa745df6ceff93f445 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">&#x27;1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf&#x27;</span>: 10</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -to  1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -amount 5</span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to 1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -amount 2</span><br><span class="line">Elapsed Time: 54.92 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 0001ab21f71ff2d6d532bf3b3388db790c2b03e28d7bd27bd669c5f6380a4e5b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to 1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV -amount 2</span><br><span class="line">Elapsed Time: 54.92 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 0009b925cc94e3db8bab2958b1fc2d1764aa15531e20756d92c3a93065c920f0 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">&#x27;1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf&#x27;</span>: 6</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line">Balance of <span class="string">&#x27;1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG&#x27;</span>: 2</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line">Balance of <span class="string">&#x27;1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV&#x27;</span>: 2</span><br></pre></td></tr></table></figure>

<h2 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h2><p>前面的章节中我们省略了矿工挖矿的奖励机制。时机已经成熟，该实现它了。</p>
<p>矿工奖励其实是一个 coinbase 交易（创币交易）。当一个矿工节点开始去生产一个新的区块时，他会从队列中取出一些交易数据，并且为它们预制一个 coinbase 交易。这笔 coinbase 交易中仅有的交易输出包含了矿工的公钥hash。</p>
<p>只需要更新 send 命令接口，我们就可以轻松实现矿工的奖励机制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        <span class="comment">// 新交易</span></span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        <span class="comment">// 奖励</span></span><br><span class="line">        Transaction rewardTx = Transaction.newCoinbaseTX(from, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction, rewardTx&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"> 	   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还需要修改交易验证方法，coinbase 交易直接验证通过：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tx.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我们的实现逻辑中，代币的发送也是区块的生产者，因此，奖励也归他所有。</p>
<p>让我们来验证一下奖励机制：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : 1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : 17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : 12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address 1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">Elapsed Time: 17.973 seconds</span><br><span class="line">correct <span class="built_in">hash</span> Hex: 0000defe83a851a5db3803d5013bbc20c6234f176b2c52ae36fdb53d28b33d93 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to 17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX -amount 6</span><br><span class="line">Elapsed Time: 30.887 seconds</span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00005fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to 12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT -amount 3</span><br><span class="line">Elapsed Time: 45.267 seconds</span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00009fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line">Balance of <span class="string">&#x27;1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD&#x27;</span>: 21</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line">Balance of <span class="string">&#x27;17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX&#x27;</span>: 6</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line">Balance of <span class="string">&#x27;12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT&#x27;</span>: 3</span><br></pre></td></tr></table></figure>

<p>1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD 这个地址一共收到了三份奖励：</p>
<ul>
<li>第一次是开采创世区块；</li>
<li>第二次是开采区块：00005fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7</li>
<li>第三次是开采区块：00009fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13</li>
</ul>
<h2 id="Merkle-Tree"><a href="#Merkle-Tree" class="headerlink" title="Merkle Tree"></a>Merkle Tree</h2><p>Merkle Tree（默克尔树） 是这篇文章中我们需要重点讨论的一个机制。</p>
<p>正如我前面提到的那样，整个比特币的数据库占到了大约140G的磁盘空间。由于比特币的分布式特性，网络中的每一个节点必须是独立且自给自足的。每个比特币节点都是路由、区块链数据库、挖矿、钱包服务的功能集合。每个节点都参与全网络的路由功能，同时也可能包含其他功能。每个节点都参与验证并传播交易及区块信息，发现并维持与对等节点的连接。一个全节点（full node）包括以下四个功能：<br><img src="https://img.i7years.com/blog/full_node.png-zoom50" alt="full node"></p>
<p>随着越来越多的人开始使用比特币，这条规则开始变得越来越难以遵循：让每一个人都去运行一个完整的节点不太现实。在中本聪发布的<a href="https://bitcoin.org/bitcoin.pdf">比特币白皮书</a>中，针对这个问题提出了一个解决方案：Simplified Payment Verification (SPV)（简易支付验证）。SPV是比特币的轻量级节点，它不需要下载所有的区块链数据，也不需要验证区块和交易数据。相反，当SPV想要验证一笔交易的有效性时，它会从它所连接的全节点上检索所需要的一些数据。这种机制保证了在只有一个全节点的情况，可以运行多个SPV轻钱包节点。</p>
<blockquote>
<p>更多有关SPV的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch08.asciidoc#simplified-payment-verification-spv-nodes">《精通比特币（第二版）》第八章</a></p>
</blockquote>
<p>为了使SPV成为可能，就需要有一种方法在没有全量下载区块数据的情况下，来检查一个区块是否包含了某笔交易。这就是 Merkle Tree 发挥作用的地方了。</p>
<p>比特币中所使用的Merkle Tree是为了获得交易的Hash值，随后这个已经被Pow（工作量证明）系统认可了的Hash值会被保存到区块头中。到目前为止，我们只是简单地计算了一个区块中每笔交易的Hash值，然后在准备Pow数据时，再对这些交易进行 SHA-256 计算。虽然这是一个用于获取区块交易唯一表示的一个不错的方式，但是这种方式不具备 Merkle Tree 的优点。</p>
<p>更多有关Merkle Tree的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#merkle-trees">《精通比特币（第二版）》第九章</a></p>
<p>来看一下Merkle Tree的结构：<br><img src="https://img.i7years.com/blog/merkle-tree-diagram.png" alt="https://img.i7years.com/blog/merkle-tree-diagram.png"></p>
<p>每一个区块都会构建一个Merkle Tree，它从最底部的叶子节点开始往上构建，每一个交易的Hash就是一个叶子节点（比特币中用的双SHA256算法）。叶子节点的数量必须是偶数个，但是并不是每一个区块都能包含偶数笔交易数据。如果存在奇数笔交易数据，那么最后一笔交易数据将会被复制一份（这仅仅发生在Merkle Tree中，而不是区块中）。</p>
<p>从下往上移动，叶子节点成对分组，它们的Hash值被连接到一起，并且在此基础上再次计算出新的Hash值。新的Hash 形成新的树节点。这个过程不断地被重复，直到最后仅剩一个被称为根节点的树节点。这个根节点的Hash就是区块中交易数据们的唯一代表，它会被保存到区块头中，并被用于参与POW系统的计算。</p>
<p>Merkle树的好处是节点可以在不下载整个块的情况下验证某笔交易的合法性。 为此，只需要交易Hash，Merkle树根Hash和Merkle路径。</p>
<p>Merkle Tree代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.ByteUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默克尔树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MerkleTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叶子节点Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[][] leafHashes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MerkleTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        constructTree(leafHashes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从底部叶子节点开始往上构建整个Merkle Tree</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leafHashes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">constructTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leafHashes == <span class="keyword">null</span> || leafHashes.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;ERROR:Fail to construct merkle tree ! leafHashes data invalid ! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leafHashes = leafHashes;</span><br><span class="line">        List&lt;Node&gt; parents = bottomLevel(leafHashes);</span><br><span class="line">        <span class="keyword">while</span> (parents.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            parents = internalLevel(parents);</span><br><span class="line">        &#125;</span><br><span class="line">        root = parents.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个层级节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> children</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">internalLevel</span><span class="params">(List&lt;Node&gt; children)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(children.size() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size() - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node child1 = children.get(i);</span><br><span class="line">            Node child2 = children.get(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(child1, child2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部节点奇数个，只对left节点进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (children.size() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node child = children.get(children.size() - <span class="number">1</span>);</span><br><span class="line">            Node parent = constructInternalNode(child, <span class="keyword">null</span>);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底部节点构建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">bottomLevel</span><span class="params">(<span class="keyword">byte</span>[][] hashes)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(hashes.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashes.length - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node leaf1 = constructLeafNode(hashes[i]);</span><br><span class="line">            Node leaf2 = constructLeafNode(hashes[i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(leaf1, leaf2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hashes.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node leaf = constructLeafNode(hashes[hashes.length - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 奇数个节点的情况，复制最后一个节点</span></span><br><span class="line">            Node parent = constructInternalNode(leaf, leaf);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建叶子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">constructLeafNode</span><span class="params">(<span class="keyword">byte</span>[] hash)</span> </span>&#123;</span><br><span class="line">        Node leaf = <span class="keyword">new</span> Node();</span><br><span class="line">        leaf.hash = hash;</span><br><span class="line">        <span class="keyword">return</span> leaf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建内部节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">constructInternalNode</span><span class="params">(Node leftChild, Node rightChild)</span> </span>&#123;</span><br><span class="line">        Node parent = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (rightChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent.hash = leftChild.hash;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.hash = internalHash(leftChild.hash, rightChild.hash);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.left = leftChild;</span><br><span class="line">        parent.right = rightChild;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算内部节点Hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] internalHash(<span class="keyword">byte</span>[] leftChildHash, <span class="keyword">byte</span>[] rightChildHash) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] mergedBytes = ByteUtils.merge(leftChildHash, rightChildHash);</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.sha256(mergedBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merkle Tree节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] hash;</span><br><span class="line">        <span class="keyword">private</span> Node left;</span><br><span class="line">        <span class="keyword">private</span> Node right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改 Block.hashTransaction 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">        <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">            txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].hash();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MerkleTree(txIdArrays).getRoot().getHash();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MerkleTree的根节点的Hash值，就是区块中交易信息的唯一代表。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一节我们主要是对前面的交易机制做了进一步的优化，加入UTXO池和Merkle Tree机制。</p>
<p>下一讲，我们来介绍一下比特币的交易脚本相关的内容。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li>源码：<a href="https://github.com/wangweiX/blockchain-java/tree/part6-transaction2">https://github.com/wangweiX/blockchain-java/tree/part6-transaction2</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook">《精通比特币（第二版）》</a></li>
<li><a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2):_Data_Storage#The_UTXO_set_.28chainstate_leveldb.29">The UTXO Set</a></li>
<li><a href="https://statoshi.info/dashboard/db/unspent-transaction-output-set">UTXO set statistics</a></li>
<li><a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees">Merkle Tree</a></li>
<li><a href="https://medium.com/@jonaldfyookball/why-every-bitcoin-user-should-understand-spv-security-520d1d45e0b9">Why every Bitcoin user should understand “SPV security”</a></li>
<li><a href="https://en.bitcoin.it/wiki/Script">Script</a></li>
<li><a href="https://github.com/sipa/bitcoin/commit/450cbb0944cd20a06ce806e6679a1f4c83c50db2">“Ultraprune” Bitcoin Core commit</a></li>
<li><a href="https://medium.com/@maraoz/smart-contracts-and-bitcoin-a5d61011d9b1">Smart contracts and Bitcoin</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（七）—— 交易脚本（智能合约）</title>
    <url>/2019/01/23/build-blockchain-in-java-transaction-script/</url>
    <content><![CDATA[<p><img src="/images/rawpixel-652547-unsplash.jpg"></p>
<p>上一篇 文章我们引入 UTXOset 和 Merkle Tree 对交易流程做了些许优化，本篇文章我们将介绍比特币另一个更加重要的机制 —— 交易脚本。</p>
<p>在介绍 UTXO的文章 中，我们已经了解到比特币的交易输出由锁定脚本锁定，它只能被交易输出所被指向的交易输入中的解锁脚本所解锁，今天让我们来详细讨论一下它们的实现机制。</p>
<span id="more"></span>

<h2 id="交易详情"><a href="#交易详情" class="headerlink" title="交易详情"></a>交易详情</h2><p>如今，大多数比特币网络处理的交易是以“Alice付给Bob”的形式存在的。同时，它们是以一种称为“P2PKH”（Pay-to-Public-Key-Hash）脚本为基础的。然而，通过使用脚本来锁定输出和解锁输入意味着通过使用编程语言，比特币交易可以包含无限数量的条件。当然，比特币交易并不限于“Alice付给Bob” 的形式和模式。”</p>
<p>这只是这个脚本语言可以表达的可能性的冰山一角。稍后， 我们将会全面展示比特币交易脚本语言的各个组成部分；同时，我们也会演示如何使用它去表达复杂的使用条件以及解锁脚本如何去满足这些花费条件。</p>
<blockquote>
<p>比特币交易验证并不基于一个不变的模式，而是通过运行脚本语言来实现。这种语言可以表达出多到数不尽的条件变种。这也是比特币作为一种“可编程的货币”所拥有的权力。</p>
</blockquote>
<p>我们以《精通比特币（第二版）》第二章节 中 Alice向Bob购买咖啡为例，点击查看该笔<a href="https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2">交易详情</a></p>
<blockquote>
<p>交易输入：0.1000 BTC<br>手续费用：0.0005 BTC<br>支付费用：0.0150 BTC<br>找 零： 0.0845 BTC</p>
</blockquote>
<p><img src="https://img.i7years.com/blog/tx-stream.png" alt="https://img.i7years.com/blog/tx-stream.png"></p>
<p>该笔交易的数据如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;locktime&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">258</span>,</span><br><span class="line">    <span class="attr">&quot;txid&quot;</span>: <span class="string">&quot;0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;vin&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;scriptSig&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;sequence&quot;</span>: <span class="number">4294967295</span>,</span><br><span class="line">            <span class="attr">&quot;txid&quot;</span>: <span class="string">&quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;vout&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;vout&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;n&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;scriptPubKey&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;addresses&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;reqSigs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pubkeyhash&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">0.015</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;n&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;scriptPubKey&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;addresses&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;reqSigs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pubkeyhash&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">0.0845</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;vsize&quot;</span>: <span class="number">258</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易输入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;vin&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;scriptSig&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sequence&quot;</span>: <span class="number">4294967295</span>,</span><br><span class="line">        <span class="attr">&quot;txid&quot;</span>: <span class="string">&quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;vout&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>它所包含的信息：</p>
<ul>
<li>交易ID。包含了它所指向的UTXO的交易的Hash值。</li>
<li>UTXO下标。定义了它所指向的UTXO在上一笔交易中交易输出数组的位置(下标值)。</li>
<li>签名。用于满足它所指向的UTXO上所设定的花费条件。</li>
</ul>
<p>交易输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;vout&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;n&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;scriptPubKey&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;addresses&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;reqSigs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pubkeyhash&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="number">0.015</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;n&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;scriptPubKey&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;addresses&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;asm&quot;</span>: <span class="string">&quot;OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;reqSigs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pubkeyhash&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="number">0.0845</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>它所包含的信息：</p>
<ul>
<li>比特币的数量。单位：satoshis（聪）</li>
<li>比特币地址。交易输出所绑定的地址。</li>
<li>锁定脚本。定义了花费这笔交易输出所需要满足的限制条件。其中包含了一些字符串，例如：OP_DUP、OP_HASH160、OP_EQUALVERIFY、OP_CHECKSIG，这些叫操作码，后面会做介绍。</li>
</ul>
<p>那么，交易输入中的script 是如何满足交易输出中script_string的限制条件的呢？接下来，我们来一起看下比特币的交易脚本是如何工作的。首先，我们来了解一下比特币所用到脚本语言的特性以及它的工作原理。</p>
<h2 id="比特币脚本语言"><a href="#比特币脚本语言" class="headerlink" title="比特币脚本语言"></a>比特币脚本语言</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>脚本是一种类似Forth的基于堆栈的逆波兰表示法的图灵非完备语言。接下来，让我们逐个解释一下：</p>
<h4 id="图灵非完备（Turing-Incomplete）"><a href="#图灵非完备（Turing-Incomplete）" class="headerlink" title="图灵非完备（Turing Incomplete）"></a>图灵非完备（Turing Incomplete）</h4><blockquote>
<p>什么是图灵完备</p>
<p>在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）可以用来模拟单带图灵机，那么它是图灵完备的。这个词源于引入图灵机概念的数学家艾倫·图灵。</p>
<p>虽然图灵机会受到储存能力的物理限制，图灵完全性通常指「具有无限存储能力的通用物理机器或编程语言」。</p>
<p>来源：<a href="https://en.wikipedia.org/wiki/Turing_completeness">维基百科</a></p>
</blockquote>
<p>图灵非完备语言将会有有限的功能，不能进行跳转或/和循环。因此它们不能进入无线循环。图灵完备就意味着，在给定的计算资源和内存下，图灵完备程序，能够解决任何问题。Solidity 就是其中一种图灵完备语言。</p>
<h5 id="为什么比特币脚本是图灵非完备的"><a href="#为什么比特币脚本是图灵非完备的" class="headerlink" title="为什么比特币脚本是图灵非完备的"></a>为什么比特币脚本是图灵非完备的</h5><p>因为没有必要。比特币脚本没有必要做到像以太坊智能合约那样复杂。事实上，如果一个脚本是图灵完备的，它会给恶意的人以机会去随意创造复杂的交易，这将会吃掉比特币网络的哈希率并降低整个系统的性能。</p>
<blockquote>
<p>哈希率是比特币网络的处理能力的衡量单位。为了安全，比特币网络必须进行高强度的数学运算。网络的哈希率达到10TH/s，意味着这个网络每秒能处理10亿次计算。</p>
</blockquote>
<h5 id="逆波兰表示法-Reverse-Polish-notation"><a href="#逆波兰表示法-Reverse-Polish-notation" class="headerlink" title="逆波兰表示法(Reverse Polish notation)"></a>逆波兰表示法(Reverse Polish notation)</h5><blockquote>
<p>逆波兰表示法（Reverse Polish notation，RPN，或逆波兰记法），是一种是由波兰数学家扬·武卡谢维奇1920年引入的数学表达式方式，在逆波兰记法中，所有操作符置于操作数的后面，因此也被称为后缀表示法。逆波兰记法不需要括号来标识操作符的优先级。</p>
</blockquote>
<h4 id="基于堆栈"><a href="#基于堆栈" class="headerlink" title="基于堆栈"></a>基于堆栈</h4><p>这是一种具有 LIFO（Last In First Out）特性的数据结构，熟悉数据结构的应该非常清楚，这里不多做介绍。</p>
<blockquote>
<p>想深入了解的朋友，可以查看我的另一篇文章<br><a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html</a></p>
</blockquote>
<h4 id="类Forth脚本语言"><a href="#类Forth脚本语言" class="headerlink" title="类Forth脚本语言"></a>类Forth脚本语言</h4><p>比特币脚本恰好类似于编程语言“Forth”，它也恰好是基于堆栈的一种编程语言。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>比特币的脚本语言非常简单，这种语言的代码无非就是一系列数据和操作符。脚本语言通过从左至右地处理每个项目的方式执行脚本。数字（常数）被推送至堆栈，操作符向堆栈推送（或移除）一个或多个参数，对它们进行处理，甚至可能会向堆栈推送一个结果。例如，OP_ADD将从堆栈移除两个项目，将二者相加，然后再将二者相加之和推送到堆栈。</p>
<p>条件操作符评估一项条件，产生一个真或假的结果。例如，OP_EQUAL从堆栈移除两个项目，假如二者相等则推送真（表示为1），假如二者不等则推送为假（表示为0）。比特币交易脚本常含条件操作符，当一笔交易有效时，就会产生True的结果。</p>
<p>我们以一个简单的脚本来进行演示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 OP_ADD 5 OP_EQUAL</span><br></pre></td></tr></table></figure>
<p>从左至右，依次执行，过程如下：<br><img src="https://img.i7years.com/blog/script-example1.png" alt="https://img.i7years.com/blog/script-example1.png"></p>
<p>弄明白这个过程之后，你会发现其中所蕴含的堆栈特性以及逆波兰表示法特性。接下来，我们来看下比特币脚本的锁定与解锁逻辑。</p>
<h3 id="锁定与解锁逻辑"><a href="#锁定与解锁逻辑" class="headerlink" title="锁定与解锁逻辑"></a>锁定与解锁逻辑</h3><p>比特币的交易验证引擎依赖于两类脚本来验证比特币交易：一个锁定脚本和一个解锁脚本。</p>
<p>锁定脚本是放置在输出上的消费条件：它指定将来要花费输出必须满足的条件。锁定脚本常被称为scriptPubKey，因为它通常包含公钥或比特币地址（公钥哈希）。</p>
<p>解锁脚本是通过“解决”或满足锁定脚本上的交易输出条件并允许交易输出花费的脚本。 解锁脚本是每个交易输入的一部分。大多数情况下，它包含了由用户私钥所产生的数字签名。解锁脚本常被称为 scriptSig ，因为它通常包含数字签名。</p>
<p>每当要验证一笔交易的有效性时，解锁脚本和锁定脚本会随着堆栈的传递被分别执行。首先，使用堆栈执行引擎执行解锁脚本。如果解锁脚本在执行过程中未报错(例如:没有“悬挂”操作码)，则复制 主堆栈(而不是备用堆栈)，并执行锁定脚本。如果从解锁脚本中复制而来的堆栈数据执行锁定脚本的结果 为“TRUE”，那么解锁脚本就成功地满足了锁定脚本所设置的条件，因此，该输入是一个能使用该UTXO的有效授 权。如果在合并脚本后的结果不是”TRUE“以外的任何结果，输入都是无效的，因为它不能满足UTXO中所设置的使 用该笔资金的条件。</p>
<p>下图所示是最为常见类型的比特币交易（向公钥哈希进行一笔支付）的解锁和锁定脚本样本，该样本展示了在脚本验证之前将解锁脚本和锁定脚本串联而成的组合脚本。</p>
<p><img src="https://img.i7years.com/blog/bitcoin-script.png" alt="https://img.i7years.com/blog/bitcoin-script.png"></p>
<p>这是比特币脚本中使用最为常见的一种形式，名叫 Pay to Public Key Hash (P2PKH)。基于前面 2 + 3 = 5 的验证过程，我们可以得到 P2PKH 脚本在堆栈引擎中的验证过程如下所示：</p>
<p><img src="https://img.i7years.com/blog/P2PKH.png" alt="https://img.i7years.com/blog/P2PKH.png"></p>
<p>好了， 到此为止，你已经对比特币的交易脚本以及它的工作原理已经有了一个非常清楚的理解与认识。</p>
<p>参考资料</p>
<ul>
<li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc">《精通比特币（第二版）》第六章</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6">https://jeiwan.cc/posts/building-blockchain-in-go-part-6</a></li>
<li><a href="https://blockgeeks.com/guides/best-bitcoin-script-guide">https://blockgeeks.com/guides/best-bitcoin-script-guide</a></li>
<li><a href="https://blockgeeks.com/guides/bitcoin-script-guide-part-2">https://blockgeeks.com/guides/bitcoin-script-guide-part-2</a></li>
<li><a href="https://en.bitcoin.it/wiki/Script">https://en.bitcoin.it/wiki/Script</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（四）—— 交易（UTXO）</title>
    <url>/2019/01/23/build-blockchain-in-java-transaction-utxo/</url>
    <content><![CDATA[<p><img src="/images/ecommerce-2140604.jpg"></p>
<blockquote>
<p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-4/">https://jeiwan.cc/posts/building-blockchain-in-go-part-4/</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上一篇 文章，我们实现了区块数据的持久化，本篇开始交易环节的实现。交易这一环节是整个比特币系统当中最为关键的一环，并且区块链唯一的目的就是通过安全的、可信的方式来存储交易信息，防止它们创建之后被人恶意篡改。今天我们开始实现交易这一环节，但由于这是一个很大的话题，所以我们分为两部分：第一部分我们将实现区块链交易的基本机制，到第二部分，我们再来研究它的细节。</p>
<span id="more"></span>

<h2 id="比特币交易"><a href="#比特币交易" class="headerlink" title="比特币交易"></a>比特币交易</h2><p>如果你开发过Web应用程序，为了实现支付系统，你可能会在数据库中创建一些数据库表：账户 和 交易记录。账户用于存储用户的个人信息以及账户余额等信息，交易记录用于存储资金从一个账户转移到另一个账户的记录。但是在比特币中，支付系统是以一种完全不一样的方式实现的，在这里：</p>
<ul>
<li>没有账户</li>
<li>没有余额</li>
<li>没有地址</li>
<li>没有 Coins（币）</li>
<li>没有发送者和接受者</li>
</ul>
<p>由于区块链是一个公开的数据库，我们不希望存储有关钱包所有者的敏感信息。Coins 不会汇总到钱包中。交易不会将资金从一个地址转移到另一个地址。没有可保存帐户余额的字段或属性。只有交易信息。那比特币的交易信息里面到底存储的是什么呢？</p>
<h2 id="交易组成"><a href="#交易组成" class="headerlink" title="交易组成"></a>交易组成</h2><p>一笔比特币的交易由 交易输入 和 交易输出 组成，数据结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易的Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXInput[] inputs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXOutput[] outputs;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一笔交易的 交易输入 其实是指向上一笔交易的交易输出 （这个后面详细说明）。我们钱包里面的 Coin（币）实际是存储在这些 交易输出 里面。下图表示了区块链交易系统里面各个交易相互引用的关系：<br><img src="https://img.i7years.com/blog/transactions-diagram.png" alt="transactions-diagram"><br>注意：</p>
<ol>
<li>有些 交易输出 并不是由 交易输入 产生，而是凭空产生的（后面会详细介绍）。</li>
<li>但，交易输入 必须指向某个 交易输出，它不能凭空产生。</li>
<li>在一笔交易里面，交易输入 可能会来自多笔交易所产生的 交易输出。</li>
</ol>
<p>在整篇文章中，我们将使用诸如“钱”，“币”，“花费”，“发送”，“账户”等词语。但比特币中没有这样的概念，在比特币交易中，交易信息是由 锁定脚本 锁定一个数值，并且只能被所有者的 解锁脚本 解锁。（解铃还须系铃人）</p>
<h2 id="交易输出"><a href="#交易输出" class="headerlink" title="交易输出"></a>交易输出</h2><p>让我们先从交易输出开始，他的数据结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁定脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptPubKey;</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，它表示的是能够存储 “coins（币）”的交易输出（注意 value 字段）。并且这里所谓的 value 实际上是由存储在 ScriptPubKey （锁定脚本）中的一个puzzle（难题） 所锁定。在内部，比特币使用称为脚本的脚本语言，用于定义输出锁定和解锁逻辑。这个语言很原始（这是故意的，以避免可能的黑客和滥用），但我们不会详细讨论它。 你可以在这里找到它的详细解释。<a href="https://en.bitcoin.it/wiki/Script">here</a></p>
<blockquote>
<p>在比特币中，value 字段存储着 satoshis 的任意倍的数值，而不是BTC的数量。satoshis 是比特币的百万分之一（0.00000001 BTC），因此这是比特币中最小的货币单位（如1美分）（satoshis：聪）。<br>锁定脚本是一个放在一个输出值上的“障碍”，同时它明确了今后花费这笔输出的条件。由于锁定脚本往往含有一个公钥（即比特币地址），在历史上它曾被称作一个脚本公钥代码。在大多数比特币应用源代码中，脚本公钥代码便是我们所说的锁定脚本。</p>
</blockquote>
<p>由于我们还没有实现钱包地址的逻辑，所以这里先暂且忽略锁定脚本相关的逻辑。ScriptPubKey 将会存储任意的字符串（用户定义的钱包地址）</p>
<blockquote>
<p>顺便说一句，拥有这样的脚本语言意味着比特币也可以用作智能合约平台。</p>
</blockquote>
<p>关于 交易输出 的一个重要的事情是它们是不可分割的，这意味着你不能将它所存储的数值拆开来使用。当这个交易输出在新的交易中被交易输入所引用时，它将作为一个整体被花费掉。 如果其值大于所需值，那么剩余的部分则会作为零钱返回给付款方。 这与真实世界的情况类似，例如，您支付5美元的钞票用于购买1美元的东西，那么你将会得到4美元的零钱。</p>
<h2 id="交易输入"><a href="#交易输入" class="headerlink" title="交易输入"></a>交易输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptSig;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>前面提到过，一个交易输入指向的是某一笔交易的交易输出：</li>
<li>txId 存储的是某笔交易的ID值</li>
<li>txOutputIndex 存储的是交易中这个交易输出的索引位置（因为一笔交易可能包含多个交易输出）<ul>
<li>scriptSig 主要是提供用于交易输出中 ScriptPubKey 所需的验证数据。</li>
<li>如果这个数据被验证正确，那么相应的交易输出将被解锁，并且其中的 value 能够生成新的交易输出；</li>
<li>如果不正确，那么相应的交易输出将不能被交易输入所引用；</li>
</ul>
</li>
</ul>
<p>通过锁定脚本与解锁脚本这种机制，保证了某个用户不能花费属于他人的Coins。</p>
<p>同样，由于我们尚未实现钱包地址功能，ScriptSig 将会存储任意的用户所定义的钱包地址。我们将会在下一章节实现公钥和数字签名验证。</p>
<p>说了这么多，我们来总结一下。交易输出是”Coins”实际存储的地方。每一个交易输出都带有一个锁定脚本，它决定了解锁的逻辑。每一笔新的交易必须至少有一个交易输入与交易输出。一笔交易的交易输入指向前一笔交易的交易输出，并且提供用于锁定脚本解锁需要的数据（ScriptSig 字段），然后利用交易输出中的 value 去创建新的交易输出。</p>
<blockquote>
<p>注意，这段话的原文如下，但是里面有表述错误的地方，交易输出带有的是锁定脚本，而不是解锁脚本。</p>
<p>Let’s sum it up. Outputs are where “coins” are stored. Each output comes with an unlocking script, which determines the logic of unlocking the output. Every new transaction must have at least one input and output. An input references an output from a previous transaction and provides data (the ScriptSig field) that is used in the output’s unlocking script to unlock it and use its value to create new outputs.</p>
</blockquote>
<h2 id="鸡与蛋的问题"><a href="#鸡与蛋的问题" class="headerlink" title="鸡与蛋的问题"></a>鸡与蛋的问题</h2><p>在比特币中，鸡蛋先于鸡出现。交易输入源自于交易输出的逻辑是典型的”先有鸡还是先有蛋”的问题：交易输入产生交易输出，交易输出又会被交易输入所引用。在比特币中，交易输出先于交易输入出现。</p>
<p>当矿工开始开采区块时，区块中会被添加一个 coinbase 交易（创币交易）。coinbase 交易是一种特殊的交易，它不需要以前已经存在的交易输出。它会凭空创建出交易输出（i.e: Coins）。也即，鸡蛋的出现并不需要母鸡，这笔交易是作为矿工成功挖出新的区块后的一笔奖励。</p>
<p>正如你所知道的那样，在区块链的最前端，即第一个区块，有一个创世区块。他产生了区块链中有史以来的第一个交易输出，并且由于没有前一笔交易，也就没有相应的输出，因此不需要前一笔交易的交易输出。</p>
<p>让我们来创建 coinbase 交易：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建CoinBase交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to   收账的钱包地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 解锁脚本数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">newCoinbaseTX</span><span class="params">(String to, String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(data)) &#123;</span><br><span class="line">        data = String.format(<span class="string">&quot;Reward to &#x27;%s&#x27;&quot;</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建交易输入</span></span><br><span class="line">    TXInput txInput = <span class="keyword">new</span> TXInput(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;&#125;, -<span class="number">1</span>, data);</span><br><span class="line">    <span class="comment">// 创建交易输出</span></span><br><span class="line">    TXOutput txOutput = <span class="keyword">new</span> TXOutput(SUBSIDY, to);</span><br><span class="line">    <span class="comment">// 创建交易</span></span><br><span class="line">    Transaction tx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, <span class="keyword">new</span> TXInput[]&#123;txInput&#125;, <span class="keyword">new</span> TXOutput[]&#123;txOutput&#125;);</span><br><span class="line">    <span class="comment">// 设置交易ID</span></span><br><span class="line">    tx.setTxId();</span><br><span class="line">    <span class="keyword">return</span> tx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>coinbase交易只有一个交易输入。在我们的代码实现中，txId 是空数组，txOutputIndex 设置为了 -1。另外，coinbase交易不会在 ScriptSig 字段上存储解锁脚本，相反，存了一个任意的数据。</p>
<blockquote>
<p>在比特币中，第一个 coinbase 交易报刊了如下的信息：”The Times 03/Jan/2009 Chancellor on brink of second bailout for banks”. <a href="https://blockchain.info/tx/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b?show_adv=true">点击查看</a></p>
</blockquote>
<p>SUBSIDY 是挖矿奖励数量。在比特币中，这个奖励数量没有存储在任何地方，而是依据现有区块的总数进行计算而得到：区块总数 除以 210000。开采创世区块得到的奖励为50BTC，每过 210000 个区块，奖励会减半。在我们的实现中，我们暂且将挖矿奖励设置为常数。（至少目前是这样）</p>
<h2 id="在区块链中存储交易信息"><a href="#在区块链中存储交易信息" class="headerlink" title="在区块链中存储交易信息"></a>在区块链中存储交易信息</h2><p>从现在开始，每一个区块必须存储至少一个交易信息，并且尽可能地避免在没有交易数据的情况下进行挖矿。这意味着我们必须移除 Block 对象中的 date 字段，取而代之的是 transactions：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] transactions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相应地，newGenesisBlock 与 newBlock 也都需要做改变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coinbase</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">(Transaction coinbase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Block.newBlock(<span class="string">&quot;&quot;</span>, <span class="keyword">new</span> Transaction[]&#123;coinbase&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, Transaction[] transactions)</span> </span>&#123;</span><br><span class="line">     Block block = <span class="keyword">new</span> Block(<span class="string">&quot;&quot;</span>, previousHash, transactions, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">     ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">     PowResult powResult = pow.run();</span><br><span class="line">     block.setHash(powResult.getHash());</span><br><span class="line">     block.setNonce(powResult.getNonce());</span><br><span class="line">     <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，修改 newBlockchain 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        <span class="comment">// 创建 coinBase 交易</span></span><br><span class="line">        Transaction coinbaseTX = Transaction.newCoinbaseTX(address, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock(coinbaseTX);</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，代码有钱包地址的接口，将会收到开采创世区块的奖励。</p>
<h2 id="工作量证明（Pow）"><a href="#工作量证明（Pow）" class="headerlink" title="工作量证明（Pow）"></a>工作量证明（Pow）</h2><p>Pow算法必须将存储在区块中的交易信息考虑在内，以保存交易信息存储的一致性和可靠性。因此，我们必须修改 ProofOfWork.prepareData 接口代码逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().hashTransaction(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 hashTransaction 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">   <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">       txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].getTxId();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> DigestUtils.sha256(ByteUtils.merge(txIds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，我们使用哈希值来作为数据的唯一标识。我们希望区块中的所有交易数据都能通过一个哈希值来定义它的唯一标识。为了达到这个目的，我们计算了每一个交易的唯一哈希值，然后将他们串联起来，再对这个串联后的组合进行哈希值计算。</p>
<blockquote>
<p>比特币使用更复杂的技术：它将所有包含在块中的交易表示为 <a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees">Merkle树</a> ，并在Proof-of-Work系统中使用该树的根散列。 这种方法只需要跟节点的散列值就可以快速检查块是否包含某笔交易，而无需下载所有交易。</p>
</blockquote>
<h2 id="UTXO（未花费交易输出）"><a href="#UTXO（未花费交易输出）" class="headerlink" title="UTXO（未花费交易输出）"></a>UTXO（未花费交易输出）</h2><blockquote>
<p>UTXO：unspend transaction output.（未被花费的交易输出）</p>
<p>在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO.</p>
</blockquote>
<p>UTXO 是理解比特币交易原理的关键所在，我们先来看一段场景：</p>
<p>场景：假设你过去分别向A、B、C这三个比特币用户购买了BTC，从A手中购买了3.5个BTC，从B手中购买了4.5个BTC，从C手中购买了2个BTC，现在你的比特币钱包里面恰好剩余10个BTC。</p>
<p>问题：这个10个BTC是真正的10个BTC吗？其实不是，这句话可能听起来有点怪。（什么！我钱包里面的BTC不是真正的BTC，你不要吓我……）</p>
<p>解释：前面提到过在比特币的交易系统当中，并不存在账户、余额这些概念，所以，你的钱包里面的10个BTC，并不是说钱包余额为10个BTC。而是说，这10个BTC其实是由你的比特币地址（钱包地址|公钥）锁定了的散落在各个区块和各个交易里面的UTXO的总和。</p>
<p>UTXO 是比特币交易的基本单位，每笔交易都会产生UTXO，一个UTXO可以是一“聪”的任意倍。给某人发送比特币实际上是创造新的UTXO，绑定到那个人的钱包地址，并且能被他用于新的支付。</p>
<p>一般的比特币交易由 交易输入 和 交易输出 两部分组成。A向你支付3.5个BTC这笔交易，实际上产生了一个新的UTXO，这个新的UTXO 等于 3.5个BTC（3.5亿聪），并且锁定到了你的比特币钱包地址上。</p>
<p>假如你要给你女（男）朋友转 1.5 BTC，那么你的钱包会从可用的UTXO中选取一个或多个可用的个体来拼凑出一个大于或等于一笔交易所需的比特币量。比如在这个假设场景里面，你的钱包会选取你和C的交易中的UTXO作为 交易输入，input = 2BTC，这里会生成两个新的交易输出，一个输出（UTXO = 1.5 BTC）会被绑定到你女（男）朋友的钱包地址上，另一个输出（UTXO = 0.5 BTC）会作为找零，重新绑定到你的钱包地址上。</p>
<blockquote>
<p>有关比特币交易这部分更详细的内容，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions">《精通比特币（第二版）》第6章 —— 交易</a></p>
</blockquote>
<p>我们需要找到所有未花费的交易输出（UTXO）。Unspent(未花费) 意味着这些交易输出从未被交易输入所指向。这前面的图片中，UTXO如下：</p>
<ol>
<li>tx0, output 1;</li>
<li>tx1, output 0;</li>
<li>tx3, output 0;</li>
<li>tx4, output 0.</li>
</ol>
<p>当然，当我们检查余额时，我不需要区块链中所有的UTXO，我只需要能被我们解锁的UTXO（当前，我们还没有实现密钥对，而是替代为用户自定义的钱包地址）。首先，我们在交易输入与交易输出上定义锁定-解锁的方法：</p>
<p>交易输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line">  	</span><br><span class="line">    ...</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canUnlockOutputWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptSig().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canBeUnlockedWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptPubKey().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们暂时用 unlockingData 来与脚本字段进行比较。我们会在后面的文章中来对这部分内容进行优化，我们将会基于私钥来实现用户的钱包地址。</p>
<p>下一步，查询所有与钱包地址绑定的包含UTXO的交易信息，有点复杂（本篇先这样实现，后面我们做一个与钱包地址映射的UTXO池来进行优化）：</p>
<ul>
<li>从与钱包地址对应的交易输入中查询出所有已被花费了的交易输出</li>
<li>再来排除，寻找包含未被花费的交易输出的交易</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] findUnspentTransactions(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(address);</span><br><span class="line">        Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">                String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                    <span class="keyword">if</span> (transaction.getOutputs()[outIndex].canBeUnlockedWith(address)) &#123;</span><br><span class="line">                        unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unspentTxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从交易输入中查询区块链中所有已被花费了的交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交易ID以及对应的交易输出下标地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">int</span>[]&gt; getAllSpentTXOs(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义TxId ——&gt; spentOutIndex[]，存储交易ID与已被花费的交易输出数组索引值</span></span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; spentTXOs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line">                <span class="comment">// 如果是 coinbase 交易，直接跳过，因为它不存在引用前一个区块的交易输出</span></span><br><span class="line">                <span class="keyword">if</span> (transaction.isCoinbase()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (txInput.canUnlockOutputWith(address)) &#123;</span><br><span class="line">                        String inTxId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                        <span class="keyword">int</span>[] spentOutIndexArray = spentTXOs.get(inTxId);</span><br><span class="line">                        <span class="keyword">if</span> (spentOutIndexArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            spentTXOs.put(inTxId, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;txInput.getTxOutputIndex()&#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex());</span><br><span class="line">                            spentTXOs.put(inTxId, spentOutIndexArray);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spentTXOs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到了所有包含UTXO的交易数据，接下来，我们就可以得到所有UTXO集合了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXO(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transaction[] unspentTxs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (unspentTxs == <span class="keyword">null</span> || unspentTxs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTxs) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : tx.getOutputs()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>现在，我们可以实现获取钱包地址余额的接口了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询钱包余额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getBalance</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        TXOutput[] txOutputs = blockchain.findUTXO(address);</span><br><span class="line">        <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (txOutputs != <span class="keyword">null</span> &amp;&amp; txOutputs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                balance += txOutput.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Balance of &#x27;%s&#x27;: %d\n&quot;</span>, address, balance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询 wangwei 这个钱包地址的余额：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>Balance of ‘wangwei’: 10</p>
<h2 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h2><p>现在，我们想要给某人发送一些币。因此，我们需要创建一笔新的交易，然后放入区块中，再进行挖矿。到目前为止，我们只是实现了 coinbase 交易，现在我们需要实现常见的创建交易接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 from 向  to 支付一定的 amount 的金额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from       支付钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to         收款钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     交易金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockchain 区块链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpendableOutputResult result = blockchain.findSpendableOutputs(from, amount);</span><br><span class="line">        <span class="keyword">int</span> accumulated = result.getAccumulated();</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = result.getUnspentOuts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accumulated &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Not enough funds&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, <span class="keyword">int</span>[]&gt;&gt; iterator = unspentOuts.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        TXInput[] txInputs = &#123;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, <span class="keyword">int</span>[]&gt; entry = iterator.next();</span><br><span class="line">            String txIdStr = entry.getKey();</span><br><span class="line">            <span class="keyword">int</span>[] outIdxs = entry.getValue();</span><br><span class="line">            <span class="keyword">byte</span>[] txId = Hex.decodeHex(txIdStr);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outIndex : outIdxs) &#123;</span><br><span class="line">                txInputs = ArrayUtils.add(txInputs, <span class="keyword">new</span> TXInput(txId, outIndex, from));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] txOutput = &#123;&#125;;</span><br><span class="line">        txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput(amount, to));</span><br><span class="line">        <span class="keyword">if</span> (accumulated &gt; amount) &#123;</span><br><span class="line">            txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput((accumulated - amount), from));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">        newTx.setTxId();</span><br><span class="line">        <span class="keyword">return</span> newTx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在创建新的交易输出之前，我们需要事先找到所有的UTXO，并确保有足够的金额。这就是 findSpendableOutputs 要干的事情。之后，为每个找到的输出创建一个引用它的输入。接下来，我们创建两个交易输出：</p>
<ul>
<li>一个 output 用于锁定到接收者的钱包地址上。这个是真正被转走的coins；</li>
<li>另一个 output 锁定到发送者的钱包地址上。这个就是 找零。只有当用于支付的UTXO总和大于要支付的金额时，才会创建这部分的 交易输出。记住：交易输出是不可分割的</li>
</ul>
<p>findSpendableOutputs 需要调用我们之前创建的 findUnspentTransactions 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(String address, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transaction[] unspentTXs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTXs) &#123;</span><br><span class="line"></span><br><span class="line">            String txId = Hex.encodeHexString(tx.getTxId());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; tx.getOutputs().length; outId++) &#123;</span><br><span class="line"></span><br><span class="line">                TXOutput txOutput = tx.getOutputs()[outId];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法会遍历所有的UTXO并统计他们的总额。当计算的总额恰好大于或者等于需要转账的金额时，方法会停止遍历，然后返回用于支付的总额以及按交易ID分组的交易输出索引值数组。我们不想要花更多的钱。</p>
<p>现在，我们可以修改 Block.mineBlock 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包交易，进行挖矿</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Fail to get last block hash ! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Block block = Block.newBlock(lastBlockHash, transactions);</span><br><span class="line">        <span class="keyword">this</span>.addBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，我们来实现转账的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        RocksDBUtils.getInstance().closeDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转账，意味着创建一笔新的交易并且通过挖矿的方式将其存入区块中。但是，比特币不会像我们这样做，它会把新的交易记录先存到内存池中，当一个矿工准备去开采一个区块时，它会把打包内存池中的所有交易信息，并且创建一个候选区块。只有当这个包含所有交易信息的候选区块被成功开采并且被添加到区块链上时，这些交易信息才算被确认。</p>
<p>让我们来测试一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先确认 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">&#x27;wangwei&#x27;</span>: 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转账</span></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Pedro -amount 6</span><br><span class="line">Elapsed Time: 0.828 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000c5f50cf72db1f375a5d454f98bc49d07335db921cbef5fa9e58ad34d462 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">&#x27;wangwei&#x27;</span>: 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Pedro 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address Pedro</span><br><span class="line">Balance of <span class="string">&#x27;Pedro&#x27;</span>: 6</span><br></pre></td></tr></table></figure>

<p>赞！现在让我们来创建更多的交易并且确保从多个交易输出进行转账是正常的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Pedro -to Helen -amount 2</span><br><span class="line">Elapsed Time: 2.533 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000c81d541ad407a3767ad633d1147602df86fe14e1962ec145ab17b633e88 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Helen -amount 2</span><br><span class="line">Elapsed Time: 1.481 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000c3f8b82c2b970438f5f1f39d56bb8a9d66341efc92a02ffcbff91acd84b </span><br><span class="line"></span><br><span class="line">Success!</span><br></pre></td></tr></table></figure>
<p>现在，Helen 这个钱包地址上有了两笔从 wangwei 和 Pedro 转账中产生的UTXO，让我们将它们再转账给另外一个人：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Helen -to Rachel -amount 3</span><br><span class="line">Elapsed Time: 17.136 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 000000b1226a947166c2b01a15d1cd3558ddf86fe99bad28a0501a2af60f6a02 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">&#x27;wangwei&#x27;</span>: 2</span><br><span class="line">$ ./blochchain.sh getbalance -address Pedro  </span><br><span class="line">Balance of <span class="string">&#x27;Pedro&#x27;</span>: 4</span><br><span class="line">$ ./blochchain.sh getbalance -address Helen</span><br><span class="line">Balance of <span class="string">&#x27;Helen&#x27;</span>: 1</span><br><span class="line">$ ./blochchain.sh getbalance -address Rachel</span><br><span class="line">Balance of <span class="string">&#x27;Rachel&#x27;</span>: 3</span><br></pre></td></tr></table></figure>
<p>非常棒！让我们来测试一下失败的场景：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blochchain.sh send -from wangwei -to Ivan -amount 5 </span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line">        at one.wangwei.blockchain.transaction.Transaction.newUTXOTransaction(Transaction.java:104)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.send(CLI.java:138)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.parse(CLI.java:73)</span><br><span class="line">        at one.wangwei.blockchain.cli.Main.main(Main.java:7)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇内容有点难度，但好歹我们现在有了交易信息了。尽管，缺少像比特币这一类加密货币的一些关键特性：</p>
<ol>
<li>钱包地址。我们还没有基于私钥的真实地址。</li>
<li>奖励。挖矿绝对没有利润。</li>
<li>UTXO池。当我们计算钱包地址的余额时，我们需要遍历所有的区块中的所有交易信息，当有许许多多的区块时，这将花费不少的时间。此外，如果我们想验证以后的交易，可能需要很长时间。 UTXO迟旨在解决这些问题并快速处理交易。</li>
<li>内存池。 这是交易在打包成区块之前存储的地方。 在我们当前的实现中，一个块只包含一笔交易，而且效率很低。</li>
</ol>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part4-transaction1">https://github.com/wangweiX/blockchain-java/tree/part4-transaction1</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions">《精通比特币（第二版）》第6章 —— 交易</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常用函数</title>
    <url>/2019/01/23/common-functions-js/</url>
    <content><![CDATA[<h2 id="JS自定义监听事件"><a href="#JS自定义监听事件" class="headerlink" title="JS自定义监听事件"></a>JS自定义监听事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event =  &#123;</span><br><span class="line">    <span class="comment">// 通过on接口监听事件eventName</span></span><br><span class="line">    <span class="comment">// 如果事件eventName被触发，则执行callback回调函数</span></span><br><span class="line">    <span class="attr">on</span>: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.handles)&#123;</span><br><span class="line">            <span class="comment">//this.handles=&#123;&#125;;</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, <span class="string">&quot;handles&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">value</span>: &#123;&#125;,</span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.handles[eventName])&#123;</span><br><span class="line">            <span class="built_in">this</span>.handles[eventName]=[];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.handles[eventName].push(callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 触发事件 eventName</span></span><br><span class="line">    <span class="attr">emit</span>: <span class="function"><span class="keyword">function</span> (<span class="params">eventName</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]].length;i++)&#123;</span><br><span class="line">                <span class="built_in">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]][i](<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Java语言构建区块链（五）—— 地址（钱包）</title>
    <url>/2019/01/23/build-blockchain-in-java-wallet-address/</url>
    <content><![CDATA[<p><img src="/images/pexels-photo-730547.webp"></p>
<blockquote>
<p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-5/">https://jeiwan.cc/posts/building-blockchain-in-go-part-5/</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 上一篇 文章当中，我们开始了交易机制的实现。你已经了解到交易的一些非个人特征：没有用户账户，您的个人数据（例如：姓名、护照号码以及SSN(美国社会安全卡（Social Security Card）上的9 位数字)）不是必需的，并且不存储在比特币的任何地方。但仍然必须有一些东西能够识别你是这些交易输出的所有者（例如：锁定在这些输出上的币的所有者）。这就是比特币地址的作用所在。到目前为止，我们只是使用了任意的用户定义的字符串当做地址，现在是时候来实现真正的地址了，就像它们在比特币中实现的一样。</p>
<span id="more"></span>

<h2 id="比特币地址"><a href="#比特币地址" class="headerlink" title="比特币地址"></a>比特币地址</h2><p>这里有一个比特币地址的示例：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a>。这是一个非常早期的比特币地址，据称是属于中本聪的比特币地址。比特币地址是公开的。如果你想要给某人发送比特币，你需要知道对方的比特币地址。但是地址（尽管它是唯一的）并不能作为你是一个钱包所有者的凭证。事实上，这样的地址是公钥的一种可读性更好的表示 。在比特币中，你的身份是存储在你计算机上（或存储在你有权访问的其他位置）的一对（或多对）私钥和公钥。比特币依靠加密算法的组合来创建这些密钥，并保证世界上没有其他人任何人可以在没有物理访问密钥的情况下访问您的比特币。</p>
<blockquote>
<p>比特币地址与公钥不同。比特币地址是由公钥经过单向的哈希函数生成的</p>
</blockquote>
<p><img src="https://img.i7years.com/blog/mbc2_0405_wangwei.png" alt="PubKey to bitcoin address"></p>
<p>接下来，让我们来讨论一下这些加密算法。</p>
<blockquote>
<p>注意：不要向本篇文章中的代码所生成的任何比特币地址发送真实的比特币来进行测试，否则后果自负……</p>
</blockquote>
<p>公钥密码学<br>公钥加密算法（public-key cryptography）使用的是密钥对：公钥和私钥。公钥属于非敏感信息，可以向任何人透露。相比之下，私钥不能公开披露：除了所有者之外，任何人都不能拥有私钥的权限，因为它是用作所有者标识的私钥。你的私钥代表就是你（当然是在加密货币世界里的）。</p>
<p>本质上，比特币钱包就是一对这样的密钥。当你安装一个钱包应用程序或者使用比特币客户端去生成一个新的地址时，它们就为你创建好了一个密钥对。在比特币种，谁控制了私钥，谁就掌握了所有发往对应公钥地址上所有比特币的控制权。</p>
<p>私钥和公钥只是随机的字节序列，因此它们不能被打印在屏幕上供人读取。这就是为什么比特币会用一种算法将公钥的字节序列转化为人类可读的字符串形式。</p>
<blockquote>
<p>如果你曾今使用过比特币钱包的应用程序，它可能会为你生成助记词密码短语。这些助记词可以用来替代私钥，并且能够生成私钥。这种机制是通过 BIP-039 来实现的。</p>
</blockquote>
<p>好了，现在我们已经知道在比特币中由什么来决定用户的标识了。但是，比特币是如何校验交易输出（和它里面存储的一些币）的所有权的呢？</p>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>在数学和密码学中，有个数字签名的概念，这套算法保证了以下几点：</p>
<ol>
<li>保证数据从发送端传递到接收端的过程中不会被篡改；</li>
<li>数据由某个发送者创建；</li>
<li>发送者不能否认发送的数据；</li>
</ol>
<p>通过对数据应用签名算法（即签署数据），可以得到一个签名，以后可以对其进行验证。数字签名需要使用私钥，而验证则需要公钥。</p>
<p>为了能够签署数据我们需要：</p>
<ol>
<li>用于被签名的数据；</li>
<li>私钥。</li>
</ol>
<p>签名操作会产生一个存储在交易输入中的签名。为了能够验证一个签名，我们需要：</p>
<ol>
<li>签名之后的数据；</li>
<li>签名；</li>
<li>公钥。</li>
</ol>
<p>简单来讲，这个验证的过程可以被描述为：检查签名是由被签名数据加上私钥得来，并且这个公钥也是由该私钥生成。</p>
<blockquote>
<p>数字签名并不是一种加密方法，你无法从签名反向构造出源数据。这个和我们 前面 提到过的Hash算法有点类似：通过对一个数据使用Hash算法，你可以得到该数据的唯一表示。它们两者的不同之处在于，签名算法多了一个密钥对：它让数字签名得以验证成为可能。</p>
<p>但是密钥对也能够用于去加密数据：私钥用于加密数据，公钥用于解密数据。不过比特币并没有使用加密算法。</p>
</blockquote>
<p>在比特币中，每一笔交易输入都会被该笔交易的创建者进行签名。比特币中的每一笔交易在放入区块之前都必须得到验证。验证的意思就是：</p>
<ul>
<li>检查交易输入是否拥有引用前一笔交易中交易输出的权限</li>
<li>检查交易的签名是否正确</li>
</ul>
<p>数据签名以及签名验证的过程如下图所示：<br><img src="https://img.i7years.com/blog/signing-scheme.png" alt="signing-scheme"><br>让我们来回顾一下交易的完整生命周期：</p>
<ol>
<li>最开始，会有一个包含了Coinbase交易的创世区块。由于在Coinbase交易中没有真正的交易输入，所以它不需要签名。Coinbase交易的交易输出会包含一个Hashing之后的公钥（使用的算法为 RIPEMD16(SHA256(PubKey)) ）</li>
<li>当一个人发送比特币时，会创建一笔交易。这笔交易的交易输入会引用前一笔或多笔交易的交易输出。每一个交易输入将会存储未经Hashing处理的公钥以及整个交易的签名信息。</li>
<li>当比特币网络中的其他节点收到其他节点广播的交易数据之后将，将会对其进行验证。其他的事情除外，他们将会验证：<ul>
<li>检查交易输入中公钥的Hash值是否与它所引用的交易输出的Hash值想匹配，这是确保发送方只能发送属于他们自己的比特币。</li>
<li>检查签名是否正确，这是为了确保这笔交易是由比特币的真正所有者创建的。</li>
</ul>
</li>
<li>当一个矿工准备开始开采一个新的区块时，他会将交易信息放入区块中，然后开始挖矿。</li>
<li>当一个区块完成挖矿之后，网络中的其他节点将会收到一条区块已挖矿完毕的消息，并且他们会把这个区块添加到区块链中去。</li>
<li>当一个区块被添加到区块链之后，就标志着这笔交易已经完成，它所产生的交易输出将会在新的交易中被引用。</li>
</ol>
<h2 id="椭圆曲线密码学"><a href="#椭圆曲线密码学" class="headerlink" title="椭圆曲线密码学"></a>椭圆曲线密码学</h2><p>正如前面所提到的那样，公钥和私钥是一串随机的字符序列。由于私钥是用来识别比特币所有者身份的缘故，因此有一个必要的条件：这个随机算法必须产生真正的随机序列。我们不希望意外地生成其他人所拥有的私钥。也就是要保证随机序列的绝对唯一性。</p>
<p>比特币是使用的椭圆曲线来生成的私钥。椭圆曲线是一个非常复杂的数学概念，这里我们不做详细的介绍（如果你对此非常好奇，可以点击 <a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">this gentle introduction to elliptic curves</a> 进行详细的 了解，警告：数学公式）。我们需要知道的是，这些曲线可以用来生成真正大而随机的数字。比特币所采用的曲线算法能够随机生成一个介于0到 2^2^56之间的数字（这是一个非常大的数字，用十进制表示的话，大约是10^77， 而整个可见的宇宙中，原子数在 10^78 到 10^82 之间） 。这么巨大的上限意味着产生两个一样的私钥是几乎不可能的事情。</p>
<p>另外，我们将会使用比特币中所使用的 ECDSA （椭圆曲线数字签名算法）去签署交易信息。</p>
<h2 id="Base58和Base58Check编码"><a href="#Base58和Base58Check编码" class="headerlink" title="Base58和Base58Check编码"></a>Base58和Base58Check编码</h2><p>现在让我们回到上面提到的比特币地址：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a> . 现在我们知道这个地址其实是公钥的一种可读高的表示方式。如果我们对他进行解码，我们会看到公钥看起来是这样子的（字节序列的十六进制的表示方式）：</p>
<blockquote>
<p>0062E907B15CBF27D5425399EBF6F0FB50EBB88F18C29B7D93</p>
</blockquote>
<h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h2><p>Base64使用了26个小写字母、26个大写字母、10个数字以及两个符号（例如“+”和“/”），用于在电子邮件这样的基于文本的媒介中传输二进制数据。Base64通常用于编码邮件中的附件。Base58是一种基于文本的二进制编码格式，用在比特币和其它的加密货币中。这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。Base58是Base64编码格式的子集，同样使用大小写字母和10个数字，但舍弃了一些容易错读和在特定字体中容易混淆的字符。具体地，Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母L）、I（大写字母i），以及“+”和“/”两个字符。简而言之，Base58就是由不包括（0，O，l，I）的大小写字母和数字组成。</p>
<p>比特币的Base58字母表：</p>
<blockquote>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
</blockquote>
<h2 id="Base58Check"><a href="#Base58Check" class="headerlink" title="Base58Check"></a>Base58Check</h2><p>Base58Check是一种常用在比特币中的Base58编码格式，增加了错误校验码来检查数据在转录中出现的错误。校验码长4个字节，添加到需要编码的数据之后。校验码是从需要编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。使用Base58check编码格式时，编码软件会计算原始数据的校验码并和结果数据中自带的校验码进行对比。二者不匹配则表明有错误产生，那么这个Base58Check格式的数据就是无效的。例如，一个错误比特币地址就不会被钱包认为是有效的地址，否则这种错误会造成资金的丢失。</p>
<p>为了使用Base58Check编码格式对数据（数字）进行编码，首先我们要对数据添加一个称作“版本字节”的前缀，这个前缀用来明确需要编码的数据的类型。例如，比特币地址的前缀是0（十六进制是0x00），而对私钥编码时前缀是128（十六进制是0x80）。</p>
<p>让我们以示意图的形式展示一下从公钥得到地址的过程：<br><img src="https://img.i7years.com/blog/mbc2_0406_wangwei.png" alt="Base58Check Encoding"></p>
<p>因此，上述解码的公钥由三部分组成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Version  Public key <span class="built_in">hash</span>                           Checksum</span><br><span class="line">00       62E907B15CBF27D5425399EBF6F0FB50EBB88F18  C29B7D93</span><br></pre></td></tr></table></figure>
<p>由于哈希函数是单向的（也就说无法逆转回去），所以不可能从一个哈希中提取公钥。不过通过执行哈希函数并进行哈希比较，我们可以检查一个公钥是否被用于哈希的生成。</p>
<p>OK，现在我们有了所有的东西，让我们来编写一些代码。 当一些概念被写成代码时，我们会对此理解的更加清晰和深刻。</p>
<h2 id="地址实现"><a href="#地址实现" class="headerlink" title="地址实现"></a>地址实现</h2><p>让我们从 Wallet 的构成开始，这里我们需要先引入一个maven包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>钱包结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/03/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验码长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADDRESS_CHECKSUM_LEN = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BCECPrivateKey privateKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initWallet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化钱包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyPair keyPair = newECKeyPair();</span><br><span class="line">            BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();</span><br><span class="line">            BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] publicKeyBytes = publicKey.getQ().getEncoded(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setPrivateKey(privateKey);</span><br><span class="line">            <span class="keyword">this</span>.setPublicKey(publicKeyBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的密钥对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> KeyPair <span class="title">newKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注册 BC Provider</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        <span class="comment">// 创建椭圆曲线算法的密钥对生成器，算法为 ECDSA</span></span><br><span class="line">        KeyPairGenerator g = KeyPairGenerator.getInstance(<span class="string">&quot;ECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        <span class="comment">// 椭圆曲线（EC）域参数设定</span></span><br><span class="line">        <span class="comment">// bitcoin 为什么会选择 secp256k1，详见：https://bitcointalk.org/index.php?topic=151120.0</span></span><br><span class="line">        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(<span class="string">&quot;secp256k1&quot;</span>);</span><br><span class="line">        g.initialize(ecSpec, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> g.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所谓的钱包，其实本质上就是一个密钥对。这里我们需要借助 KeyPairGenerator 生成密钥对。</p>
<p>接着，我们来生成比特币的钱包地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取钱包地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取 ripemdHashedKey</span></span><br><span class="line">        <span class="keyword">byte</span>[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPublicKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加版本 0x00</span></span><br><span class="line">        ByteArrayOutputStream addrStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        addrStream.write((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        addrStream.write(ripemdHashedKey);</span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 计算校验码</span></span><br><span class="line">        <span class="keyword">byte</span>[] checksum = BtcAddressUtils.checksum(versionedPayload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 得到 version + paylod + checksum 的组合</span></span><br><span class="line">        addrStream.write(checksum);</span><br><span class="line">        <span class="keyword">byte</span>[] binaryAddress = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 执行Base58转换处理</span></span><br><span class="line">        <span class="keyword">return</span> Base58Check.rawBytesToBase58(binaryAddress);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候，你就可以得到 真实的比特币地址 了，并且你可以到 <a href="https://blockchain.info/">blockchain.info</a> 上去检查这个地址的余额。</p>
<blockquote>
<p>例如，通过 getAddress 方法，得到了一个比特币地址为：<a href="https://blockchain.info/address/1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16">1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16</a></p>
</blockquote>
<p>我敢保证，无论你生成多少次比特币地址，它的余额始终为0.这就是为什么选择适当的公钥密码算法如此重要：考虑到私钥是随机数字，产生相同数字的机会必须尽可能低。 理想情况下，它必须低至“永不”。</p>
<p>另外，需要注意的是你不需要连接到比特币的节点上去获取比特币的地址。有关地址生成的开源算法工具包已经有很多编程语言和库实现了。</p>
<p>现在，我们需要去修改交易输入与输出，让他们开始使用真实的地址：</p>
<h2 id="交易输入"><a href="#交易输入" class="headerlink" title="交易输入"></a>交易输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] signature;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查公钥hash是否用于交易输入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">usesKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lockingHash = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPubKey());</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(lockingHash, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="交易输出"><a href="#交易输出" class="headerlink" title="交易输出"></a>交易输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKeyHash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TXOutput <span class="title">newTXOutput</span><span class="params">(<span class="keyword">int</span> value, String address)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 反向转化为 byte 数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = Base58Check.base58ToBytes(address);</span><br><span class="line">        <span class="keyword">byte</span>[] pubKeyHash = Arrays.copyOfRange(versionedPayload, <span class="number">1</span>, versionedPayload.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TXOutput(value, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查交易输出是否能够使用指定的公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLockedWithKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.getPubKeyHash(), pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码中还有很多其他的地方需要变动，这里不一一指出，详见文末的源码连接。</p>
</blockquote>
<p>注意，由于我们不会去实现脚本语言特性，所以我们不再使用 scriptPubKey 和 scriptSig 字段。取而代之的是，我们将 scriptSig 拆分为了 signature 和 pubKey 字段，scriptPubKey 重命名为了 pubKeyHash 。我们将会实现类似于比特币中的交易输出锁定/解锁逻辑和交易输入的签名逻辑，但是我们会在方法中执行此操作。</p>
<p>usesKey 用于检查交易输入中的公钥是否能够解锁交易输出。需要注意的是，交易输入中存储的是未经hash过的公钥，但是方法实现中对它做了一步 ripeMD160Hash 转化。</p>
<p>isLockedWithKey 用于检查提供的公钥Hash是否能够用于解锁交易输出，这个方法是 usesKey 的补充。usesKey 被用于 getAllSpentTXOs 方法中，isLockedWithKey 被用于 findUnspentTransactions 方法中，这样使得在前后两笔交易之间建立起了连接。</p>
<p>newTXOutput 方法中，将 value 锁定到了 address 上。当我们向别人发送比特币时，我们只知道他们的地址，因此函数将地址作为唯一的参数。然后解码地址，并从中提取公钥哈希并保存在PubKeyHash字段中。</p>
<p>现在，让我们一起来检查一下是否能够正常运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 19aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address 13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">Elapsed Time: 6.77 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000e44be0c94c39a4fef24c67d85c428e8bfbd227e292d75c0f4d398e2e81c </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">&#x27;13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh&#x27;</span>: 10</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e -to  13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVd -amount 5</span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh -to 1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e-amount 5</span><br><span class="line">Elapsed Time: 4.477 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000da41dfacc8032a553ed5b1aa5e24318d5d89ca14a16c4f70129609c8365 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">&#x27;13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh&#x27;</span>: 5</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line">Balance of <span class="string">&#x27;1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e&#x27;</span>: 5</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 19aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line">Balance of <span class="string">&#x27;19aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1&#x27;</span>: 0</span><br></pre></td></tr></table></figure>
<p>Nice! 现在让我们一起来实现交易签名部分的内容。</p>
<h2 id="签名实现"><a href="#签名实现" class="headerlink" title="签名实现"></a>签名实现</h2><p>交易数据必须被签名，因为这是比特币中能够保证不能花费属于他人比特币的唯一方法。如果一个签名是无效的，那么这笔交易也是无效的，这样的话，这笔交易就不能被添加到区块链中去。</p>
<p>我们已经有了实现交易签名的所有片段，还有一个事情除外：用于签名的数据。交易数据中哪一部分是真正用于签名的呢？难道是全部数据？选择用于签名的数据相当的重要。用于签名的数据必须包含以独特且唯一的方式标识数据的信息。例如，仅对交易输出签名是没有意义的，因为此签名不会考虑发送发与接收方。</p>
<p>考虑到交易数据要解锁前面的交易输出，重新分配交易输出中的 value 值，并且锁定新的交易输出，因此下面这些数据是必须被签名的：</p>
<ol>
<li>存储在解锁了的交易输出中的公钥Hash。它标识了交易的发送方。</li>
<li>存储在新的、锁定的交易输出中的公钥Hash。它标识了交易的接收方。</li>
<li>新的交易输出中包含的 value 值。</li>
</ol>
<blockquote>
<p>在比特币中，锁定/解锁逻辑存储在脚本中，解锁脚本存储在交易输入的 ScriptSig 字段中，而锁定脚本存储在交易输出的 ScriptPubKey 的字段中。 由于比特币允许不同类型的脚本，因此它会对ScriptPubKey的全部内容进行签名。</p>
</blockquote>
<p>如你所见，我们不需要去对存储在交易输入中的公钥进行签名。正因为如此，在比特币中，所签名的并不是一个交易，而是一个去除部分内容的交易输入副本，交易输入里面存储了被引用交易输出的 ScriptPubKey 。</p>
<blockquote>
<p>获取修剪后的交易副本的详细过程在这里. 虽然它可能已经过时了，但是我并没有找到另一个更可靠的来源。</p>
</blockquote>
<p>OK，它看起来有点复杂，因此让我们来开始coding吧。我们将从 Sign 方法开始：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap  前面多笔交易集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(BCECPrivateKey privateKey, Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，因为它不存在交易输入信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Previous transaction is not correct&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">      </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        Signature ecdsaSign = Signature.getInstance(<span class="string">&quot;SHA256withECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        ecdsaSign.initSign(privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; txCopy.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">            ecdsaSign.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line">            <span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line">            <span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法需要私钥和前面多笔交易集合作为参数。正如前面所提到的那样，为了能够对交易信息进行签名，我们需要能够访问到被交易数据中的交易输入所引用的交易输出，因此我们需要得到存储这些交易输出的交易信息。</p>
<p>让我们来一步一步review这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 coinbase 交易信息不存在交易输入信息，因此它不需要签名，直接return.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure>
<p>创建交易的副本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用于签名的交易数据副本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">trimmedCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TXInput[] tmpTXInputs = <span class="keyword">new</span> TXInput[<span class="keyword">this</span>.getInputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            tmpTXInputs[i] = <span class="keyword">new</span> TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] tmpTXOutputs = <span class="keyword">new</span> TXOutput[<span class="keyword">this</span>.getOutputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getOutputs().length; i++) &#123;</span><br><span class="line">            TXOutput txOutput = <span class="keyword">this</span>.getOutputs()[i];</span><br><span class="line">            tmpTXOutputs[i] = <span class="keyword">new</span> TXOutput(txOutput.getValue(), txOutput.getPubKeyHash());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Transaction(<span class="keyword">this</span>.getTxId(), tmpTXInputs, tmpTXOutputs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个交易数据的副本包含了交易输入与交易输出，但是交易输入的 Signature 与 PubKey 需要设置为null。</p>
<p>使用私钥初始化 SHA256withECDSA 签名算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">&quot;SHA256withECDSA&quot;</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br></pre></td></tr></table></figure>
<p>接下来，我们迭代交易副本中的交易输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (TXInput txInput : txCopy.getInputs()) &#123;</span><br><span class="line">      <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">      Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">      <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">      TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">      txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">      txInputCopy.setSignature(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>在每一个 txInput中，signature 都需要设置为null（仅仅是为了二次确认检查），并且 pubKey 设置为它所引用的交易输出的 pubKeyHash 字段。在此刻，除了当前的正在循环的交易输入(txInput)外，其他所有的交易输入都是”空的”，也就是说他们的 Signature 和 PubKey 字段被设置为 null。因此，交易输入是被分开签名的，尽管这对于我们的应用并不十分紧要，但是比特币允许交易包含引用了不同地址的输入。</p>
<p>Hash 方法对交易进行序列化，并使用 SHA-256 算法进行哈希。哈希后的结果就是我们要签名的数据。在获取完哈希，我们应该重置 PubKey 字段，以便于它不会影响后面的迭代。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">txCopy.setTxId(txCopy.hash());</span><br><span class="line">txInput.setPubKey(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>现在，最关键的部分来了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">&quot;SHA256withECDSA&quot;</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br><span class="line">ecdsaSign.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line"><span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line"><span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br></pre></td></tr></table></figure>

<p>使用 SHA256withECDSA 签名算法加上私钥，来对交易ID进行签名，从而得到了交易输入所要设置的交易签名。</p>
<p>现在，让我们来实现交易的验证功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap 前面多笔交易集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，也就无需验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Previous transaction is not correct&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名验证的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">        </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">&quot;secp256k1&quot;</span>);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">&quot;ECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        Signature ecdsaVerify = Signature.getInstance(<span class="string">&quot;SHA256withECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">            BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">            BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">            ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">            ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">            PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">            ecdsaVerify.initVerify(publicKey);</span><br><span class="line">            ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首选，同前面签名一样，我们先获取交易的拷贝数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure>
<p>获取椭圆曲线参数和签名类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">&quot;secp256k1&quot;</span>);</span><br><span class="line">KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">&quot;ECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">Signature ecdsaVerify = Signature.getInstance(<span class="string">&quot;SHA256withECDSA&quot;</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br></pre></td></tr></table></figure>
<p>接下来，我们来检查每一个交易输入的签名是否正确：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">    TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">    <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">    Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">    <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">    TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">    TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">    txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">    txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">    <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">    txCopy.setTxId(txCopy.hash());</span><br><span class="line">    txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分与Sign方法中的相同，因为在验证过程中我们需要签署相同的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">ecdsaVerify.initVerify(publicKey);</span><br><span class="line">ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于交易输入中存储的 pubkey ，实际上是椭圆曲线上的一对 x,y 坐标，所以我们可以从 pubKey 得到公钥PublicKey，然后在用公钥去签名进行验证。如果验证成功，则返回true，否则，返回false。</p>
<p>现在，我们需要一个方法来获取以前的交易。 由于这需要与区块链互动，我们将使其成为 blockchain 的一种方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据交易ID查询交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txId 交易ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Transaction <span class="title">findTransaction</span><span class="params">(<span class="keyword">byte</span>[] txId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator iterator = <span class="keyword">this</span>.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = iterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction tx : block.getTransactions()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.equals(tx.getTxId(), txId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Can not found tx by txId ! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行交易签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx         交易数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signTransaction</span><span class="params">(Transaction tx, BCECPrivateKey privateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 先来找到这笔新的交易中，交易输入所引用的前面的多笔交易的数据</span></span><br><span class="line">        Map&lt;String, Transaction&gt; prevTxMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction prevTx = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx);</span><br><span class="line">        &#125;</span><br><span class="line">        tx.sign(privateKey, prevTxMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Transaction&gt; prevTx = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction transaction = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tx.verify(prevTx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们需要对我们的交易进行真正的签名和验证了，交易的签名发生在 newUTXOTransaction 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">    newTx.setTxId(newTx.hash());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行交易签名</span></span><br><span class="line">    blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newTx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易的验证发生在一笔交易被放入区块之前：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 挖矿前，先验证交易记录</span></span><br><span class="line">    <span class="keyword">for</span> (Transaction tx : transactions) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.verifyTransactions(tx)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;ERROR: Fail to mine block ! Invalid transaction ! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，让我们再一次对整个工程的代码做一个测试，测试结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : 13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address 1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">Elapsed Time: 164.961 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000524231ae1832c49957848d2d1871cc35ff4d113c23be1937c6dff5cdf2a </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">&#x27;1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6&#x27;</span>: 10</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -to  13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f -amount 5</span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from 1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6 -to 1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -amount 5</span><br><span class="line">Elapsed Time: 54.92 seconds </span><br><span class="line">correct <span class="built_in">hash</span> Hex: 00000354f86cde369d4c39d2b3016ac9a74956425f1348b4c26b2cddb98c100b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">&#x27;1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6&#x27;</span>: 5</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line">Balance of <span class="string">&#x27;1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB&#x27;</span>: 5</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address 13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line">Balance of <span class="string">&#x27;13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f&#x27;</span>: 0</span><br></pre></td></tr></table></figure>
<p>Good！没有任何错误！</p>
<p>让我们注释掉 NewUTXOTransaction 方法中的一行代码，确保未被签名的交易不能被添加到区块中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span></span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java.lang.Exception: Fail to verify transaction ! transaction invalid ! </span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.verifyTransactions(Blockchain.java:334)</span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.mineBlock(Blockchain.java:76)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.send(CLI.java:202)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.parse(CLI.java:79)</span><br><span class="line">	at one.wangwei.blockchain.BlockchainTest.main(BlockchainTest.java:23)</span><br></pre></td></tr></table></figure>
<p>说明</p>
<p>WalletUtils 如若抛出异常：Illegal key size or default parameters，请按以下方法进行解决：</p>
<p><a href="https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters">https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一节，我们学到了:</p>
<ol>
<li>使用椭圆曲线加密算法，如何去创建钱包；</li>
<li>了解到了如何去生成比特币地址；</li>
<li>如何去对交易信息进行签名并对签名进行验证；</li>
</ol>
<p>到目前为止，我们已经实现了比特币的许多关键特性！ 我们已经实现了除外网络外的几乎所有功能，并且在下一篇文章中，我们将继续完善交易这一环节机制。</p>
<p>资料</p>
<ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part5-wallet">https://github.com/wangweiX/blockchain-java/tree/part5-wallet</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc">《精通比特币（第二版）》—— 第四章</a></li>
<li><a href="https://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories">Elliptic Curve Key Pair Generation and Key Factories</a></li>
<li><a href="https://stackoverflow.com/questions/30116758/generating-publickey-from-x-and-y-values-of-elliptic-curve-point">How to create public key objects with x and y coordinates?</a></li>
<li><a href="https://en.wikipedia.org/wiki/Public-key_cryptography">Public-key cryptography</a></li>
<li><a href="https://en.wikipedia.org/wiki/Digital_signature">Digital signatures</a></li>
<li><a href="https://en.wikipedia.org/wiki/Elliptic_curve">Elliptic curve</a></li>
<li><a href="https://en.wikipedia.org/wiki/Elliptic_curve_cryptography">Elliptic curve cryptography</a></li>
<li><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm">ECDSA</a></li>
<li><a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses">Technical background of Bitcoin addresses</a></li>
<li><a href="https://en.bitcoin.it/wiki/Address">Address</a></li>
<li><a href="https://en.bitcoin.it/wiki/Base58Check_encoding">Base58</a></li>
<li><a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">A gentle introduction to elliptic curve cryptography</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP踩坑记录</title>
    <url>/2019/01/23/common-questions-php/</url>
    <content><![CDATA[<h2 id="windows-下-php-curl-error-60"><a href="#windows-下-php-curl-error-60" class="headerlink" title="windows 下 php curl error 60"></a>windows 下 php curl error 60</h2><p><a href="https://curl.haxx.se/ca/cacert.pem">下载cacert.pem</a><br>修改配置文件：php.ini curl.cainfo = “cacert.pem文件路径”。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Fatal Error Base address marks unusable memory region.</title>
    <url>/2020/11/30/fatal-error-base-address-marks-unusable-memory-region/</url>
    <content><![CDATA[<p>Windows平台php7.2 </p>
<p>Opcache 引起的 Fatal Error Base address marks unusable memory region. 异常</p>
<p>修改php.ini 配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">opcache.mmap_base</span> = <span class="number">0</span>x20000000</span><br></pre></td></tr></table></figure>

<p>原文地址：<a href="https://php.upupw.net/apache/6/660.html">https://php.upupw.net/apache/6/660.html</a></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP常用函数</title>
    <url>/2019/01/23/common-functions-php/</url>
    <content><![CDATA[<h2 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$length</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="variable">$length</span>-<span class="number">1</span>;<span class="variable">$j</span>&gt;<span class="variable">$i</span>;<span class="variable">$j</span>--)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>]&lt;<span class="variable">$arr</span>[<span class="variable">$j</span>-<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>-<span class="number">1</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>-<span class="number">1</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$length</span> &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$pivot</span> = <span class="variable">$arr</span>[<span class="number">0</span>];<span class="comment">//枢轴</span></span><br><span class="line">  <span class="variable">$left_arr</span> = <span class="keyword">array</span>();</span><br><span class="line">  <span class="variable">$right_arr</span> = <span class="keyword">array</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>;<span class="variable">$i</span>++)&#123;<span class="comment">//注意$i从1开始0是枢轴</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$i</span>]&lt;=<span class="variable">$pivot</span>)&#123;</span><br><span class="line">      <span class="variable">$left_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$right_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$left_arr</span> = quick_sort(<span class="variable">$left_arr</span>);<span class="comment">//递归排序左半部分</span></span><br><span class="line">  <span class="variable">$right_arr</span> = quick_sort(<span class="variable">$right_arr</span>);<span class="comment">//递归排序右半部份</span></span><br><span class="line">  <span class="keyword">return</span> array_merge(<span class="variable">$left_arr</span>,<span class="keyword">array</span>(<span class="variable">$pivot</span>),<span class="variable">$right_arr</span>);<span class="comment">//合并左半部分、枢轴、右半部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(不稳定)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$length</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$min</span> = <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="variable">$i</span>+<span class="number">1</span>;<span class="variable">$j</span>&lt;<span class="variable">$length</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>]&lt;<span class="variable">$arr</span>[<span class="variable">$min</span>])&#123;</span><br><span class="line">        <span class="variable">$min</span> = <span class="variable">$j</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span> != <span class="variable">$min</span>)&#123;</span><br><span class="line">      <span class="variable">$tmp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">      <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$min</span>];</span><br><span class="line">      <span class="variable">$arr</span>[<span class="variable">$min</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$length</span> &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$j</span> = <span class="variable">$i</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$x</span>&lt;<span class="variable">$arr</span>[<span class="variable">$j</span>] &amp;&amp; <span class="variable">$j</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">      <span class="variable">$j</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$low</span>,<span class="variable">$high</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="variable">$low</span>&lt;=<span class="variable">$high</span>)&#123;</span><br><span class="line">    <span class="variable">$mid</span> = intval((<span class="variable">$low</span>+<span class="variable">$high</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$arr</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$mid</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$key</span>&lt;<span class="variable">$arr</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">      <span class="variable">$high</span> = <span class="variable">$mid</span>-<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$key</span>&gt;<span class="variable">$arr</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">      <span class="variable">$low</span> = <span class="variable">$mid</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sq_search</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$arr</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$i</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h2><h3 id="线性表的删除"><a href="#线性表的删除" class="headerlink" title="线性表的删除"></a>线性表的删除</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete_array_element</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$pos</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$pos</span>&lt;<span class="number">1</span> || <span class="variable">$pos</span>&gt;<span class="variable">$length</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;删除位置出错!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="variable">$pos</span>-<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$length</span>-<span class="number">1</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$i</span>+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  array_pop(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joseph_ring</span>(<span class="params"><span class="variable">$n</span>,<span class="variable">$m</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$arr</span> = range(<span class="number">1</span>,<span class="variable">$n</span>);</span><br><span class="line">  <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(count(<span class="variable">$arr</span>)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable">$i</span>=<span class="variable">$i</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="variable">$head</span> = array_shift(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span>%<span class="variable">$m</span> != <span class="number">0</span>)&#123; <span class="comment">//如果不是则重新压入数组</span></span><br><span class="line">      array_push(<span class="variable">$arr</span>,<span class="variable">$head</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joseph_ring2</span>(<span class="params"><span class="variable">$n</span>,<span class="variable">$m</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$r</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">2</span>;<span class="variable">$i</span>&lt;=<span class="variable">$n</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$r</span> = (<span class="variable">$r</span>+<span class="variable">$m</span>)%<span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$r</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算笛卡尔乘积"><a href="#计算笛卡尔乘积" class="headerlink" title="计算笛卡尔乘积"></a>计算笛卡尔乘积</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dikaer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$arr</span> = func_get_args();</span><br><span class="line">    <span class="variable">$arr1</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$result</span> = array_shift(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$arr2</span> = array_shift(<span class="variable">$arr</span>)) &#123;</span><br><span class="line">        <span class="variable">$arr1</span> = <span class="variable">$result</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr1</span> <span class="keyword">as</span> <span class="variable">$v1</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$arr2</span> <span class="keyword">as</span> <span class="variable">$v2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!is_array(<span class="variable">$v1</span>)) <span class="variable">$v1</span> = <span class="keyword">array</span>(<span class="variable">$v1</span>);</span><br><span class="line">                <span class="keyword">if</span> (!is_array(<span class="variable">$v2</span>)) <span class="variable">$v2</span> = <span class="keyword">array</span>(<span class="variable">$v2</span>);</span><br><span class="line">                <span class="variable">$result</span>[] = array_merge_recursive(<span class="variable">$v1</span>, <span class="variable">$v2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="驼峰下划线相互转换"><a href="#驼峰下划线相互转换" class="headerlink" title="驼峰下划线相互转换"></a>驼峰下划线相互转换</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下划线转驼峰</span></span><br><span class="line"><span class="comment">* 思路:</span></span><br><span class="line"><span class="comment">* step1.原字符串转小写,原字符串中的分隔符用空格替换,在字符串开头加上分隔符</span></span><br><span class="line"><span class="comment">* step2.将字符串中每个单词的首字母转换为大写,再去空格,去字符串首部附加的分隔符.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $uncamelized_words</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $separator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params"><span class="variable">$uncamelized_words</span>,<span class="variable">$separator</span>=<span class="string">&#x27;_&#x27;</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$uncamelized_words</span> = <span class="variable">$separator</span>. str_replace(<span class="variable">$separator</span>, <span class="string">&quot; &quot;</span>, strtolower(<span class="variable">$uncamelized_words</span>));</span><br><span class="line">	<span class="keyword">return</span> ltrim(str_replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>, ucwords(<span class="variable">$uncamelized_words</span>)), <span class="variable">$separator</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 驼峰命名转下划线命名</span></span><br><span class="line"><span class="comment"> * 思路:小写和大写紧挨一起的地方,加上分隔符,然后全部转小写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $camel_caps</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $separator </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncamelize</span>(<span class="params"><span class="variable">$camel_caps</span>,<span class="variable">$separator</span>=<span class="string">&#x27;_&#x27;</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> strtolower(preg_replace(<span class="string">&#x27;/([a-z])([A-Z])/&#x27;</span>, <span class="string">&quot;<span class="subst">$1</span>&quot;</span> . <span class="variable">$separator</span> . <span class="string">&quot;<span class="subst">$2</span>&quot;</span>, <span class="variable">$camel_caps</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="斐波那契算法"><a href="#斐波那契算法" class="headerlink" title="斐波那契算法"></a>斐波那契算法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 斐波那契算法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $i</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$i</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(<span class="variable">$i</span> - <span class="number">2</span>) + fibonacci(<span class="variable">$i</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成随机信用卡号"><a href="#生成随机信用卡号" class="headerlink" title="生成随机信用卡号"></a>生成随机信用卡号</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机信用卡号 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $org</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed|string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_creditcard</span>(<span class="params"><span class="variable">$org</span> = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$prefixs</span> = [</span><br><span class="line">        <span class="string">&#x27;bankcard&#x27;</span> =&gt; [<span class="number">5610</span>, <span class="number">560221</span>, <span class="number">560222</span>, <span class="number">560223</span>, <span class="number">560224</span>, <span class="number">560225</span>],</span><br><span class="line">        <span class="string">&#x27;china_union_pay&#x27;</span> =&gt; [<span class="number">62</span>],</span><br><span class="line">        <span class="string">&#x27;diners&#x27;</span> =&gt; [<span class="number">36</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>],</span><br><span class="line">        <span class="string">&#x27;discover&#x27;</span> =&gt; [<span class="number">6011</span>, <span class="number">644</span>, <span class="number">645</span>, <span class="number">646</span>, <span class="number">647</span>, <span class="number">648</span>, <span class="number">649</span>, <span class="number">65</span>],</span><br><span class="line">        <span class="string">&#x27;jcb&#x27;</span> =&gt; [<span class="number">3528</span>, <span class="number">3589</span>],</span><br><span class="line">        <span class="string">&#x27;mastercard&#x27;</span> =&gt; [<span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>],</span><br><span class="line">        <span class="string">&#x27;visa&#x27;</span> =&gt; [<span class="number">4485</span>, <span class="number">4532</span>, <span class="number">4539</span>, <span class="number">4556</span>, <span class="number">4716</span>, <span class="number">4916</span>, <span class="number">4929</span>],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$org</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$prefixs</span>[<span class="variable">$org</span>])) &#123;</span><br><span class="line">        <span class="variable">$ccnumber</span> = array_rand(<span class="variable">$prefixs</span>[<span class="variable">$org</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$prefixs_tmp</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$prefixs</span> <span class="keyword">as</span> <span class="variable">$prefix</span>) &#123;</span><br><span class="line">            <span class="variable">$prefixs_tmp</span> = array_merge(<span class="variable">$prefixs_tmp</span>, <span class="variable">$prefix</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ccnumber</span> = <span class="variable">$prefixs_tmp</span>[array_rand(<span class="variable">$prefixs_tmp</span>)];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">        print_r(<span class="variable">$ccnumber</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$length</span> = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate digits</span></span><br><span class="line">    <span class="keyword">while</span> (strlen(<span class="variable">$ccnumber</span>) &lt; (<span class="variable">$length</span> - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="variable">$ccnumber</span> .= rand(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Calculate sum</span></span><br><span class="line">    <span class="variable">$sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$pos</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$reversedCCnumber</span> = strrev(<span class="variable">$ccnumber</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$pos</span> &lt; <span class="variable">$length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$odd</span> = <span class="variable">$reversedCCnumber</span>[<span class="variable">$pos</span>] * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$odd</span> &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="variable">$odd</span> -= <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sum</span> += <span class="variable">$odd</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pos</span> != (<span class="variable">$length</span> - <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="variable">$sum</span> += <span class="variable">$reversedCCnumber</span>[<span class="variable">$pos</span> + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$pos</span> += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Calculate check digit</span></span><br><span class="line">    <span class="variable">$checkdigit</span> = ((floor(<span class="variable">$sum</span> / <span class="number">10</span>) + <span class="number">1</span>) * <span class="number">10</span> - <span class="variable">$sum</span>) % <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$ccnumber</span> .= <span class="variable">$checkdigit</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ccnumber</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成随机身份证号"><a href="#生成随机身份证号" class="headerlink" title="生成随机身份证号"></a>生成随机身份证号</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机身份证号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $base</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_idcard</span>(<span class="params"><span class="variable">$base</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//身份证起止年月 eg：1990年12月31日 mktime(0,0,0,12,31,1990)</span></span><br><span class="line">    <span class="variable">$Year_start</span> = mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1950</span>);</span><br><span class="line">    <span class="variable">$Year_end</span> = mktime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">1992</span>);</span><br><span class="line">    <span class="comment">//全国区域代码 共3131</span></span><br><span class="line">    <span class="variable">$Region</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">110101</span>, <span class="number">110102</span>, <span class="number">110105</span>, <span class="number">110106</span>, <span class="number">110107</span>, <span class="number">110108</span>, <span class="number">110109</span>, <span class="number">110111</span>, <span class="number">110112</span>, <span class="number">110113</span>, <span class="number">110114</span>, <span class="number">110115</span>,</span><br><span class="line">        <span class="number">110116</span>, <span class="number">110117</span>, <span class="number">110228</span>, <span class="number">110229</span>, <span class="number">120101</span>, <span class="number">120102</span>, <span class="number">120103</span>, <span class="number">120104</span>, <span class="number">120105</span>, <span class="number">120106</span>, <span class="number">120110</span>, <span class="number">120111</span>,</span><br><span class="line">        <span class="number">120112</span>, <span class="number">120113</span>, <span class="number">120114</span>, <span class="number">120115</span>, <span class="number">120116</span>, <span class="number">120221</span>, <span class="number">120223</span>, <span class="number">120225</span>, <span class="number">130101</span>, <span class="number">130102</span>, <span class="number">130103</span>, <span class="number">130104</span>,</span><br><span class="line">        <span class="number">130105</span>, <span class="number">130107</span>, <span class="number">130108</span>, <span class="number">130121</span>, <span class="number">130123</span>, <span class="number">130124</span>, <span class="number">130125</span>, <span class="number">130126</span>, <span class="number">130127</span>, <span class="number">130128</span>, <span class="number">130129</span>, <span class="number">130130</span>,</span><br><span class="line">        <span class="number">130131</span>, <span class="number">130132</span>, <span class="number">130133</span>, <span class="number">130181</span>, <span class="number">130182</span>, <span class="number">130183</span>, <span class="number">130184</span>, <span class="number">130185</span>, <span class="number">130201</span>, <span class="number">130202</span>, <span class="number">130203</span>, <span class="number">130204</span>,</span><br><span class="line">        <span class="number">130205</span>, <span class="number">130207</span>, <span class="number">130208</span>, <span class="number">130209</span>, <span class="number">130223</span>, <span class="number">130224</span>, <span class="number">130225</span>, <span class="number">130227</span>, <span class="number">130229</span>, <span class="number">130281</span>, <span class="number">130283</span>, <span class="number">130301</span>,</span><br><span class="line">        <span class="number">130302</span>, <span class="number">130303</span>, <span class="number">130304</span>, <span class="number">130321</span>, <span class="number">130322</span>, <span class="number">130323</span>, <span class="number">130324</span>, <span class="number">130401</span>, <span class="number">130402</span>, <span class="number">130403</span>, <span class="number">130404</span>, <span class="number">130406</span>,</span><br><span class="line">        <span class="number">130421</span>, <span class="number">130423</span>, <span class="number">130424</span>, <span class="number">130425</span>, <span class="number">130426</span>, <span class="number">130427</span>, <span class="number">130428</span>, <span class="number">130429</span>, <span class="number">130430</span>, <span class="number">130431</span>, <span class="number">130432</span>, <span class="number">130433</span>,</span><br><span class="line">        <span class="number">130434</span>, <span class="number">130435</span>, <span class="number">130481</span>, <span class="number">130501</span>, <span class="number">130502</span>, <span class="number">130503</span>, <span class="number">130521</span>, <span class="number">130522</span>, <span class="number">130523</span>, <span class="number">130524</span>, <span class="number">130525</span>, <span class="number">130526</span>,</span><br><span class="line">        <span class="number">130527</span>, <span class="number">130528</span>, <span class="number">130529</span>, <span class="number">130530</span>, <span class="number">130531</span>, <span class="number">130532</span>, <span class="number">130533</span>, <span class="number">130534</span>, <span class="number">130535</span>, <span class="number">130581</span>, <span class="number">130582</span>, <span class="number">130601</span>,</span><br><span class="line">        <span class="number">130602</span>, <span class="number">130603</span>, <span class="number">130604</span>, <span class="number">130621</span>, <span class="number">130622</span>, <span class="number">130623</span>, <span class="number">130624</span>, <span class="number">130625</span>, <span class="number">130626</span>, <span class="number">130627</span>, <span class="number">130628</span>, <span class="number">130629</span>,</span><br><span class="line">        <span class="number">130630</span>, <span class="number">130631</span>, <span class="number">130632</span>, <span class="number">130633</span>, <span class="number">130634</span>, <span class="number">130635</span>, <span class="number">130636</span>, <span class="number">130637</span>, <span class="number">130638</span>, <span class="number">130681</span>, <span class="number">130682</span>, <span class="number">130683</span>,</span><br><span class="line">        <span class="number">130684</span>, <span class="number">130701</span>, <span class="number">130702</span>, <span class="number">130703</span>, <span class="number">130705</span>, <span class="number">130706</span>, <span class="number">130721</span>, <span class="number">130722</span>, <span class="number">130723</span>, <span class="number">130724</span>, <span class="number">130725</span>, <span class="number">130726</span>,</span><br><span class="line">        <span class="number">130727</span>, <span class="number">130728</span>, <span class="number">130729</span>, <span class="number">130730</span>, <span class="number">130731</span>, <span class="number">130732</span>, <span class="number">130733</span>, <span class="number">130801</span>, <span class="number">130802</span>, <span class="number">130803</span>, <span class="number">130804</span>, <span class="number">130821</span>,</span><br><span class="line">        <span class="number">130822</span>, <span class="number">130823</span>, <span class="number">130824</span>, <span class="number">130825</span>, <span class="number">130826</span>, <span class="number">130827</span>, <span class="number">130828</span>, <span class="number">130901</span>, <span class="number">130902</span>, <span class="number">130903</span>, <span class="number">130921</span>, <span class="number">130922</span>,</span><br><span class="line">        <span class="number">130923</span>, <span class="number">130924</span>, <span class="number">130925</span>, <span class="number">130926</span>, <span class="number">130927</span>, <span class="number">130928</span>, <span class="number">130929</span>, <span class="number">130930</span>, <span class="number">130981</span>, <span class="number">130982</span>, <span class="number">130983</span>, <span class="number">130984</span>,</span><br><span class="line">        <span class="number">131001</span>, <span class="number">131002</span>, <span class="number">131003</span>, <span class="number">131022</span>, <span class="number">131023</span>, <span class="number">131024</span>, <span class="number">131025</span>, <span class="number">131026</span>, <span class="number">131028</span>, <span class="number">131081</span>, <span class="number">131082</span>, <span class="number">131101</span>,</span><br><span class="line">        <span class="number">131102</span>, <span class="number">131121</span>, <span class="number">131122</span>, <span class="number">131123</span>, <span class="number">131124</span>, <span class="number">131125</span>, <span class="number">131126</span>, <span class="number">131127</span>, <span class="number">131128</span>, <span class="number">131181</span>, <span class="number">131182</span>, <span class="number">140101</span>,</span><br><span class="line">        <span class="number">140105</span>, <span class="number">140106</span>, <span class="number">140107</span>, <span class="number">140108</span>, <span class="number">140109</span>, <span class="number">140110</span>, <span class="number">140121</span>, <span class="number">140122</span>, <span class="number">140123</span>, <span class="number">140181</span>, <span class="number">140201</span>, <span class="number">140202</span>,</span><br><span class="line">        <span class="number">140203</span>, <span class="number">140211</span>, <span class="number">140212</span>, <span class="number">140221</span>, <span class="number">140222</span>, <span class="number">140223</span>, <span class="number">140224</span>, <span class="number">140225</span>, <span class="number">140226</span>, <span class="number">140227</span>, <span class="number">140301</span>, <span class="number">140302</span>,</span><br><span class="line">        <span class="number">140303</span>, <span class="number">140311</span>, <span class="number">140321</span>, <span class="number">140322</span>, <span class="number">140401</span>, <span class="number">140402</span>, <span class="number">140411</span>, <span class="number">140421</span>, <span class="number">140423</span>, <span class="number">140424</span>, <span class="number">140425</span>, <span class="number">140426</span>,</span><br><span class="line">        <span class="number">140427</span>, <span class="number">140428</span>, <span class="number">140429</span>, <span class="number">140430</span>, <span class="number">140431</span>, <span class="number">140481</span>, <span class="number">140501</span>, <span class="number">140502</span>, <span class="number">140521</span>, <span class="number">140522</span>, <span class="number">140524</span>, <span class="number">140525</span>,</span><br><span class="line">        <span class="number">140581</span>, <span class="number">140601</span>, <span class="number">140602</span>, <span class="number">140603</span>, <span class="number">140621</span>, <span class="number">140622</span>, <span class="number">140623</span>, <span class="number">140624</span>, <span class="number">140701</span>, <span class="number">140702</span>, <span class="number">140721</span>, <span class="number">140722</span>,</span><br><span class="line">        <span class="number">140723</span>, <span class="number">140724</span>, <span class="number">140725</span>, <span class="number">140726</span>, <span class="number">140727</span>, <span class="number">140728</span>, <span class="number">140729</span>, <span class="number">140781</span>, <span class="number">140801</span>, <span class="number">140802</span>, <span class="number">140821</span>, <span class="number">140822</span>,</span><br><span class="line">        <span class="number">140823</span>, <span class="number">140824</span>, <span class="number">140825</span>, <span class="number">140826</span>, <span class="number">140827</span>, <span class="number">140828</span>, <span class="number">140829</span>, <span class="number">140830</span>, <span class="number">140881</span>, <span class="number">140882</span>, <span class="number">140901</span>, <span class="number">140902</span>,</span><br><span class="line">        <span class="number">140921</span>, <span class="number">140922</span>, <span class="number">140923</span>, <span class="number">140924</span>, <span class="number">140925</span>, <span class="number">140926</span>, <span class="number">140927</span>, <span class="number">140928</span>, <span class="number">140929</span>, <span class="number">140930</span>, <span class="number">140931</span>, <span class="number">140932</span>,</span><br><span class="line">        <span class="number">140981</span>, <span class="number">141001</span>, <span class="number">141002</span>, <span class="number">141021</span>, <span class="number">141022</span>, <span class="number">141023</span>, <span class="number">141024</span>, <span class="number">141025</span>, <span class="number">141026</span>, <span class="number">141027</span>, <span class="number">141028</span>, <span class="number">141029</span>,</span><br><span class="line">        <span class="number">141030</span>, <span class="number">141031</span>, <span class="number">141032</span>, <span class="number">141033</span>, <span class="number">141034</span>, <span class="number">141081</span>, <span class="number">141082</span>, <span class="number">141101</span>, <span class="number">141102</span>, <span class="number">141121</span>, <span class="number">141122</span>, <span class="number">141123</span>,</span><br><span class="line">        <span class="number">141124</span>, <span class="number">141125</span>, <span class="number">141126</span>, <span class="number">141127</span>, <span class="number">141128</span>, <span class="number">141129</span>, <span class="number">141130</span>, <span class="number">141181</span>, <span class="number">141182</span>, <span class="number">150101</span>, <span class="number">150102</span>, <span class="number">150103</span>,</span><br><span class="line">        <span class="number">150104</span>, <span class="number">150105</span>, <span class="number">150121</span>, <span class="number">150122</span>, <span class="number">150123</span>, <span class="number">150124</span>, <span class="number">150125</span>, <span class="number">150201</span>, <span class="number">150202</span>, <span class="number">150203</span>, <span class="number">150204</span>, <span class="number">150205</span>,</span><br><span class="line">        <span class="number">150206</span>, <span class="number">150207</span>, <span class="number">150221</span>, <span class="number">150222</span>, <span class="number">150223</span>, <span class="number">150301</span>, <span class="number">150302</span>, <span class="number">150303</span>, <span class="number">150304</span>, <span class="number">150401</span>, <span class="number">150402</span>, <span class="number">150403</span>,</span><br><span class="line">        <span class="number">150404</span>, <span class="number">150421</span>, <span class="number">150422</span>, <span class="number">150423</span>, <span class="number">150424</span>, <span class="number">150425</span>, <span class="number">150426</span>, <span class="number">150428</span>, <span class="number">150429</span>, <span class="number">150430</span>, <span class="number">150501</span>, <span class="number">150502</span>,</span><br><span class="line">        <span class="number">150521</span>, <span class="number">150522</span>, <span class="number">150523</span>, <span class="number">150524</span>, <span class="number">150525</span>, <span class="number">150526</span>, <span class="number">150581</span>, <span class="number">150601</span>, <span class="number">150602</span>, <span class="number">150621</span>, <span class="number">150622</span>, <span class="number">150623</span>,</span><br><span class="line">        <span class="number">150624</span>, <span class="number">150625</span>, <span class="number">150626</span>, <span class="number">150627</span>, <span class="number">150701</span>, <span class="number">150702</span>, <span class="number">150721</span>, <span class="number">150722</span>, <span class="number">150723</span>, <span class="number">150724</span>, <span class="number">150725</span>, <span class="number">150726</span>,</span><br><span class="line">        <span class="number">150727</span>, <span class="number">150781</span>, <span class="number">150782</span>, <span class="number">150783</span>, <span class="number">150784</span>, <span class="number">150785</span>, <span class="number">150801</span>, <span class="number">150802</span>, <span class="number">150821</span>, <span class="number">150822</span>, <span class="number">150823</span>, <span class="number">150824</span>,</span><br><span class="line">        <span class="number">150825</span>, <span class="number">150826</span>, <span class="number">150901</span>, <span class="number">150902</span>, <span class="number">150921</span>, <span class="number">150922</span>, <span class="number">150923</span>, <span class="number">150924</span>, <span class="number">150925</span>, <span class="number">150926</span>, <span class="number">150927</span>, <span class="number">150928</span>,</span><br><span class="line">        <span class="number">150929</span>, <span class="number">150981</span>, <span class="number">152201</span>, <span class="number">152202</span>, <span class="number">152221</span>, <span class="number">152222</span>, <span class="number">152223</span>, <span class="number">152224</span>, <span class="number">152501</span>, <span class="number">152502</span>, <span class="number">152522</span>, <span class="number">152523</span>,</span><br><span class="line">        <span class="number">152524</span>, <span class="number">152525</span>, <span class="number">152526</span>, <span class="number">152527</span>, <span class="number">152528</span>, <span class="number">152529</span>, <span class="number">152530</span>, <span class="number">152531</span>, <span class="number">152921</span>, <span class="number">152922</span>, <span class="number">152923</span>, <span class="number">210101</span>,</span><br><span class="line">        <span class="number">210102</span>, <span class="number">210103</span>, <span class="number">210104</span>, <span class="number">210105</span>, <span class="number">210106</span>, <span class="number">210111</span>, <span class="number">210112</span>, <span class="number">210113</span>, <span class="number">210114</span>, <span class="number">210122</span>, <span class="number">210123</span>, <span class="number">210124</span>,</span><br><span class="line">        <span class="number">210181</span>, <span class="number">210201</span>, <span class="number">210202</span>, <span class="number">210203</span>, <span class="number">210204</span>, <span class="number">210211</span>, <span class="number">210212</span>, <span class="number">210213</span>, <span class="number">210224</span>, <span class="number">210281</span>, <span class="number">210282</span>, <span class="number">210283</span>,</span><br><span class="line">        <span class="number">210301</span>, <span class="number">210302</span>, <span class="number">210303</span>, <span class="number">210304</span>, <span class="number">210311</span>, <span class="number">210321</span>, <span class="number">210323</span>, <span class="number">210381</span>, <span class="number">210401</span>, <span class="number">210402</span>, <span class="number">210403</span>, <span class="number">210404</span>,</span><br><span class="line">        <span class="number">210411</span>, <span class="number">210421</span>, <span class="number">210422</span>, <span class="number">210423</span>, <span class="number">210501</span>, <span class="number">210502</span>, <span class="number">210503</span>, <span class="number">210504</span>, <span class="number">210505</span>, <span class="number">210521</span>, <span class="number">210522</span>, <span class="number">210601</span>,</span><br><span class="line">        <span class="number">210602</span>, <span class="number">210603</span>, <span class="number">210604</span>, <span class="number">210624</span>, <span class="number">210681</span>, <span class="number">210682</span>, <span class="number">210701</span>, <span class="number">210702</span>, <span class="number">210703</span>, <span class="number">210711</span>, <span class="number">210726</span>, <span class="number">210727</span>,</span><br><span class="line">        <span class="number">210781</span>, <span class="number">210782</span>, <span class="number">210801</span>, <span class="number">210802</span>, <span class="number">210803</span>, <span class="number">210804</span>, <span class="number">210811</span>, <span class="number">210881</span>, <span class="number">210882</span>, <span class="number">210901</span>, <span class="number">210902</span>, <span class="number">210903</span>,</span><br><span class="line">        <span class="number">210904</span>, <span class="number">210905</span>, <span class="number">210911</span>, <span class="number">210921</span>, <span class="number">210922</span>, <span class="number">211001</span>, <span class="number">211002</span>, <span class="number">211003</span>, <span class="number">211004</span>, <span class="number">211005</span>, <span class="number">211011</span>, <span class="number">211021</span>,</span><br><span class="line">        <span class="number">211081</span>, <span class="number">211101</span>, <span class="number">211102</span>, <span class="number">211103</span>, <span class="number">211121</span>, <span class="number">211122</span>, <span class="number">211201</span>, <span class="number">211202</span>, <span class="number">211204</span>, <span class="number">211221</span>, <span class="number">211223</span>, <span class="number">211224</span>,</span><br><span class="line">        <span class="number">211281</span>, <span class="number">211282</span>, <span class="number">211301</span>, <span class="number">211302</span>, <span class="number">211303</span>, <span class="number">211321</span>, <span class="number">211322</span>, <span class="number">211324</span>, <span class="number">211381</span>, <span class="number">211382</span>, <span class="number">211401</span>, <span class="number">211402</span>,</span><br><span class="line">        <span class="number">211403</span>, <span class="number">211404</span>, <span class="number">211421</span>, <span class="number">211422</span>, <span class="number">211481</span>, <span class="number">220101</span>, <span class="number">220102</span>, <span class="number">220103</span>, <span class="number">220104</span>, <span class="number">220105</span>, <span class="number">220106</span>, <span class="number">220112</span>,</span><br><span class="line">        <span class="number">220122</span>, <span class="number">220181</span>, <span class="number">220182</span>, <span class="number">220183</span>, <span class="number">220201</span>, <span class="number">220202</span>, <span class="number">220203</span>, <span class="number">220204</span>, <span class="number">220211</span>, <span class="number">220221</span>, <span class="number">220281</span>, <span class="number">220282</span>,</span><br><span class="line">        <span class="number">220283</span>, <span class="number">220284</span>, <span class="number">220301</span>, <span class="number">220302</span>, <span class="number">220303</span>, <span class="number">220322</span>, <span class="number">220323</span>, <span class="number">220381</span>, <span class="number">220382</span>, <span class="number">220401</span>, <span class="number">220402</span>, <span class="number">220403</span>,</span><br><span class="line">        <span class="number">220421</span>, <span class="number">220422</span>, <span class="number">220501</span>, <span class="number">220502</span>, <span class="number">220503</span>, <span class="number">220521</span>, <span class="number">220523</span>, <span class="number">220524</span>, <span class="number">220581</span>, <span class="number">220582</span>, <span class="number">220601</span>, <span class="number">220602</span>,</span><br><span class="line">        <span class="number">220605</span>, <span class="number">220621</span>, <span class="number">220622</span>, <span class="number">220623</span>, <span class="number">220681</span>, <span class="number">220701</span>, <span class="number">220702</span>, <span class="number">220721</span>, <span class="number">220722</span>, <span class="number">220723</span>, <span class="number">220724</span>, <span class="number">220801</span>,</span><br><span class="line">        <span class="number">220802</span>, <span class="number">220821</span>, <span class="number">220822</span>, <span class="number">220881</span>, <span class="number">220882</span>, <span class="number">222401</span>, <span class="number">222402</span>, <span class="number">222403</span>, <span class="number">222404</span>, <span class="number">222405</span>, <span class="number">222406</span>, <span class="number">222424</span>,</span><br><span class="line">        <span class="number">222426</span>, <span class="number">230101</span>, <span class="number">230102</span>, <span class="number">230103</span>, <span class="number">230104</span>, <span class="number">230108</span>, <span class="number">230109</span>, <span class="number">230110</span>, <span class="number">230111</span>, <span class="number">230112</span>, <span class="number">230123</span>, <span class="number">230124</span>,</span><br><span class="line">        <span class="number">230125</span>, <span class="number">230126</span>, <span class="number">230127</span>, <span class="number">230128</span>, <span class="number">230129</span>, <span class="number">230182</span>, <span class="number">230183</span>, <span class="number">230184</span>, <span class="number">230201</span>, <span class="number">230202</span>, <span class="number">230203</span>, <span class="number">230204</span>,</span><br><span class="line">        <span class="number">230205</span>, <span class="number">230206</span>, <span class="number">230207</span>, <span class="number">230208</span>, <span class="number">230221</span>, <span class="number">230223</span>, <span class="number">230224</span>, <span class="number">230225</span>, <span class="number">230227</span>, <span class="number">230229</span>, <span class="number">230230</span>, <span class="number">230231</span>,</span><br><span class="line">        <span class="number">230281</span>, <span class="number">230301</span>, <span class="number">230302</span>, <span class="number">230303</span>, <span class="number">230304</span>, <span class="number">230305</span>, <span class="number">230306</span>, <span class="number">230307</span>, <span class="number">230321</span>, <span class="number">230381</span>, <span class="number">230382</span>, <span class="number">230401</span>,</span><br><span class="line">        <span class="number">230402</span>, <span class="number">230403</span>, <span class="number">230404</span>, <span class="number">230405</span>, <span class="number">230406</span>, <span class="number">230407</span>, <span class="number">230421</span>, <span class="number">230422</span>, <span class="number">230501</span>, <span class="number">230502</span>, <span class="number">230503</span>, <span class="number">230505</span>,</span><br><span class="line">        <span class="number">230506</span>, <span class="number">230521</span>, <span class="number">230522</span>, <span class="number">230523</span>, <span class="number">230524</span>, <span class="number">230601</span>, <span class="number">230602</span>, <span class="number">230603</span>, <span class="number">230604</span>, <span class="number">230605</span>, <span class="number">230606</span>, <span class="number">230621</span>,</span><br><span class="line">        <span class="number">230622</span>, <span class="number">230623</span>, <span class="number">230624</span>, <span class="number">230701</span>, <span class="number">230702</span>, <span class="number">230703</span>, <span class="number">230704</span>, <span class="number">230705</span>, <span class="number">230706</span>, <span class="number">230707</span>, <span class="number">230708</span>, <span class="number">230709</span>,</span><br><span class="line">        <span class="number">230710</span>, <span class="number">230711</span>, <span class="number">230712</span>, <span class="number">230713</span>, <span class="number">230714</span>, <span class="number">230715</span>, <span class="number">230716</span>, <span class="number">230722</span>, <span class="number">230781</span>, <span class="number">230801</span>, <span class="number">230803</span>, <span class="number">230804</span>,</span><br><span class="line">        <span class="number">230805</span>, <span class="number">230811</span>, <span class="number">230822</span>, <span class="number">230826</span>, <span class="number">230828</span>, <span class="number">230833</span>, <span class="number">230881</span>, <span class="number">230882</span>, <span class="number">230901</span>, <span class="number">230902</span>, <span class="number">230903</span>, <span class="number">230904</span>,</span><br><span class="line">        <span class="number">230921</span>, <span class="number">231001</span>, <span class="number">231002</span>, <span class="number">231003</span>, <span class="number">231004</span>, <span class="number">231005</span>, <span class="number">231024</span>, <span class="number">231025</span>, <span class="number">231081</span>, <span class="number">231083</span>, <span class="number">231084</span>, <span class="number">231085</span>,</span><br><span class="line">        <span class="number">231101</span>, <span class="number">231102</span>, <span class="number">231121</span>, <span class="number">231123</span>, <span class="number">231124</span>, <span class="number">231181</span>, <span class="number">231182</span>, <span class="number">231201</span>, <span class="number">231202</span>, <span class="number">231221</span>, <span class="number">231222</span>, <span class="number">231223</span>,</span><br><span class="line">        <span class="number">231224</span>, <span class="number">231225</span>, <span class="number">231226</span>, <span class="number">231281</span>, <span class="number">231282</span>, <span class="number">231283</span>, <span class="number">232721</span>, <span class="number">232722</span>, <span class="number">232723</span>, <span class="number">310101</span>, <span class="number">310104</span>, <span class="number">310105</span>,</span><br><span class="line">        <span class="number">310106</span>, <span class="number">310107</span>, <span class="number">310108</span>, <span class="number">310109</span>, <span class="number">310110</span>, <span class="number">310112</span>, <span class="number">310113</span>, <span class="number">310114</span>, <span class="number">310115</span>, <span class="number">310116</span>, <span class="number">310117</span>, <span class="number">310118</span>,</span><br><span class="line">        <span class="number">310120</span>, <span class="number">310230</span>, <span class="number">320101</span>, <span class="number">320102</span>, <span class="number">320103</span>, <span class="number">320104</span>, <span class="number">320105</span>, <span class="number">320106</span>, <span class="number">320107</span>, <span class="number">320111</span>, <span class="number">320113</span>, <span class="number">320114</span>,</span><br><span class="line">        <span class="number">320115</span>, <span class="number">320116</span>, <span class="number">320124</span>, <span class="number">320125</span>, <span class="number">320201</span>, <span class="number">320202</span>, <span class="number">320203</span>, <span class="number">320204</span>, <span class="number">320205</span>, <span class="number">320206</span>, <span class="number">320211</span>, <span class="number">320281</span>,</span><br><span class="line">        <span class="number">320282</span>, <span class="number">320301</span>, <span class="number">320302</span>, <span class="number">320303</span>, <span class="number">320305</span>, <span class="number">320311</span>, <span class="number">320312</span>, <span class="number">320321</span>, <span class="number">320322</span>, <span class="number">320324</span>, <span class="number">320381</span>, <span class="number">320382</span>,</span><br><span class="line">        <span class="number">320401</span>, <span class="number">320402</span>, <span class="number">320404</span>, <span class="number">320405</span>, <span class="number">320411</span>, <span class="number">320412</span>, <span class="number">320481</span>, <span class="number">320482</span>, <span class="number">320501</span>, <span class="number">320505</span>, <span class="number">320506</span>, <span class="number">320507</span>,</span><br><span class="line">        <span class="number">320508</span>, <span class="number">320509</span>, <span class="number">320581</span>, <span class="number">320582</span>, <span class="number">320583</span>, <span class="number">320585</span>, <span class="number">320601</span>, <span class="number">320602</span>, <span class="number">320611</span>, <span class="number">320612</span>, <span class="number">320621</span>, <span class="number">320623</span>,</span><br><span class="line">        <span class="number">320681</span>, <span class="number">320682</span>, <span class="number">320684</span>, <span class="number">320701</span>, <span class="number">320703</span>, <span class="number">320705</span>, <span class="number">320706</span>, <span class="number">320721</span>, <span class="number">320722</span>, <span class="number">320723</span>, <span class="number">320724</span>, <span class="number">320801</span>,</span><br><span class="line">        <span class="number">320802</span>, <span class="number">320803</span>, <span class="number">320804</span>, <span class="number">320811</span>, <span class="number">320826</span>, <span class="number">320829</span>, <span class="number">320830</span>, <span class="number">320831</span>, <span class="number">320901</span>, <span class="number">320902</span>, <span class="number">320903</span>, <span class="number">320921</span>,</span><br><span class="line">        <span class="number">320922</span>, <span class="number">320923</span>, <span class="number">320924</span>, <span class="number">320925</span>, <span class="number">320981</span>, <span class="number">320982</span>, <span class="number">321001</span>, <span class="number">321002</span>, <span class="number">321003</span>, <span class="number">321012</span>, <span class="number">321023</span>, <span class="number">321081</span>,</span><br><span class="line">        <span class="number">321084</span>, <span class="number">321101</span>, <span class="number">321102</span>, <span class="number">321111</span>, <span class="number">321112</span>, <span class="number">321181</span>, <span class="number">321182</span>, <span class="number">321183</span>, <span class="number">321201</span>, <span class="number">321202</span>, <span class="number">321203</span>, <span class="number">321281</span>,</span><br><span class="line">        <span class="number">321282</span>, <span class="number">321283</span>, <span class="number">321284</span>, <span class="number">321301</span>, <span class="number">321302</span>, <span class="number">321311</span>, <span class="number">321322</span>, <span class="number">321323</span>, <span class="number">321324</span>, <span class="number">330101</span>, <span class="number">330102</span>, <span class="number">330103</span>,</span><br><span class="line">        <span class="number">330104</span>, <span class="number">330105</span>, <span class="number">330106</span>, <span class="number">330108</span>, <span class="number">330109</span>, <span class="number">330110</span>, <span class="number">330122</span>, <span class="number">330127</span>, <span class="number">330182</span>, <span class="number">330183</span>, <span class="number">330185</span>, <span class="number">330201</span>,</span><br><span class="line">        <span class="number">330203</span>, <span class="number">330204</span>, <span class="number">330205</span>, <span class="number">330206</span>, <span class="number">330211</span>, <span class="number">330212</span>, <span class="number">330225</span>, <span class="number">330226</span>, <span class="number">330281</span>, <span class="number">330282</span>, <span class="number">330283</span>, <span class="number">330301</span>,</span><br><span class="line">        <span class="number">330302</span>, <span class="number">330303</span>, <span class="number">330304</span>, <span class="number">330322</span>, <span class="number">330324</span>, <span class="number">330326</span>, <span class="number">330327</span>, <span class="number">330328</span>, <span class="number">330329</span>, <span class="number">330381</span>, <span class="number">330382</span>, <span class="number">330401</span>,</span><br><span class="line">        <span class="number">330402</span>, <span class="number">330411</span>, <span class="number">330421</span>, <span class="number">330424</span>, <span class="number">330481</span>, <span class="number">330482</span>, <span class="number">330483</span>, <span class="number">330501</span>, <span class="number">330502</span>, <span class="number">330503</span>, <span class="number">330521</span>, <span class="number">330522</span>,</span><br><span class="line">        <span class="number">330523</span>, <span class="number">330601</span>, <span class="number">330602</span>, <span class="number">330621</span>, <span class="number">330624</span>, <span class="number">330681</span>, <span class="number">330682</span>, <span class="number">330683</span>, <span class="number">330701</span>, <span class="number">330702</span>, <span class="number">330703</span>, <span class="number">330723</span>,</span><br><span class="line">        <span class="number">330726</span>, <span class="number">330727</span>, <span class="number">330781</span>, <span class="number">330782</span>, <span class="number">330783</span>, <span class="number">330784</span>, <span class="number">330801</span>, <span class="number">330802</span>, <span class="number">330803</span>, <span class="number">330822</span>, <span class="number">330824</span>, <span class="number">330825</span>,</span><br><span class="line">        <span class="number">330881</span>, <span class="number">330901</span>, <span class="number">330902</span>, <span class="number">330903</span>, <span class="number">330921</span>, <span class="number">330922</span>, <span class="number">331001</span>, <span class="number">331002</span>, <span class="number">331003</span>, <span class="number">331004</span>, <span class="number">331021</span>, <span class="number">331022</span>,</span><br><span class="line">        <span class="number">331023</span>, <span class="number">331024</span>, <span class="number">331081</span>, <span class="number">331082</span>, <span class="number">331101</span>, <span class="number">331102</span>, <span class="number">331121</span>, <span class="number">331122</span>, <span class="number">331123</span>, <span class="number">331124</span>, <span class="number">331125</span>, <span class="number">331126</span>,</span><br><span class="line">        <span class="number">331127</span>, <span class="number">331181</span>, <span class="number">340101</span>, <span class="number">340102</span>, <span class="number">340103</span>, <span class="number">340104</span>, <span class="number">340111</span>, <span class="number">340121</span>, <span class="number">340122</span>, <span class="number">340123</span>, <span class="number">340124</span>, <span class="number">340181</span>,</span><br><span class="line">        <span class="number">340201</span>, <span class="number">340202</span>, <span class="number">340203</span>, <span class="number">340207</span>, <span class="number">340208</span>, <span class="number">340221</span>, <span class="number">340222</span>, <span class="number">340223</span>, <span class="number">340225</span>, <span class="number">340301</span>, <span class="number">340302</span>, <span class="number">340303</span>,</span><br><span class="line">        <span class="number">340304</span>, <span class="number">340311</span>, <span class="number">340321</span>, <span class="number">340322</span>, <span class="number">340323</span>, <span class="number">340401</span>, <span class="number">340402</span>, <span class="number">340403</span>, <span class="number">340404</span>, <span class="number">340405</span>, <span class="number">340406</span>, <span class="number">340421</span>,</span><br><span class="line">        <span class="number">340501</span>, <span class="number">340503</span>, <span class="number">340504</span>, <span class="number">340506</span>, <span class="number">340521</span>, <span class="number">340522</span>, <span class="number">340523</span>, <span class="number">340601</span>, <span class="number">340602</span>, <span class="number">340603</span>, <span class="number">340604</span>, <span class="number">340621</span>,</span><br><span class="line">        <span class="number">340701</span>, <span class="number">340702</span>, <span class="number">340703</span>, <span class="number">340711</span>, <span class="number">340721</span>, <span class="number">340801</span>, <span class="number">340802</span>, <span class="number">340803</span>, <span class="number">340811</span>, <span class="number">340822</span>, <span class="number">340823</span>, <span class="number">340824</span>,</span><br><span class="line">        <span class="number">340825</span>, <span class="number">340826</span>, <span class="number">340827</span>, <span class="number">340828</span>, <span class="number">340881</span>, <span class="number">341001</span>, <span class="number">341002</span>, <span class="number">341003</span>, <span class="number">341004</span>, <span class="number">341021</span>, <span class="number">341022</span>, <span class="number">341023</span>,</span><br><span class="line">        <span class="number">341024</span>, <span class="number">341101</span>, <span class="number">341102</span>, <span class="number">341103</span>, <span class="number">341122</span>, <span class="number">341124</span>, <span class="number">341125</span>, <span class="number">341126</span>, <span class="number">341181</span>, <span class="number">341182</span>, <span class="number">341201</span>, <span class="number">341202</span>,</span><br><span class="line">        <span class="number">341203</span>, <span class="number">341204</span>, <span class="number">341221</span>, <span class="number">341222</span>, <span class="number">341225</span>, <span class="number">341226</span>, <span class="number">341282</span>, <span class="number">341301</span>, <span class="number">341302</span>, <span class="number">341321</span>, <span class="number">341322</span>, <span class="number">341323</span>,</span><br><span class="line">        <span class="number">341324</span>, <span class="number">341501</span>, <span class="number">341502</span>, <span class="number">341503</span>, <span class="number">341521</span>, <span class="number">341522</span>, <span class="number">341523</span>, <span class="number">341524</span>, <span class="number">341525</span>, <span class="number">341601</span>, <span class="number">341602</span>, <span class="number">341621</span>,</span><br><span class="line">        <span class="number">341622</span>, <span class="number">341623</span>, <span class="number">341701</span>, <span class="number">341702</span>, <span class="number">341721</span>, <span class="number">341722</span>, <span class="number">341723</span>, <span class="number">341801</span>, <span class="number">341802</span>, <span class="number">341821</span>, <span class="number">341822</span>, <span class="number">341823</span>,</span><br><span class="line">        <span class="number">341824</span>, <span class="number">341825</span>, <span class="number">341881</span>, <span class="number">350101</span>, <span class="number">350102</span>, <span class="number">350103</span>, <span class="number">350104</span>, <span class="number">350105</span>, <span class="number">350111</span>, <span class="number">350121</span>, <span class="number">350122</span>, <span class="number">350123</span>,</span><br><span class="line">        <span class="number">350124</span>, <span class="number">350125</span>, <span class="number">350128</span>, <span class="number">350181</span>, <span class="number">350182</span>, <span class="number">350201</span>, <span class="number">350203</span>, <span class="number">350205</span>, <span class="number">350206</span>, <span class="number">350211</span>, <span class="number">350212</span>, <span class="number">350213</span>,</span><br><span class="line">        <span class="number">350301</span>, <span class="number">350302</span>, <span class="number">350303</span>, <span class="number">350304</span>, <span class="number">350305</span>, <span class="number">350322</span>, <span class="number">350401</span>, <span class="number">350402</span>, <span class="number">350403</span>, <span class="number">350421</span>, <span class="number">350423</span>, <span class="number">350424</span>,</span><br><span class="line">        <span class="number">350425</span>, <span class="number">350426</span>, <span class="number">350427</span>, <span class="number">350428</span>, <span class="number">350429</span>, <span class="number">350430</span>, <span class="number">350481</span>, <span class="number">350501</span>, <span class="number">350502</span>, <span class="number">350503</span>, <span class="number">350504</span>, <span class="number">350505</span>,</span><br><span class="line">        <span class="number">350521</span>, <span class="number">350524</span>, <span class="number">350525</span>, <span class="number">350526</span>, <span class="number">350527</span>, <span class="number">350581</span>, <span class="number">350582</span>, <span class="number">350583</span>, <span class="number">350601</span>, <span class="number">350602</span>, <span class="number">350603</span>, <span class="number">350622</span>,</span><br><span class="line">        <span class="number">350623</span>, <span class="number">350624</span>, <span class="number">350625</span>, <span class="number">350626</span>, <span class="number">350627</span>, <span class="number">350628</span>, <span class="number">350629</span>, <span class="number">350681</span>, <span class="number">350701</span>, <span class="number">350702</span>, <span class="number">350721</span>, <span class="number">350722</span>,</span><br><span class="line">        <span class="number">350723</span>, <span class="number">350724</span>, <span class="number">350725</span>, <span class="number">350781</span>, <span class="number">350782</span>, <span class="number">350783</span>, <span class="number">350784</span>, <span class="number">350801</span>, <span class="number">350802</span>, <span class="number">350821</span>, <span class="number">350822</span>, <span class="number">350823</span>,</span><br><span class="line">        <span class="number">350824</span>, <span class="number">350825</span>, <span class="number">350881</span>, <span class="number">350901</span>, <span class="number">350902</span>, <span class="number">350921</span>, <span class="number">350922</span>, <span class="number">350923</span>, <span class="number">350924</span>, <span class="number">350925</span>, <span class="number">350926</span>, <span class="number">350981</span>,</span><br><span class="line">        <span class="number">350982</span>, <span class="number">360101</span>, <span class="number">360102</span>, <span class="number">360103</span>, <span class="number">360104</span>, <span class="number">360105</span>, <span class="number">360111</span>, <span class="number">360121</span>, <span class="number">360122</span>, <span class="number">360123</span>, <span class="number">360124</span>, <span class="number">360201</span>,</span><br><span class="line">        <span class="number">360202</span>, <span class="number">360203</span>, <span class="number">360222</span>, <span class="number">360281</span>, <span class="number">360301</span>, <span class="number">360302</span>, <span class="number">360313</span>, <span class="number">360321</span>, <span class="number">360322</span>, <span class="number">360323</span>, <span class="number">360401</span>, <span class="number">360402</span>,</span><br><span class="line">        <span class="number">360403</span>, <span class="number">360421</span>, <span class="number">360423</span>, <span class="number">360424</span>, <span class="number">360425</span>, <span class="number">360426</span>, <span class="number">360427</span>, <span class="number">360428</span>, <span class="number">360429</span>, <span class="number">360430</span>, <span class="number">360481</span>, <span class="number">360482</span>,</span><br><span class="line">        <span class="number">360501</span>, <span class="number">360502</span>, <span class="number">360521</span>, <span class="number">360601</span>, <span class="number">360602</span>, <span class="number">360622</span>, <span class="number">360681</span>, <span class="number">360701</span>, <span class="number">360702</span>, <span class="number">360721</span>, <span class="number">360722</span>, <span class="number">360723</span>,</span><br><span class="line">        <span class="number">360724</span>, <span class="number">360725</span>, <span class="number">360726</span>, <span class="number">360727</span>, <span class="number">360728</span>, <span class="number">360729</span>, <span class="number">360730</span>, <span class="number">360731</span>, <span class="number">360732</span>, <span class="number">360733</span>, <span class="number">360734</span>, <span class="number">360735</span>,</span><br><span class="line">        <span class="number">360781</span>, <span class="number">360782</span>, <span class="number">360801</span>, <span class="number">360802</span>, <span class="number">360803</span>, <span class="number">360821</span>, <span class="number">360822</span>, <span class="number">360823</span>, <span class="number">360824</span>, <span class="number">360825</span>, <span class="number">360826</span>, <span class="number">360827</span>,</span><br><span class="line">        <span class="number">360828</span>, <span class="number">360829</span>, <span class="number">360830</span>, <span class="number">360881</span>, <span class="number">360901</span>, <span class="number">360902</span>, <span class="number">360921</span>, <span class="number">360922</span>, <span class="number">360923</span>, <span class="number">360924</span>, <span class="number">360925</span>, <span class="number">360926</span>,</span><br><span class="line">        <span class="number">360981</span>, <span class="number">360982</span>, <span class="number">360983</span>, <span class="number">361001</span>, <span class="number">361002</span>, <span class="number">361021</span>, <span class="number">361022</span>, <span class="number">361023</span>, <span class="number">361024</span>, <span class="number">361025</span>, <span class="number">361026</span>, <span class="number">361027</span>,</span><br><span class="line">        <span class="number">361028</span>, <span class="number">361029</span>, <span class="number">361030</span>, <span class="number">361101</span>, <span class="number">361102</span>, <span class="number">361121</span>, <span class="number">361122</span>, <span class="number">361123</span>, <span class="number">361124</span>, <span class="number">361125</span>, <span class="number">361126</span>, <span class="number">361127</span>,</span><br><span class="line">        <span class="number">361128</span>, <span class="number">361129</span>, <span class="number">361130</span>, <span class="number">361181</span>, <span class="number">370101</span>, <span class="number">370102</span>, <span class="number">370103</span>, <span class="number">370104</span>, <span class="number">370105</span>, <span class="number">370112</span>, <span class="number">370113</span>, <span class="number">370124</span>,</span><br><span class="line">        <span class="number">370125</span>, <span class="number">370126</span>, <span class="number">370181</span>, <span class="number">370201</span>, <span class="number">370202</span>, <span class="number">370203</span>, <span class="number">370205</span>, <span class="number">370211</span>, <span class="number">370212</span>, <span class="number">370213</span>, <span class="number">370214</span>, <span class="number">370281</span>,</span><br><span class="line">        <span class="number">370282</span>, <span class="number">370283</span>, <span class="number">370284</span>, <span class="number">370285</span>, <span class="number">370301</span>, <span class="number">370302</span>, <span class="number">370303</span>, <span class="number">370304</span>, <span class="number">370305</span>, <span class="number">370306</span>, <span class="number">370321</span>, <span class="number">370322</span>,</span><br><span class="line">        <span class="number">370323</span>, <span class="number">370401</span>, <span class="number">370402</span>, <span class="number">370403</span>, <span class="number">370404</span>, <span class="number">370405</span>, <span class="number">370406</span>, <span class="number">370481</span>, <span class="number">370501</span>, <span class="number">370502</span>, <span class="number">370503</span>, <span class="number">370521</span>,</span><br><span class="line">        <span class="number">370522</span>, <span class="number">370523</span>, <span class="number">370601</span>, <span class="number">370602</span>, <span class="number">370611</span>, <span class="number">370612</span>, <span class="number">370613</span>, <span class="number">370634</span>, <span class="number">370681</span>, <span class="number">370682</span>, <span class="number">370683</span>, <span class="number">370684</span>,</span><br><span class="line">        <span class="number">370685</span>, <span class="number">370686</span>, <span class="number">370687</span>, <span class="number">370701</span>, <span class="number">370702</span>, <span class="number">370703</span>, <span class="number">370704</span>, <span class="number">370705</span>, <span class="number">370724</span>, <span class="number">370725</span>, <span class="number">370781</span>, <span class="number">370782</span>,</span><br><span class="line">        <span class="number">370783</span>, <span class="number">370784</span>, <span class="number">370785</span>, <span class="number">370786</span>, <span class="number">370801</span>, <span class="number">370802</span>, <span class="number">370811</span>, <span class="number">370826</span>, <span class="number">370827</span>, <span class="number">370828</span>, <span class="number">370829</span>, <span class="number">370830</span>,</span><br><span class="line">        <span class="number">370831</span>, <span class="number">370832</span>, <span class="number">370881</span>, <span class="number">370882</span>, <span class="number">370883</span>, <span class="number">370901</span>, <span class="number">370902</span>, <span class="number">370911</span>, <span class="number">370921</span>, <span class="number">370923</span>, <span class="number">370982</span>, <span class="number">370983</span>,</span><br><span class="line">        <span class="number">371001</span>, <span class="number">371002</span>, <span class="number">371081</span>, <span class="number">371082</span>, <span class="number">371083</span>, <span class="number">371101</span>, <span class="number">371102</span>, <span class="number">371103</span>, <span class="number">371121</span>, <span class="number">371122</span>, <span class="number">371201</span>, <span class="number">371202</span>,</span><br><span class="line">        <span class="number">371203</span>, <span class="number">371301</span>, <span class="number">371302</span>, <span class="number">371311</span>, <span class="number">371312</span>, <span class="number">371321</span>, <span class="number">371322</span>, <span class="number">371323</span>, <span class="number">371324</span>, <span class="number">371325</span>, <span class="number">371326</span>, <span class="number">371327</span>,</span><br><span class="line">        <span class="number">371328</span>, <span class="number">371329</span>, <span class="number">371401</span>, <span class="number">371402</span>, <span class="number">371421</span>, <span class="number">371422</span>, <span class="number">371423</span>, <span class="number">371424</span>, <span class="number">371425</span>, <span class="number">371426</span>, <span class="number">371427</span>, <span class="number">371428</span>,</span><br><span class="line">        <span class="number">371481</span>, <span class="number">371482</span>, <span class="number">371501</span>, <span class="number">371502</span>, <span class="number">371521</span>, <span class="number">371522</span>, <span class="number">371523</span>, <span class="number">371524</span>, <span class="number">371525</span>, <span class="number">371526</span>, <span class="number">371581</span>, <span class="number">371601</span>,</span><br><span class="line">        <span class="number">371602</span>, <span class="number">371621</span>, <span class="number">371622</span>, <span class="number">371623</span>, <span class="number">371624</span>, <span class="number">371625</span>, <span class="number">371626</span>, <span class="number">371701</span>, <span class="number">371702</span>, <span class="number">371721</span>, <span class="number">371722</span>, <span class="number">371723</span>,</span><br><span class="line">        <span class="number">371724</span>, <span class="number">371725</span>, <span class="number">371726</span>, <span class="number">371727</span>, <span class="number">371728</span>, <span class="number">410101</span>, <span class="number">410102</span>, <span class="number">410103</span>, <span class="number">410104</span>, <span class="number">410105</span>, <span class="number">410106</span>, <span class="number">410108</span>,</span><br><span class="line">        <span class="number">410122</span>, <span class="number">410181</span>, <span class="number">410182</span>, <span class="number">410183</span>, <span class="number">410184</span>, <span class="number">410185</span>, <span class="number">410201</span>, <span class="number">410202</span>, <span class="number">410203</span>, <span class="number">410204</span>, <span class="number">410205</span>, <span class="number">410211</span>,</span><br><span class="line">        <span class="number">410221</span>, <span class="number">410222</span>, <span class="number">410223</span>, <span class="number">410224</span>, <span class="number">410225</span>, <span class="number">410301</span>, <span class="number">410302</span>, <span class="number">410303</span>, <span class="number">410304</span>, <span class="number">410305</span>, <span class="number">410306</span>, <span class="number">410311</span>,</span><br><span class="line">        <span class="number">410322</span>, <span class="number">410323</span>, <span class="number">410324</span>, <span class="number">410325</span>, <span class="number">410326</span>, <span class="number">410327</span>, <span class="number">410328</span>, <span class="number">410329</span>, <span class="number">410381</span>, <span class="number">410401</span>, <span class="number">410402</span>, <span class="number">410403</span>,</span><br><span class="line">        <span class="number">410404</span>, <span class="number">410411</span>, <span class="number">410421</span>, <span class="number">410422</span>, <span class="number">410423</span>, <span class="number">410425</span>, <span class="number">410481</span>, <span class="number">410482</span>, <span class="number">410501</span>, <span class="number">410502</span>, <span class="number">410503</span>, <span class="number">410505</span>,</span><br><span class="line">        <span class="number">410506</span>, <span class="number">410522</span>, <span class="number">410523</span>, <span class="number">410526</span>, <span class="number">410527</span>, <span class="number">410581</span>, <span class="number">410601</span>, <span class="number">410602</span>, <span class="number">410603</span>, <span class="number">410611</span>, <span class="number">410621</span>, <span class="number">410622</span>,</span><br><span class="line">        <span class="number">410701</span>, <span class="number">410702</span>, <span class="number">410703</span>, <span class="number">410704</span>, <span class="number">410711</span>, <span class="number">410721</span>, <span class="number">410724</span>, <span class="number">410725</span>, <span class="number">410726</span>, <span class="number">410727</span>, <span class="number">410728</span>, <span class="number">410781</span>,</span><br><span class="line">        <span class="number">410782</span>, <span class="number">410801</span>, <span class="number">410802</span>, <span class="number">410803</span>, <span class="number">410804</span>, <span class="number">410811</span>, <span class="number">410821</span>, <span class="number">410822</span>, <span class="number">410823</span>, <span class="number">410825</span>, <span class="number">410882</span>, <span class="number">410883</span>,</span><br><span class="line">        <span class="number">410901</span>, <span class="number">410902</span>, <span class="number">410922</span>, <span class="number">410923</span>, <span class="number">410926</span>, <span class="number">410927</span>, <span class="number">410928</span>, <span class="number">411001</span>, <span class="number">411002</span>, <span class="number">411023</span>, <span class="number">411024</span>, <span class="number">411025</span>,</span><br><span class="line">        <span class="number">411081</span>, <span class="number">411082</span>, <span class="number">411101</span>, <span class="number">411102</span>, <span class="number">411103</span>, <span class="number">411104</span>, <span class="number">411121</span>, <span class="number">411122</span>, <span class="number">411201</span>, <span class="number">411202</span>, <span class="number">411221</span>, <span class="number">411222</span>,</span><br><span class="line">        <span class="number">411224</span>, <span class="number">411281</span>, <span class="number">411282</span>, <span class="number">411301</span>, <span class="number">411302</span>, <span class="number">411303</span>, <span class="number">411321</span>, <span class="number">411322</span>, <span class="number">411323</span>, <span class="number">411324</span>, <span class="number">411325</span>, <span class="number">411326</span>,</span><br><span class="line">        <span class="number">411327</span>, <span class="number">411328</span>, <span class="number">411329</span>, <span class="number">411330</span>, <span class="number">411381</span>, <span class="number">411401</span>, <span class="number">411402</span>, <span class="number">411403</span>, <span class="number">411421</span>, <span class="number">411422</span>, <span class="number">411423</span>, <span class="number">411424</span>,</span><br><span class="line">        <span class="number">411425</span>, <span class="number">411426</span>, <span class="number">411481</span>, <span class="number">411501</span>, <span class="number">411502</span>, <span class="number">411503</span>, <span class="number">411521</span>, <span class="number">411522</span>, <span class="number">411523</span>, <span class="number">411524</span>, <span class="number">411525</span>, <span class="number">411526</span>,</span><br><span class="line">        <span class="number">411527</span>, <span class="number">411528</span>, <span class="number">411601</span>, <span class="number">411602</span>, <span class="number">411621</span>, <span class="number">411622</span>, <span class="number">411623</span>, <span class="number">411624</span>, <span class="number">411625</span>, <span class="number">411626</span>, <span class="number">411627</span>, <span class="number">411628</span>,</span><br><span class="line">        <span class="number">411681</span>, <span class="number">411701</span>, <span class="number">411702</span>, <span class="number">411721</span>, <span class="number">411722</span>, <span class="number">411723</span>, <span class="number">411724</span>, <span class="number">411725</span>, <span class="number">411726</span>, <span class="number">411727</span>, <span class="number">411728</span>, <span class="number">411729</span>,</span><br><span class="line">        <span class="number">419001</span>, <span class="number">420101</span>, <span class="number">420102</span>, <span class="number">420103</span>, <span class="number">420104</span>, <span class="number">420105</span>, <span class="number">420106</span>, <span class="number">420107</span>, <span class="number">420111</span>, <span class="number">420112</span>, <span class="number">420113</span>, <span class="number">420114</span>,</span><br><span class="line">        <span class="number">420115</span>, <span class="number">420116</span>, <span class="number">420117</span>, <span class="number">420201</span>, <span class="number">420202</span>, <span class="number">420203</span>, <span class="number">420204</span>, <span class="number">420205</span>, <span class="number">420222</span>, <span class="number">420281</span>, <span class="number">420301</span>, <span class="number">420302</span>,</span><br><span class="line">        <span class="number">420303</span>, <span class="number">420321</span>, <span class="number">420322</span>, <span class="number">420323</span>, <span class="number">420324</span>, <span class="number">420325</span>, <span class="number">420381</span>, <span class="number">420501</span>, <span class="number">420502</span>, <span class="number">420503</span>, <span class="number">420504</span>, <span class="number">420505</span>,</span><br><span class="line">        <span class="number">420506</span>, <span class="number">420525</span>, <span class="number">420526</span>, <span class="number">420527</span>, <span class="number">420528</span>, <span class="number">420529</span>, <span class="number">420581</span>, <span class="number">420582</span>, <span class="number">420583</span>, <span class="number">420601</span>, <span class="number">420602</span>, <span class="number">420606</span>,</span><br><span class="line">        <span class="number">420607</span>, <span class="number">420624</span>, <span class="number">420625</span>, <span class="number">420626</span>, <span class="number">420682</span>, <span class="number">420683</span>, <span class="number">420684</span>, <span class="number">420701</span>, <span class="number">420702</span>, <span class="number">420703</span>, <span class="number">420704</span>, <span class="number">420801</span>,</span><br><span class="line">        <span class="number">420802</span>, <span class="number">420804</span>, <span class="number">420821</span>, <span class="number">420822</span>, <span class="number">420881</span>, <span class="number">420901</span>, <span class="number">420902</span>, <span class="number">420921</span>, <span class="number">420922</span>, <span class="number">420923</span>, <span class="number">420981</span>, <span class="number">420982</span>,</span><br><span class="line">        <span class="number">420984</span>, <span class="number">421001</span>, <span class="number">421002</span>, <span class="number">421003</span>, <span class="number">421022</span>, <span class="number">421023</span>, <span class="number">421024</span>, <span class="number">421081</span>, <span class="number">421083</span>, <span class="number">421087</span>, <span class="number">421101</span>, <span class="number">421102</span>,</span><br><span class="line">        <span class="number">421121</span>, <span class="number">421122</span>, <span class="number">421123</span>, <span class="number">421124</span>, <span class="number">421125</span>, <span class="number">421126</span>, <span class="number">421127</span>, <span class="number">421181</span>, <span class="number">421182</span>, <span class="number">421201</span>, <span class="number">421202</span>, <span class="number">421221</span>,</span><br><span class="line">        <span class="number">421222</span>, <span class="number">421223</span>, <span class="number">421224</span>, <span class="number">421281</span>, <span class="number">421301</span>, <span class="number">421303</span>, <span class="number">421321</span>, <span class="number">421381</span>, <span class="number">422801</span>, <span class="number">422802</span>, <span class="number">422822</span>, <span class="number">422823</span>,</span><br><span class="line">        <span class="number">422825</span>, <span class="number">422826</span>, <span class="number">422827</span>, <span class="number">422828</span>, <span class="number">429004</span>, <span class="number">429005</span>, <span class="number">429006</span>, <span class="number">429021</span>, <span class="number">430101</span>, <span class="number">430102</span>, <span class="number">430103</span>, <span class="number">430104</span>,</span><br><span class="line">        <span class="number">430105</span>, <span class="number">430111</span>, <span class="number">430112</span>, <span class="number">430121</span>, <span class="number">430124</span>, <span class="number">430181</span>, <span class="number">430201</span>, <span class="number">430202</span>, <span class="number">430203</span>, <span class="number">430204</span>, <span class="number">430211</span>, <span class="number">430221</span>,</span><br><span class="line">        <span class="number">430223</span>, <span class="number">430224</span>, <span class="number">430225</span>, <span class="number">430281</span>, <span class="number">430301</span>, <span class="number">430302</span>, <span class="number">430304</span>, <span class="number">430321</span>, <span class="number">430381</span>, <span class="number">430382</span>, <span class="number">430401</span>, <span class="number">430405</span>,</span><br><span class="line">        <span class="number">430406</span>, <span class="number">430407</span>, <span class="number">430408</span>, <span class="number">430412</span>, <span class="number">430421</span>, <span class="number">430422</span>, <span class="number">430423</span>, <span class="number">430424</span>, <span class="number">430426</span>, <span class="number">430481</span>, <span class="number">430482</span>, <span class="number">430501</span>,</span><br><span class="line">        <span class="number">430502</span>, <span class="number">430503</span>, <span class="number">430511</span>, <span class="number">430521</span>, <span class="number">430522</span>, <span class="number">430523</span>, <span class="number">430524</span>, <span class="number">430525</span>, <span class="number">430527</span>, <span class="number">430528</span>, <span class="number">430529</span>, <span class="number">430581</span>,</span><br><span class="line">        <span class="number">430601</span>, <span class="number">430602</span>, <span class="number">430603</span>, <span class="number">430611</span>, <span class="number">430621</span>, <span class="number">430623</span>, <span class="number">430624</span>, <span class="number">430626</span>, <span class="number">430681</span>, <span class="number">430682</span>, <span class="number">430701</span>, <span class="number">430702</span>,</span><br><span class="line">        <span class="number">430703</span>, <span class="number">430721</span>, <span class="number">430722</span>, <span class="number">430723</span>, <span class="number">430724</span>, <span class="number">430725</span>, <span class="number">430726</span>, <span class="number">430781</span>, <span class="number">430801</span>, <span class="number">430802</span>, <span class="number">430811</span>, <span class="number">430821</span>,</span><br><span class="line">        <span class="number">430822</span>, <span class="number">430901</span>, <span class="number">430902</span>, <span class="number">430903</span>, <span class="number">430921</span>, <span class="number">430922</span>, <span class="number">430923</span>, <span class="number">430981</span>, <span class="number">431001</span>, <span class="number">431002</span>, <span class="number">431003</span>, <span class="number">431021</span>,</span><br><span class="line">        <span class="number">431022</span>, <span class="number">431023</span>, <span class="number">431024</span>, <span class="number">431025</span>, <span class="number">431026</span>, <span class="number">431027</span>, <span class="number">431028</span>, <span class="number">431081</span>, <span class="number">431101</span>, <span class="number">431102</span>, <span class="number">431103</span>, <span class="number">431121</span>,</span><br><span class="line">        <span class="number">431122</span>, <span class="number">431123</span>, <span class="number">431124</span>, <span class="number">431125</span>, <span class="number">431126</span>, <span class="number">431127</span>, <span class="number">431128</span>, <span class="number">431129</span>, <span class="number">431201</span>, <span class="number">431202</span>, <span class="number">431221</span>, <span class="number">431222</span>,</span><br><span class="line">        <span class="number">431223</span>, <span class="number">431224</span>, <span class="number">431225</span>, <span class="number">431226</span>, <span class="number">431227</span>, <span class="number">431228</span>, <span class="number">431229</span>, <span class="number">431230</span>, <span class="number">431281</span>, <span class="number">431301</span>, <span class="number">431302</span>, <span class="number">431321</span>,</span><br><span class="line">        <span class="number">431322</span>, <span class="number">431381</span>, <span class="number">431382</span>, <span class="number">433101</span>, <span class="number">433122</span>, <span class="number">433123</span>, <span class="number">433124</span>, <span class="number">433125</span>, <span class="number">433126</span>, <span class="number">433127</span>, <span class="number">433130</span>, <span class="number">440101</span>,</span><br><span class="line">        <span class="number">440103</span>, <span class="number">440104</span>, <span class="number">440105</span>, <span class="number">440106</span>, <span class="number">440111</span>, <span class="number">440112</span>, <span class="number">440113</span>, <span class="number">440114</span>, <span class="number">440115</span>, <span class="number">440116</span>, <span class="number">440183</span>, <span class="number">440184</span>,</span><br><span class="line">        <span class="number">440201</span>, <span class="number">440203</span>, <span class="number">440204</span>, <span class="number">440205</span>, <span class="number">440222</span>, <span class="number">440224</span>, <span class="number">440229</span>, <span class="number">440232</span>, <span class="number">440233</span>, <span class="number">440281</span>, <span class="number">440282</span>, <span class="number">440301</span>,</span><br><span class="line">        <span class="number">440303</span>, <span class="number">440304</span>, <span class="number">440305</span>, <span class="number">440306</span>, <span class="number">440307</span>, <span class="number">440308</span>, <span class="number">440401</span>, <span class="number">440402</span>, <span class="number">440403</span>, <span class="number">440404</span>, <span class="number">440501</span>, <span class="number">440507</span>,</span><br><span class="line">        <span class="number">440511</span>, <span class="number">440512</span>, <span class="number">440513</span>, <span class="number">440514</span>, <span class="number">440515</span>, <span class="number">440523</span>, <span class="number">440601</span>, <span class="number">440604</span>, <span class="number">440605</span>, <span class="number">440606</span>, <span class="number">440607</span>, <span class="number">440608</span>,</span><br><span class="line">        <span class="number">440701</span>, <span class="number">440703</span>, <span class="number">440704</span>, <span class="number">440705</span>, <span class="number">440781</span>, <span class="number">440783</span>, <span class="number">440784</span>, <span class="number">440785</span>, <span class="number">440801</span>, <span class="number">440802</span>, <span class="number">440803</span>, <span class="number">440804</span>,</span><br><span class="line">        <span class="number">440811</span>, <span class="number">440823</span>, <span class="number">440825</span>, <span class="number">440881</span>, <span class="number">440882</span>, <span class="number">440883</span>, <span class="number">440901</span>, <span class="number">440902</span>, <span class="number">440903</span>, <span class="number">440923</span>, <span class="number">440981</span>, <span class="number">440982</span>,</span><br><span class="line">        <span class="number">440983</span>, <span class="number">441201</span>, <span class="number">441202</span>, <span class="number">441203</span>, <span class="number">441223</span>, <span class="number">441224</span>, <span class="number">441225</span>, <span class="number">441226</span>, <span class="number">441283</span>, <span class="number">441284</span>, <span class="number">441301</span>, <span class="number">441302</span>,</span><br><span class="line">        <span class="number">441303</span>, <span class="number">441322</span>, <span class="number">441323</span>, <span class="number">441324</span>, <span class="number">441401</span>, <span class="number">441402</span>, <span class="number">441421</span>, <span class="number">441422</span>, <span class="number">441423</span>, <span class="number">441424</span>, <span class="number">441426</span>, <span class="number">441427</span>,</span><br><span class="line">        <span class="number">441481</span>, <span class="number">441501</span>, <span class="number">441502</span>, <span class="number">441521</span>, <span class="number">441523</span>, <span class="number">441581</span>, <span class="number">441601</span>, <span class="number">441602</span>, <span class="number">441621</span>, <span class="number">441622</span>, <span class="number">441623</span>, <span class="number">441624</span>,</span><br><span class="line">        <span class="number">441625</span>, <span class="number">441701</span>, <span class="number">441702</span>, <span class="number">441721</span>, <span class="number">441723</span>, <span class="number">441781</span>, <span class="number">441801</span>, <span class="number">441802</span>, <span class="number">441821</span>, <span class="number">441823</span>, <span class="number">441825</span>, <span class="number">441826</span>,</span><br><span class="line">        <span class="number">441827</span>, <span class="number">441881</span>, <span class="number">441882</span>, <span class="number">445101</span>, <span class="number">445102</span>, <span class="number">445121</span>, <span class="number">445122</span>, <span class="number">445201</span>, <span class="number">445202</span>, <span class="number">445221</span>, <span class="number">445222</span>, <span class="number">445224</span>,</span><br><span class="line">        <span class="number">445281</span>, <span class="number">445301</span>, <span class="number">445302</span>, <span class="number">445321</span>, <span class="number">445322</span>, <span class="number">445323</span>, <span class="number">445381</span>, <span class="number">450101</span>, <span class="number">450102</span>, <span class="number">450103</span>, <span class="number">450105</span>, <span class="number">450107</span>,</span><br><span class="line">        <span class="number">450108</span>, <span class="number">450109</span>, <span class="number">450122</span>, <span class="number">450123</span>, <span class="number">450124</span>, <span class="number">450125</span>, <span class="number">450126</span>, <span class="number">450127</span>, <span class="number">450201</span>, <span class="number">450202</span>, <span class="number">450203</span>, <span class="number">450204</span>,</span><br><span class="line">        <span class="number">450205</span>, <span class="number">450221</span>, <span class="number">450222</span>, <span class="number">450223</span>, <span class="number">450224</span>, <span class="number">450225</span>, <span class="number">450226</span>, <span class="number">450301</span>, <span class="number">450302</span>, <span class="number">450303</span>, <span class="number">450304</span>, <span class="number">450305</span>,</span><br><span class="line">        <span class="number">450311</span>, <span class="number">450321</span>, <span class="number">450322</span>, <span class="number">450323</span>, <span class="number">450324</span>, <span class="number">450325</span>, <span class="number">450326</span>, <span class="number">450327</span>, <span class="number">450328</span>, <span class="number">450329</span>, <span class="number">450330</span>, <span class="number">450331</span>,</span><br><span class="line">        <span class="number">450332</span>, <span class="number">450401</span>, <span class="number">450403</span>, <span class="number">450404</span>, <span class="number">450405</span>, <span class="number">450421</span>, <span class="number">450422</span>, <span class="number">450423</span>, <span class="number">450481</span>, <span class="number">450501</span>, <span class="number">450502</span>, <span class="number">450503</span>,</span><br><span class="line">        <span class="number">450512</span>, <span class="number">450521</span>, <span class="number">450601</span>, <span class="number">450602</span>, <span class="number">450603</span>, <span class="number">450621</span>, <span class="number">450681</span>, <span class="number">450701</span>, <span class="number">450702</span>, <span class="number">450703</span>, <span class="number">450721</span>, <span class="number">450722</span>,</span><br><span class="line">        <span class="number">450801</span>, <span class="number">450802</span>, <span class="number">450803</span>, <span class="number">450804</span>, <span class="number">450821</span>, <span class="number">450881</span>, <span class="number">450901</span>, <span class="number">450902</span>, <span class="number">450921</span>, <span class="number">450922</span>, <span class="number">450923</span>, <span class="number">450924</span>,</span><br><span class="line">        <span class="number">450981</span>, <span class="number">451001</span>, <span class="number">451002</span>, <span class="number">451021</span>, <span class="number">451022</span>, <span class="number">451023</span>, <span class="number">451024</span>, <span class="number">451025</span>, <span class="number">451026</span>, <span class="number">451027</span>, <span class="number">451028</span>, <span class="number">451029</span>,</span><br><span class="line">        <span class="number">451030</span>, <span class="number">451031</span>, <span class="number">451101</span>, <span class="number">451102</span>, <span class="number">451121</span>, <span class="number">451122</span>, <span class="number">451123</span>, <span class="number">451201</span>, <span class="number">451202</span>, <span class="number">451221</span>, <span class="number">451222</span>, <span class="number">451223</span>,</span><br><span class="line">        <span class="number">451224</span>, <span class="number">451225</span>, <span class="number">451226</span>, <span class="number">451227</span>, <span class="number">451228</span>, <span class="number">451229</span>, <span class="number">451281</span>, <span class="number">451301</span>, <span class="number">451302</span>, <span class="number">451321</span>, <span class="number">451322</span>, <span class="number">451323</span>,</span><br><span class="line">        <span class="number">451324</span>, <span class="number">451381</span>, <span class="number">451401</span>, <span class="number">451402</span>, <span class="number">451421</span>, <span class="number">451422</span>, <span class="number">451423</span>, <span class="number">451424</span>, <span class="number">451425</span>, <span class="number">451481</span>, <span class="number">460101</span>, <span class="number">460105</span>,</span><br><span class="line">        <span class="number">460106</span>, <span class="number">460107</span>, <span class="number">460108</span>, <span class="number">460201</span>, <span class="number">460321</span>, <span class="number">460322</span>, <span class="number">460323</span>, <span class="number">469001</span>, <span class="number">469002</span>, <span class="number">469003</span>, <span class="number">469005</span>, <span class="number">469006</span>,</span><br><span class="line">        <span class="number">469007</span>, <span class="number">469021</span>, <span class="number">469022</span>, <span class="number">469023</span>, <span class="number">469024</span>, <span class="number">469025</span>, <span class="number">469026</span>, <span class="number">469027</span>, <span class="number">469028</span>, <span class="number">469029</span>, <span class="number">469030</span>, <span class="number">500101</span>,</span><br><span class="line">        <span class="number">500102</span>, <span class="number">500103</span>, <span class="number">500104</span>, <span class="number">500105</span>, <span class="number">500106</span>, <span class="number">500107</span>, <span class="number">500108</span>, <span class="number">500109</span>, <span class="number">500110</span>, <span class="number">500111</span>, <span class="number">500112</span>, <span class="number">500113</span>,</span><br><span class="line">        <span class="number">500114</span>, <span class="number">500115</span>, <span class="number">500116</span>, <span class="number">500117</span>, <span class="number">500118</span>, <span class="number">500119</span>, <span class="number">500223</span>, <span class="number">500224</span>, <span class="number">500226</span>, <span class="number">500227</span>, <span class="number">500228</span>, <span class="number">500229</span>,</span><br><span class="line">        <span class="number">500230</span>, <span class="number">500231</span>, <span class="number">500232</span>, <span class="number">500233</span>, <span class="number">500234</span>, <span class="number">500235</span>, <span class="number">500236</span>, <span class="number">500237</span>, <span class="number">500238</span>, <span class="number">500240</span>, <span class="number">500241</span>, <span class="number">500242</span>,</span><br><span class="line">        <span class="number">500243</span>, <span class="number">510101</span>, <span class="number">510104</span>, <span class="number">510105</span>, <span class="number">510106</span>, <span class="number">510107</span>, <span class="number">510108</span>, <span class="number">510112</span>, <span class="number">510113</span>, <span class="number">510114</span>, <span class="number">510115</span>, <span class="number">510121</span>,</span><br><span class="line">        <span class="number">510122</span>, <span class="number">510124</span>, <span class="number">510129</span>, <span class="number">510131</span>, <span class="number">510132</span>, <span class="number">510181</span>, <span class="number">510182</span>, <span class="number">510183</span>, <span class="number">510184</span>, <span class="number">510301</span>, <span class="number">510302</span>, <span class="number">510303</span>,</span><br><span class="line">        <span class="number">510304</span>, <span class="number">510311</span>, <span class="number">510321</span>, <span class="number">510322</span>, <span class="number">510401</span>, <span class="number">510402</span>, <span class="number">510403</span>, <span class="number">510411</span>, <span class="number">510421</span>, <span class="number">510422</span>, <span class="number">510501</span>, <span class="number">510502</span>,</span><br><span class="line">        <span class="number">510503</span>, <span class="number">510504</span>, <span class="number">510521</span>, <span class="number">510522</span>, <span class="number">510524</span>, <span class="number">510525</span>, <span class="number">510601</span>, <span class="number">510603</span>, <span class="number">510623</span>, <span class="number">510626</span>, <span class="number">510681</span>, <span class="number">510682</span>,</span><br><span class="line">        <span class="number">510683</span>, <span class="number">510701</span>, <span class="number">510703</span>, <span class="number">510704</span>, <span class="number">510722</span>, <span class="number">510723</span>, <span class="number">510724</span>, <span class="number">510725</span>, <span class="number">510726</span>, <span class="number">510727</span>, <span class="number">510781</span>, <span class="number">510801</span>,</span><br><span class="line">        <span class="number">510802</span>, <span class="number">510811</span>, <span class="number">510812</span>, <span class="number">510821</span>, <span class="number">510822</span>, <span class="number">510823</span>, <span class="number">510824</span>, <span class="number">510901</span>, <span class="number">510903</span>, <span class="number">510904</span>, <span class="number">510921</span>, <span class="number">510922</span>,</span><br><span class="line">        <span class="number">510923</span>, <span class="number">511001</span>, <span class="number">511002</span>, <span class="number">511011</span>, <span class="number">511024</span>, <span class="number">511025</span>, <span class="number">511028</span>, <span class="number">511101</span>, <span class="number">511102</span>, <span class="number">511111</span>, <span class="number">511112</span>, <span class="number">511113</span>,</span><br><span class="line">        <span class="number">511123</span>, <span class="number">511124</span>, <span class="number">511126</span>, <span class="number">511129</span>, <span class="number">511132</span>, <span class="number">511133</span>, <span class="number">511181</span>, <span class="number">511301</span>, <span class="number">511302</span>, <span class="number">511303</span>, <span class="number">511304</span>, <span class="number">511321</span>,</span><br><span class="line">        <span class="number">511322</span>, <span class="number">511323</span>, <span class="number">511324</span>, <span class="number">511325</span>, <span class="number">511381</span>, <span class="number">511401</span>, <span class="number">511402</span>, <span class="number">511421</span>, <span class="number">511422</span>, <span class="number">511423</span>, <span class="number">511424</span>, <span class="number">511425</span>,</span><br><span class="line">        <span class="number">511501</span>, <span class="number">511502</span>, <span class="number">511503</span>, <span class="number">511521</span>, <span class="number">511523</span>, <span class="number">511524</span>, <span class="number">511525</span>, <span class="number">511526</span>, <span class="number">511527</span>, <span class="number">511528</span>, <span class="number">511529</span>, <span class="number">511601</span>,</span><br><span class="line">        <span class="number">511602</span>, <span class="number">511621</span>, <span class="number">511622</span>, <span class="number">511623</span>, <span class="number">511681</span>, <span class="number">511701</span>, <span class="number">511702</span>, <span class="number">511721</span>, <span class="number">511722</span>, <span class="number">511723</span>, <span class="number">511724</span>, <span class="number">511725</span>,</span><br><span class="line">        <span class="number">511781</span>, <span class="number">511801</span>, <span class="number">511802</span>, <span class="number">511803</span>, <span class="number">511822</span>, <span class="number">511823</span>, <span class="number">511824</span>, <span class="number">511825</span>, <span class="number">511826</span>, <span class="number">511827</span>, <span class="number">511901</span>, <span class="number">511902</span>,</span><br><span class="line">        <span class="number">511921</span>, <span class="number">511922</span>, <span class="number">511923</span>, <span class="number">512001</span>, <span class="number">512002</span>, <span class="number">512021</span>, <span class="number">512022</span>, <span class="number">512081</span>, <span class="number">513221</span>, <span class="number">513222</span>, <span class="number">513223</span>, <span class="number">513224</span>,</span><br><span class="line">        <span class="number">513225</span>, <span class="number">513226</span>, <span class="number">513227</span>, <span class="number">513228</span>, <span class="number">513229</span>, <span class="number">513230</span>, <span class="number">513231</span>, <span class="number">513232</span>, <span class="number">513233</span>, <span class="number">513321</span>, <span class="number">513322</span>, <span class="number">513323</span>,</span><br><span class="line">        <span class="number">513324</span>, <span class="number">513325</span>, <span class="number">513326</span>, <span class="number">513327</span>, <span class="number">513328</span>, <span class="number">513329</span>, <span class="number">513330</span>, <span class="number">513331</span>, <span class="number">513332</span>, <span class="number">513333</span>, <span class="number">513334</span>, <span class="number">513335</span>,</span><br><span class="line">        <span class="number">513336</span>, <span class="number">513337</span>, <span class="number">513338</span>, <span class="number">513401</span>, <span class="number">513422</span>, <span class="number">513423</span>, <span class="number">513424</span>, <span class="number">513425</span>, <span class="number">513426</span>, <span class="number">513427</span>, <span class="number">513428</span>, <span class="number">513429</span>,</span><br><span class="line">        <span class="number">513430</span>, <span class="number">513431</span>, <span class="number">513432</span>, <span class="number">513433</span>, <span class="number">513434</span>, <span class="number">513435</span>, <span class="number">513436</span>, <span class="number">513437</span>, <span class="number">520101</span>, <span class="number">520102</span>, <span class="number">520103</span>, <span class="number">520111</span>,</span><br><span class="line">        <span class="number">520112</span>, <span class="number">520113</span>, <span class="number">520114</span>, <span class="number">520121</span>, <span class="number">520122</span>, <span class="number">520123</span>, <span class="number">520181</span>, <span class="number">520201</span>, <span class="number">520203</span>, <span class="number">520221</span>, <span class="number">520222</span>, <span class="number">520301</span>,</span><br><span class="line">        <span class="number">520302</span>, <span class="number">520303</span>, <span class="number">520321</span>, <span class="number">520322</span>, <span class="number">520323</span>, <span class="number">520324</span>, <span class="number">520325</span>, <span class="number">520326</span>, <span class="number">520327</span>, <span class="number">520328</span>, <span class="number">520329</span>, <span class="number">520330</span>,</span><br><span class="line">        <span class="number">520381</span>, <span class="number">520382</span>, <span class="number">520401</span>, <span class="number">520402</span>, <span class="number">520421</span>, <span class="number">520422</span>, <span class="number">520423</span>, <span class="number">520424</span>, <span class="number">520425</span>, <span class="number">520502</span>, <span class="number">520521</span>, <span class="number">520522</span>,</span><br><span class="line">        <span class="number">520523</span>, <span class="number">520524</span>, <span class="number">520525</span>, <span class="number">520526</span>, <span class="number">520527</span>, <span class="number">520602</span>, <span class="number">520603</span>, <span class="number">520621</span>, <span class="number">520622</span>, <span class="number">520623</span>, <span class="number">520624</span>, <span class="number">520625</span>,</span><br><span class="line">        <span class="number">520626</span>, <span class="number">520627</span>, <span class="number">520628</span>, <span class="number">522301</span>, <span class="number">522322</span>, <span class="number">522323</span>, <span class="number">522324</span>, <span class="number">522325</span>, <span class="number">522326</span>, <span class="number">522327</span>, <span class="number">522328</span>, <span class="number">522601</span>,</span><br><span class="line">        <span class="number">522622</span>, <span class="number">522623</span>, <span class="number">522624</span>, <span class="number">522625</span>, <span class="number">522626</span>, <span class="number">522627</span>, <span class="number">522628</span>, <span class="number">522629</span>, <span class="number">522630</span>, <span class="number">522631</span>, <span class="number">522632</span>, <span class="number">522633</span>,</span><br><span class="line">        <span class="number">522634</span>, <span class="number">522635</span>, <span class="number">522636</span>, <span class="number">522701</span>, <span class="number">522702</span>, <span class="number">522722</span>, <span class="number">522723</span>, <span class="number">522725</span>, <span class="number">522726</span>, <span class="number">522727</span>, <span class="number">522728</span>, <span class="number">522729</span>,</span><br><span class="line">        <span class="number">522730</span>, <span class="number">522731</span>, <span class="number">522732</span>, <span class="number">530101</span>, <span class="number">530102</span>, <span class="number">530103</span>, <span class="number">530111</span>, <span class="number">530112</span>, <span class="number">530113</span>, <span class="number">530114</span>, <span class="number">530122</span>, <span class="number">530124</span>,</span><br><span class="line">        <span class="number">530125</span>, <span class="number">530126</span>, <span class="number">530127</span>, <span class="number">530128</span>, <span class="number">530129</span>, <span class="number">530181</span>, <span class="number">530301</span>, <span class="number">530302</span>, <span class="number">530321</span>, <span class="number">530322</span>, <span class="number">530323</span>, <span class="number">530324</span>,</span><br><span class="line">        <span class="number">530325</span>, <span class="number">530326</span>, <span class="number">530328</span>, <span class="number">530381</span>, <span class="number">530402</span>, <span class="number">530421</span>, <span class="number">530422</span>, <span class="number">530423</span>, <span class="number">530424</span>, <span class="number">530425</span>, <span class="number">530426</span>, <span class="number">530427</span>,</span><br><span class="line">        <span class="number">530428</span>, <span class="number">530501</span>, <span class="number">530502</span>, <span class="number">530521</span>, <span class="number">530522</span>, <span class="number">530523</span>, <span class="number">530524</span>, <span class="number">530601</span>, <span class="number">530602</span>, <span class="number">530621</span>, <span class="number">530622</span>, <span class="number">530623</span>,</span><br><span class="line">        <span class="number">530624</span>, <span class="number">530625</span>, <span class="number">530626</span>, <span class="number">530627</span>, <span class="number">530628</span>, <span class="number">530629</span>, <span class="number">530630</span>, <span class="number">530701</span>, <span class="number">530702</span>, <span class="number">530721</span>, <span class="number">530722</span>, <span class="number">530723</span>,</span><br><span class="line">        <span class="number">530724</span>, <span class="number">530801</span>, <span class="number">530802</span>, <span class="number">530821</span>, <span class="number">530822</span>, <span class="number">530823</span>, <span class="number">530824</span>, <span class="number">530825</span>, <span class="number">530826</span>, <span class="number">530827</span>, <span class="number">530828</span>, <span class="number">530829</span>,</span><br><span class="line">        <span class="number">530901</span>, <span class="number">530902</span>, <span class="number">530921</span>, <span class="number">530922</span>, <span class="number">530923</span>, <span class="number">530924</span>, <span class="number">530925</span>, <span class="number">530926</span>, <span class="number">530927</span>, <span class="number">532301</span>, <span class="number">532322</span>, <span class="number">532323</span>,</span><br><span class="line">        <span class="number">532324</span>, <span class="number">532325</span>, <span class="number">532326</span>, <span class="number">532327</span>, <span class="number">532328</span>, <span class="number">532329</span>, <span class="number">532331</span>, <span class="number">532501</span>, <span class="number">532502</span>, <span class="number">532503</span>, <span class="number">532523</span>, <span class="number">532524</span>,</span><br><span class="line">        <span class="number">532525</span>, <span class="number">532526</span>, <span class="number">532527</span>, <span class="number">532528</span>, <span class="number">532529</span>, <span class="number">532530</span>, <span class="number">532531</span>, <span class="number">532532</span>, <span class="number">532601</span>, <span class="number">532622</span>, <span class="number">532623</span>, <span class="number">532624</span>,</span><br><span class="line">        <span class="number">532625</span>, <span class="number">532626</span>, <span class="number">532627</span>, <span class="number">532628</span>, <span class="number">532801</span>, <span class="number">532822</span>, <span class="number">532823</span>, <span class="number">532901</span>, <span class="number">532922</span>, <span class="number">532923</span>, <span class="number">532924</span>, <span class="number">532925</span>,</span><br><span class="line">        <span class="number">532926</span>, <span class="number">532927</span>, <span class="number">532928</span>, <span class="number">532929</span>, <span class="number">532930</span>, <span class="number">532931</span>, <span class="number">532932</span>, <span class="number">533102</span>, <span class="number">533103</span>, <span class="number">533122</span>, <span class="number">533123</span>, <span class="number">533124</span>,</span><br><span class="line">        <span class="number">533321</span>, <span class="number">533323</span>, <span class="number">533324</span>, <span class="number">533325</span>, <span class="number">533421</span>, <span class="number">533422</span>, <span class="number">533423</span>, <span class="number">540101</span>, <span class="number">540102</span>, <span class="number">540121</span>, <span class="number">540122</span>, <span class="number">540123</span>,</span><br><span class="line">        <span class="number">540124</span>, <span class="number">540125</span>, <span class="number">540126</span>, <span class="number">540127</span>, <span class="number">542121</span>, <span class="number">542122</span>, <span class="number">542123</span>, <span class="number">542124</span>, <span class="number">542125</span>, <span class="number">542126</span>, <span class="number">542127</span>, <span class="number">542128</span>,</span><br><span class="line">        <span class="number">542129</span>, <span class="number">542132</span>, <span class="number">542133</span>, <span class="number">542221</span>, <span class="number">542222</span>, <span class="number">542223</span>, <span class="number">542224</span>, <span class="number">542225</span>, <span class="number">542226</span>, <span class="number">542227</span>, <span class="number">542228</span>, <span class="number">542229</span>,</span><br><span class="line">        <span class="number">542231</span>, <span class="number">542232</span>, <span class="number">542233</span>, <span class="number">542301</span>, <span class="number">542322</span>, <span class="number">542323</span>, <span class="number">542324</span>, <span class="number">542325</span>, <span class="number">542326</span>, <span class="number">542327</span>, <span class="number">542328</span>, <span class="number">542329</span>,</span><br><span class="line">        <span class="number">542330</span>, <span class="number">542331</span>, <span class="number">542332</span>, <span class="number">542333</span>, <span class="number">542334</span>, <span class="number">542335</span>, <span class="number">542336</span>, <span class="number">542337</span>, <span class="number">542338</span>, <span class="number">542421</span>, <span class="number">542422</span>, <span class="number">542423</span>,</span><br><span class="line">        <span class="number">542424</span>, <span class="number">542425</span>, <span class="number">542426</span>, <span class="number">542427</span>, <span class="number">542428</span>, <span class="number">542429</span>, <span class="number">542430</span>, <span class="number">542521</span>, <span class="number">542522</span>, <span class="number">542523</span>, <span class="number">542524</span>, <span class="number">542525</span>,</span><br><span class="line">        <span class="number">542526</span>, <span class="number">542527</span>, <span class="number">542621</span>, <span class="number">542622</span>, <span class="number">542623</span>, <span class="number">542624</span>, <span class="number">542625</span>, <span class="number">542626</span>, <span class="number">542627</span>, <span class="number">610101</span>, <span class="number">610102</span>, <span class="number">610103</span>,</span><br><span class="line">        <span class="number">610104</span>, <span class="number">610111</span>, <span class="number">610112</span>, <span class="number">610113</span>, <span class="number">610114</span>, <span class="number">610115</span>, <span class="number">610116</span>, <span class="number">610122</span>, <span class="number">610124</span>, <span class="number">610125</span>, <span class="number">610126</span>, <span class="number">610201</span>,</span><br><span class="line">        <span class="number">610202</span>, <span class="number">610203</span>, <span class="number">610204</span>, <span class="number">610222</span>, <span class="number">610301</span>, <span class="number">610302</span>, <span class="number">610303</span>, <span class="number">610304</span>, <span class="number">610322</span>, <span class="number">610323</span>, <span class="number">610324</span>, <span class="number">610326</span>,</span><br><span class="line">        <span class="number">610327</span>, <span class="number">610328</span>, <span class="number">610329</span>, <span class="number">610330</span>, <span class="number">610331</span>, <span class="number">610401</span>, <span class="number">610402</span>, <span class="number">610403</span>, <span class="number">610404</span>, <span class="number">610422</span>, <span class="number">610423</span>, <span class="number">610424</span>,</span><br><span class="line">        <span class="number">610425</span>, <span class="number">610426</span>, <span class="number">610427</span>, <span class="number">610428</span>, <span class="number">610429</span>, <span class="number">610430</span>, <span class="number">610431</span>, <span class="number">610481</span>, <span class="number">610501</span>, <span class="number">610502</span>, <span class="number">610521</span>, <span class="number">610522</span>,</span><br><span class="line">        <span class="number">610523</span>, <span class="number">610524</span>, <span class="number">610525</span>, <span class="number">610526</span>, <span class="number">610527</span>, <span class="number">610528</span>, <span class="number">610581</span>, <span class="number">610582</span>, <span class="number">610601</span>, <span class="number">610602</span>, <span class="number">610621</span>, <span class="number">610622</span>,</span><br><span class="line">        <span class="number">610623</span>, <span class="number">610624</span>, <span class="number">610625</span>, <span class="number">610626</span>, <span class="number">610627</span>, <span class="number">610628</span>, <span class="number">610629</span>, <span class="number">610630</span>, <span class="number">610631</span>, <span class="number">610632</span>, <span class="number">610701</span>, <span class="number">610702</span>,</span><br><span class="line">        <span class="number">610721</span>, <span class="number">610722</span>, <span class="number">610723</span>, <span class="number">610724</span>, <span class="number">610725</span>, <span class="number">610726</span>, <span class="number">610727</span>, <span class="number">610728</span>, <span class="number">610729</span>, <span class="number">610730</span>, <span class="number">610801</span>, <span class="number">610802</span>,</span><br><span class="line">        <span class="number">610821</span>, <span class="number">610822</span>, <span class="number">610823</span>, <span class="number">610824</span>, <span class="number">610825</span>, <span class="number">610826</span>, <span class="number">610827</span>, <span class="number">610828</span>, <span class="number">610829</span>, <span class="number">610830</span>, <span class="number">610831</span>, <span class="number">610901</span>,</span><br><span class="line">        <span class="number">610902</span>, <span class="number">610921</span>, <span class="number">610922</span>, <span class="number">610923</span>, <span class="number">610924</span>, <span class="number">610925</span>, <span class="number">610926</span>, <span class="number">610927</span>, <span class="number">610928</span>, <span class="number">610929</span>, <span class="number">611001</span>, <span class="number">611002</span>,</span><br><span class="line">        <span class="number">611021</span>, <span class="number">611022</span>, <span class="number">611023</span>, <span class="number">611024</span>, <span class="number">611025</span>, <span class="number">611026</span>, <span class="number">620101</span>, <span class="number">620102</span>, <span class="number">620103</span>, <span class="number">620104</span>, <span class="number">620105</span>, <span class="number">620111</span>,</span><br><span class="line">        <span class="number">620121</span>, <span class="number">620122</span>, <span class="number">620123</span>, <span class="number">620201</span>, <span class="number">620301</span>, <span class="number">620302</span>, <span class="number">620321</span>, <span class="number">620401</span>, <span class="number">620402</span>, <span class="number">620403</span>, <span class="number">620421</span>, <span class="number">620422</span>,</span><br><span class="line">        <span class="number">620423</span>, <span class="number">620501</span>, <span class="number">620502</span>, <span class="number">620503</span>, <span class="number">620521</span>, <span class="number">620522</span>, <span class="number">620523</span>, <span class="number">620524</span>, <span class="number">620525</span>, <span class="number">620601</span>, <span class="number">620602</span>, <span class="number">620621</span>,</span><br><span class="line">        <span class="number">620622</span>, <span class="number">620623</span>, <span class="number">620701</span>, <span class="number">620702</span>, <span class="number">620721</span>, <span class="number">620722</span>, <span class="number">620723</span>, <span class="number">620724</span>, <span class="number">620725</span>, <span class="number">620801</span>, <span class="number">620802</span>, <span class="number">620821</span>,</span><br><span class="line">        <span class="number">620822</span>, <span class="number">620823</span>, <span class="number">620824</span>, <span class="number">620825</span>, <span class="number">620826</span>, <span class="number">620901</span>, <span class="number">620902</span>, <span class="number">620921</span>, <span class="number">620922</span>, <span class="number">620923</span>, <span class="number">620924</span>, <span class="number">620981</span>,</span><br><span class="line">        <span class="number">620982</span>, <span class="number">621001</span>, <span class="number">621002</span>, <span class="number">621021</span>, <span class="number">621022</span>, <span class="number">621023</span>, <span class="number">621024</span>, <span class="number">621025</span>, <span class="number">621026</span>, <span class="number">621027</span>, <span class="number">621101</span>, <span class="number">621102</span>,</span><br><span class="line">        <span class="number">621121</span>, <span class="number">621122</span>, <span class="number">621123</span>, <span class="number">621124</span>, <span class="number">621125</span>, <span class="number">621126</span>, <span class="number">621201</span>, <span class="number">621202</span>, <span class="number">621221</span>, <span class="number">621222</span>, <span class="number">621223</span>, <span class="number">621224</span>,</span><br><span class="line">        <span class="number">621225</span>, <span class="number">621226</span>, <span class="number">621227</span>, <span class="number">621228</span>, <span class="number">622901</span>, <span class="number">622921</span>, <span class="number">622922</span>, <span class="number">622923</span>, <span class="number">622924</span>, <span class="number">622925</span>, <span class="number">622926</span>, <span class="number">622927</span>,</span><br><span class="line">        <span class="number">623001</span>, <span class="number">623021</span>, <span class="number">623022</span>, <span class="number">623023</span>, <span class="number">623024</span>, <span class="number">623025</span>, <span class="number">623026</span>, <span class="number">623027</span>, <span class="number">630101</span>, <span class="number">630102</span>, <span class="number">630103</span>, <span class="number">630104</span>,</span><br><span class="line">        <span class="number">630105</span>, <span class="number">630121</span>, <span class="number">630122</span>, <span class="number">630123</span>, <span class="number">632121</span>, <span class="number">632122</span>, <span class="number">632123</span>, <span class="number">632126</span>, <span class="number">632127</span>, <span class="number">632128</span>, <span class="number">632221</span>, <span class="number">632222</span>,</span><br><span class="line">        <span class="number">632223</span>, <span class="number">632224</span>, <span class="number">632321</span>, <span class="number">632322</span>, <span class="number">632323</span>, <span class="number">632324</span>, <span class="number">632521</span>, <span class="number">632522</span>, <span class="number">632523</span>, <span class="number">632524</span>, <span class="number">632525</span>, <span class="number">632621</span>,</span><br><span class="line">        <span class="number">632622</span>, <span class="number">632623</span>, <span class="number">632624</span>, <span class="number">632625</span>, <span class="number">632626</span>, <span class="number">632721</span>, <span class="number">632722</span>, <span class="number">632723</span>, <span class="number">632724</span>, <span class="number">632725</span>, <span class="number">632726</span>, <span class="number">632801</span>,</span><br><span class="line">        <span class="number">632802</span>, <span class="number">632821</span>, <span class="number">632822</span>, <span class="number">632823</span>, <span class="number">640101</span>, <span class="number">640104</span>, <span class="number">640105</span>, <span class="number">640106</span>, <span class="number">640121</span>, <span class="number">640122</span>, <span class="number">640181</span>, <span class="number">640201</span>,</span><br><span class="line">        <span class="number">640202</span>, <span class="number">640205</span>, <span class="number">640221</span>, <span class="number">640301</span>, <span class="number">640302</span>, <span class="number">640303</span>, <span class="number">640323</span>, <span class="number">640324</span>, <span class="number">640381</span>, <span class="number">640401</span>, <span class="number">640402</span>, <span class="number">640422</span>,</span><br><span class="line">        <span class="number">640423</span>, <span class="number">640424</span>, <span class="number">640425</span>, <span class="number">640501</span>, <span class="number">640502</span>, <span class="number">640521</span>, <span class="number">640522</span>, <span class="number">650101</span>, <span class="number">650102</span>, <span class="number">650103</span>, <span class="number">650104</span>, <span class="number">650105</span>,</span><br><span class="line">        <span class="number">650106</span>, <span class="number">650107</span>, <span class="number">650109</span>, <span class="number">650121</span>, <span class="number">650201</span>, <span class="number">650202</span>, <span class="number">650203</span>, <span class="number">650204</span>, <span class="number">650205</span>, <span class="number">652101</span>, <span class="number">652122</span>, <span class="number">652123</span>,</span><br><span class="line">        <span class="number">652201</span>, <span class="number">652222</span>, <span class="number">652223</span>, <span class="number">652301</span>, <span class="number">652302</span>, <span class="number">652323</span>, <span class="number">652324</span>, <span class="number">652325</span>, <span class="number">652327</span>, <span class="number">652328</span>, <span class="number">652701</span>, <span class="number">652722</span>,</span><br><span class="line">        <span class="number">652723</span>, <span class="number">652801</span>, <span class="number">652822</span>, <span class="number">652823</span>, <span class="number">652824</span>, <span class="number">652825</span>, <span class="number">652826</span>, <span class="number">652827</span>, <span class="number">652828</span>, <span class="number">652829</span>, <span class="number">652901</span>, <span class="number">652922</span>,</span><br><span class="line">        <span class="number">652923</span>, <span class="number">652924</span>, <span class="number">652925</span>, <span class="number">652926</span>, <span class="number">652927</span>, <span class="number">652928</span>, <span class="number">652929</span>, <span class="number">653001</span>, <span class="number">653022</span>, <span class="number">653023</span>, <span class="number">653024</span>, <span class="number">653101</span>,</span><br><span class="line">        <span class="number">653121</span>, <span class="number">653122</span>, <span class="number">653123</span>, <span class="number">653124</span>, <span class="number">653125</span>, <span class="number">653126</span>, <span class="number">653127</span>, <span class="number">653128</span>, <span class="number">653129</span>, <span class="number">653130</span>, <span class="number">653131</span>, <span class="number">653201</span>,</span><br><span class="line">        <span class="number">653221</span>, <span class="number">653222</span>, <span class="number">653223</span>, <span class="number">653224</span>, <span class="number">653225</span>, <span class="number">653226</span>, <span class="number">653227</span>, <span class="number">654002</span>, <span class="number">654003</span>, <span class="number">654021</span>, <span class="number">654022</span>, <span class="number">654023</span>,</span><br><span class="line">        <span class="number">654024</span>, <span class="number">654025</span>, <span class="number">654026</span>, <span class="number">654027</span>, <span class="number">654028</span>, <span class="number">654201</span>, <span class="number">654202</span>, <span class="number">654221</span>, <span class="number">654223</span>, <span class="number">654224</span>, <span class="number">654225</span>, <span class="number">654226</span>,</span><br><span class="line">        <span class="number">654301</span>, <span class="number">654321</span>, <span class="number">654322</span>, <span class="number">654323</span>, <span class="number">654324</span>, <span class="number">654325</span>, <span class="number">654326</span>, <span class="number">659001</span>, <span class="number">659002</span>, <span class="number">659003</span>, <span class="number">659004</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$seed</span> = mt_rand(<span class="number">0</span>, <span class="number">3130</span>);<span class="comment">//total of region code</span></span><br><span class="line">    <span class="variable">$Birth</span> = mt_rand(<span class="variable">$Year_start</span>, <span class="variable">$Year_end</span>);</span><br><span class="line">    <span class="variable">$Birth_format</span> = date(<span class="string">&#x27;Ymd&#x27;</span>, <span class="variable">$Birth</span>);</span><br><span class="line">    <span class="variable">$suffix_a</span> = mt_rand(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="variable">$suffix_b</span> = mt_rand(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="variable">$suffix_c</span> = mt_rand(<span class="number">0</span>, <span class="number">9</span>);<span class="comment">//male or female</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$base</span> <span class="keyword">or</span> mb_strlen(<span class="variable">$base</span>) &lt;&gt; <span class="number">6</span>)</span><br><span class="line">        <span class="variable">$base</span> = <span class="variable">$Region</span>[<span class="variable">$seed</span>] . <span class="variable">$Birth_format</span> . <span class="variable">$suffix_a</span> . <span class="variable">$suffix_b</span> . <span class="variable">$suffix_c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$factor</span> = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="variable">$sums</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$suffix_d</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">17</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$sums</span> += substr(<span class="variable">$base</span>, <span class="variable">$i</span>, <span class="number">1</span>) * <span class="variable">$factor</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mods</span> = <span class="variable">$sums</span> % <span class="number">11</span>;<span class="comment">//10X98765432</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$mods</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="variable">$suffix_d</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$content</span> .= <span class="variable">$base</span> . <span class="variable">$suffix_d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断身份证号格式是否正确"><a href="#判断身份证号格式是否正确" class="headerlink" title="判断身份证号格式是否正确"></a>判断身份证号格式是否正确</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断身份证号是否正确</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> boolean </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_idcard</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$id</span> = strtoupper(<span class="variable">$id</span>);</span><br><span class="line">    <span class="variable">$regx</span> = <span class="string">&quot;/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;([0-9]|X)$)/&quot;</span>;</span><br><span class="line">    <span class="variable">$arr_split</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="variable">$regx</span>, <span class="variable">$id</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">15</span> == strlen(<span class="variable">$id</span>)) <span class="comment">//检查15位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$regx</span> = <span class="string">&quot;/^(\d&#123;6&#125;)+(\d&#123;2&#125;)+(\d&#123;2&#125;)+(\d&#123;2&#125;)+(\d&#123;3&#125;)$/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        @preg_match(<span class="variable">$regx</span>, <span class="variable">$id</span>, <span class="variable">$arr_split</span>);</span><br><span class="line">        <span class="comment">//检查生日日期是否正确</span></span><br><span class="line">        <span class="variable">$dtm_birth</span> = <span class="string">&quot;19&quot;</span> . <span class="variable">$arr_split</span>[<span class="number">2</span>] . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$arr_split</span>[<span class="number">3</span>] . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$arr_split</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">if</span> (!strtotime(<span class="variable">$dtm_birth</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>      <span class="comment">//检查18位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$regx</span> = <span class="string">&quot;/^(\d&#123;6&#125;)+(\d&#123;4&#125;)+(\d&#123;2&#125;)+(\d&#123;2&#125;)+(\d&#123;3&#125;)([0-9]|X)$/&quot;</span>;</span><br><span class="line">        @preg_match(<span class="variable">$regx</span>, <span class="variable">$id</span>, <span class="variable">$arr_split</span>);</span><br><span class="line">        <span class="variable">$dtm_birth</span> = <span class="variable">$arr_split</span>[<span class="number">2</span>] . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$arr_split</span>[<span class="number">3</span>] . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$arr_split</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">if</span> (!strtotime(<span class="variable">$dtm_birth</span>)) <span class="comment">//检查生日日期是否正确</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//检验18位身份证的校验码是否正确。</span></span><br><span class="line">            <span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">            <span class="variable">$arr_int</span> = <span class="keyword">array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable">$arr_ch</span> = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">            <span class="variable">$sign</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">17</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">                <span class="variable">$b</span> = (<span class="keyword">int</span>)<span class="variable">$id</span>&#123;<span class="variable">$i</span>&#125;;</span><br><span class="line">                <span class="variable">$w</span> = <span class="variable">$arr_int</span>[<span class="variable">$i</span>];</span><br><span class="line">                <span class="variable">$sign</span> += <span class="variable">$b</span> * <span class="variable">$w</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$n</span> = <span class="variable">$sign</span> % <span class="number">11</span>;</span><br><span class="line">            <span class="variable">$val_num</span> = <span class="variable">$arr_ch</span>[<span class="variable">$n</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$val_num</span> != substr(<span class="variable">$id</span>, <span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成随机手机号"><a href="#生成随机手机号" class="headerlink" title="生成随机手机号"></a>生成随机手机号</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机手机号</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed|string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_mobile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 中国移动前缀</span></span><br><span class="line">    <span class="variable">$mobile_prefixes</span> = [</span><br><span class="line">        <span class="number">1340</span>, <span class="number">1341</span>, <span class="number">1342</span>, <span class="number">1343</span>, <span class="number">1344</span>, <span class="number">1345</span>, <span class="number">1346</span>, <span class="number">1347</span>, <span class="number">1348</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>,</span><br><span class="line">        <span class="number">147</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">178</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">198</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 中国联通前缀</span></span><br><span class="line">    <span class="variable">$unicom_prefixes</span> = [<span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">145</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">185</span>, <span class="number">186</span>];</span><br><span class="line">    <span class="comment">// 中国电信前缀</span></span><br><span class="line">    <span class="variable">$telecom_prefixes</span> = [<span class="number">133</span>, <span class="number">149</span>, <span class="number">153</span>, <span class="number">173</span>, <span class="number">177</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">189</span>, <span class="number">199</span>];</span><br><span class="line">    <span class="comment">// 所有前缀</span></span><br><span class="line">    <span class="variable">$all_prefixes</span> = <span class="variable">$mobile_prefixes</span> + <span class="variable">$unicom_prefixes</span> + <span class="variable">$telecom_prefixes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mobile</span> = <span class="variable">$all_prefixes</span>[array_rand(<span class="variable">$all_prefixes</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (strlen(<span class="variable">$mobile</span>) &lt; <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="variable">$mobile</span> .= mt_rand(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$mobile</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断手机号是否正确"><a href="#判断手机号是否正确" class="headerlink" title="判断手机号是否正确"></a>判断手机号是否正确</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $mobile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> false|int</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 移动号段：134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、172、178、182、183、184、187、188、198</span></span><br><span class="line"><span class="comment"> * 联通号段：130、131、132、145、155、156、166、171、175、176、185、186</span></span><br><span class="line"><span class="comment"> * 电信号段：133、149、153、173、177、180、181、189、199</span></span><br><span class="line"><span class="comment"> * 虚拟运营商</span></span><br><span class="line"><span class="comment"> * 电信：1700、1701、1702</span></span><br><span class="line"><span class="comment"> * 移动：1703、1705、1706</span></span><br><span class="line"><span class="comment"> * 联通：1704、1707、1708、1709、171</span></span><br><span class="line"><span class="comment"> * 卫星通信：1349</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_mobile</span>(<span class="params"><span class="variable">$mobile</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/^((13[0-9])|(14[5,7,9])|(15[^4])|(18[0-9])|(17[0,1,3,5,6,7,8]))\d&#123;8&#125;$/&#x27;</span>, <span class="variable">$mobile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信头像合并"><a href="#微信头像合并" class="headerlink" title="微信头像合并"></a>微信头像合并</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信头像合并</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $pic_list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $save_dir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">image_merge</span>(<span class="params"><span class="variable">$pic_list</span>,<span class="variable">$save_dir</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pic_list</span> = array_slice(<span class="variable">$pic_list</span>, <span class="number">0</span>, <span class="number">9</span>); <span class="comment">// 只操作前9个图片</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$bg_w</span> = <span class="number">150</span>; <span class="comment">// 背景图片宽度</span></span><br><span class="line">    <span class="variable">$bg_h</span> = <span class="number">150</span>; <span class="comment">// 背景图片高度</span></span><br><span class="line">    <span class="variable">$background</span> = imagecreatetruecolor(<span class="variable">$bg_w</span>, <span class="variable">$bg_h</span>); <span class="comment">// 背景图片</span></span><br><span class="line">    <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$background</span>, <span class="number">202</span>, <span class="number">201</span>, <span class="number">201</span>); <span class="comment">// 为真彩色画布创建白色背景，再设置为透明</span></span><br><span class="line">    imagefill(<span class="variable">$background</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">    imageColorTransparent(<span class="variable">$background</span>, <span class="variable">$color</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pic_count</span> = count(<span class="variable">$pic_list</span>);</span><br><span class="line">    <span class="variable">$lineArr</span> = <span class="keyword">array</span>(); <span class="comment">// 需要换行的位置</span></span><br><span class="line">    <span class="variable">$space_x</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$space_y</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$line_x</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$start_x</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$start_y</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$pic_w</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$pic_h</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$pic_count</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 正中间</span></span><br><span class="line">            <span class="variable">$start_x</span> = intval(<span class="variable">$bg_w</span> / <span class="number">4</span>); <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = intval(<span class="variable">$bg_h</span> / <span class="number">4</span>); <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">2</span>); <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">2</span>); <span class="comment">// 高度</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 中间位置并排</span></span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$start_y</span> = intval(<span class="variable">$bg_h</span> / <span class="number">4</span>) + <span class="number">3</span>;</span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">2</span>) - <span class="number">5</span>;</span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">2</span>) - <span class="number">5</span>;</span><br><span class="line">            <span class="variable">$space_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">40</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">5</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">2</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">2</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">4</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">5</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">2</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">2</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">3</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">30</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">30</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">3</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">5</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">30</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">4</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">53</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">5</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">30</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">5</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="number">5</span>; <span class="comment">// 开始位置X</span></span><br><span class="line">            <span class="variable">$start_y</span> = <span class="number">5</span>; <span class="comment">// 开始位置Y</span></span><br><span class="line">            <span class="variable">$pic_w</span> = intval(<span class="variable">$bg_w</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 宽度</span></span><br><span class="line">            <span class="variable">$pic_h</span> = intval(<span class="variable">$bg_h</span> / <span class="number">3</span>) - <span class="number">5</span>; <span class="comment">// 高度</span></span><br><span class="line">            <span class="variable">$lineArr</span> = <span class="keyword">array</span>(<span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="variable">$line_x</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$pic_list</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$pic_path</span>) &#123;</span><br><span class="line">        <span class="variable">$kk</span> = <span class="variable">$k</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$kk</span>, <span class="variable">$lineArr</span>)) &#123;</span><br><span class="line">            <span class="variable">$start_x</span> = <span class="variable">$line_x</span>;</span><br><span class="line">            <span class="variable">$start_y</span> = <span class="variable">$start_y</span> + <span class="variable">$pic_h</span> + <span class="variable">$space_y</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> string $image */</span></span><br><span class="line">        <span class="variable">$image</span> = file_get_contents(<span class="variable">$pic_path</span>);</span><br><span class="line">        <span class="variable">$resource</span> = imagecreatefromstring(<span class="variable">$image</span>);</span><br><span class="line">        <span class="comment">// $start_x,$start_y copy图片在背景中的位置</span></span><br><span class="line">        <span class="comment">// 0,0 被copy图片的位置</span></span><br><span class="line">        <span class="comment">// $pic_w,$pic_h copy后的高度和宽度,最后两个参数为原始图片宽度和高度，倒数两个参数为copy时的图片宽度和高度</span></span><br><span class="line">        imagecopyresized(<span class="variable">$background</span>, <span class="variable">$resource</span>, <span class="variable">$start_x</span>, <span class="variable">$start_y</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$pic_w</span>, <span class="variable">$pic_h</span>, imagesx(<span class="variable">$resource</span>), imagesy(<span class="variable">$resource</span>));</span><br><span class="line">        <span class="variable">$start_x</span> = <span class="variable">$start_x</span> + <span class="variable">$pic_w</span> + <span class="variable">$space_x</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = md5(uniqid()).<span class="string">&#x27;.png&#x27;</span>;</span><br><span class="line">    <span class="variable">$filepath</span> = <span class="variable">$save_dir</span>.<span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//header(&quot;Content-type: image/jpg&quot;);</span></span><br><span class="line">    imagegif(<span class="variable">$background</span>, <span class="variable">$filepath</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$filepath</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表</title>
    <url>/2019/07/23/fenku-fenbiao/</url>
    <content><![CDATA[<p>问题：为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？</p>
<span id="more"></span>

<p>分析：其实这块肯定是扯到高并发了，因为分库分表一定是为了支撑高并发、数据量大两个问题的。而且现在说实话，尤其是互联网类的公司面试，基本上都会来这么一下，分库分表如此普遍的技术问题，不问实在是不行，而如果你不知道那也实在是说不过去！</p>
<p>剖析：（1）为什么要分库分表？（设计高并发系统的时候，数据库层面该如何设计？）<br> <br>说白了，分库分表是两回事儿，大家可别搞混了，可能是光分库不分表，也可能是光分表不分库，都有可能。我先给大家抛出来一个场景。<br> <br>假如我们现在是一个小创业公司（或者是一个BAT公司刚兴起的一个新部门），现在注册用户就20万，每天活跃用户就1万，每天单表数据量就1000，然后高峰期每秒钟并发请求最多就10。。。天，就这种系统，随便找一个有几年工作经验的，然后带几个刚培训出来的，随便干干都可以。<br> <br>结果没想到我们运气居然这么好，碰上个CEO带着我们走上了康庄大道，业务发展迅猛，过了几个月，注册用户数达到了2000万！每天活跃用户数100万！每天单表数据量10万条！高峰期每秒最大请求达到1000！同时公司还顺带着融资了两轮，紧张了几个亿人民币啊！公司估值达到了惊人的几亿美金！这是小独角兽的节奏！<br> <br>好吧，没事，现在大家感觉压力已经有点大了，为啥呢？因为每天多10万条数据，一个月就多300万条数据，现在咱们单表已经几百万数据了，马上就破千万了。但是勉强还能撑着。高峰期请求现在是1000，咱们线上部署了几台机器，负载均衡搞了一下，数据库撑1000 QPS也还凑合。但是大家现在开始感觉有点担心了，接下来咋整呢。。。。。。<br> <br>再接下来几个月，我的天，CEO太牛逼了，公司用户数已经达到1亿，公司继续融资几十亿人民币啊！公司估值达到了惊人的几十亿美金，成为了国内今年最牛逼的明星创业公司！天，我们太幸运了。<br> <br>但是我们同时也是不幸的，因为此时每天活跃用户数上千万，每天单表新增数据多达50万，目前一个表总数据量都已经达到了两三千万了！扛不住啊！数据库磁盘容量不断消耗掉！高峰期并发达到惊人的5000~8000！别开玩笑了，哥。我跟你保证，你的系统支撑不到现在，已经挂掉了！<br> <br>好吧，所以看到你这里你差不多就理解分库分表是怎么回事儿了，实际上这是跟着你的公司业务发展走的，你公司业务发展越好，用户就越多，数据量越大，请求量越大，那你单个数据库一定扛不住。<br> <br>比如你单表都几千万数据了，你确定你能抗住么？绝对不行，单表数据量太大，会极大影响你的sql执行的性能，到了后面你的sql可能就跑的很慢了。一般来说，就以我的经验来看，单表到几百万的时候，性能就会相对差一些了，你就得分表了。<br> <br>分表是啥意思？就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户id来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在200万以内。<br> <br>分库是啥意思？就是你一个库一般我们经验而言，最多支撑到并发2000，一定要扩容了，而且一个健康的单库并发值你最好保持在每秒1000左右，不要太大。那么你可以将一个库的数据拆分到多个库中，访问的时候就访问一个库好了。<br> <br>这就是所谓的分库分表，为啥要分库分表？你明白了吧</p>
<p>（2）用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？<br> <br>这个其实就是看看你了解哪些分库分表的中间件，各个中间件的优缺点是啥？然后你用过哪些分库分表的中间件。<br> <br>比较常见的包括：cobar、TDDL、atlas、sharding-jdbc、mycat<br> <br>cobar：阿里b2b团队开发和开源的，属于proxy层方案。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库join和分页等操作。<br> <br>TDDL：淘宝团队开发的，属于client层方案。不支持join、多表查询等语法，就是基本的crud语法是ok，但是支持读写分离。目前使用的也不多，因为还依赖淘宝的diamond配置管理系统。<br> <br>atlas：360开源的，属于proxy层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在5年前了。所以，现在用的公司基本也很少了。<br> <br>sharding-jdbc：当当开源的，属于client层方案。确实之前用的还比较多一些，因为SQL语法支持也比较多，没有太多限制，而且目前推出到了2.0版本，支持分库分表、读写分离、分布式id生成、柔性事务（最大努力送达型事务、TCC事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从2017年一直到现在，是不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也可以选择的方案。<br> <br>mycat：基于cobar改造的，属于proxy层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于sharding jdbc来说，年轻一些，经历的锤炼少一些。<br> <br>所以综上所述，现在其实建议考量的，就是sharding-jdbc和mycat，这两个都可以去考虑使用。<br> <br>sharding-jdbc这种client层方案的优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要耦合sharding-jdbc的依赖；<br> <br>mycat这种proxy层方案的缺点在于需要部署，自己及运维一套中间件，运维成本高，但是好处在于对于各个项目是透明的，如果遇到升级之类的都是自己中间件那里搞就行了。<br> <br>通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用sharding-jdbc，client层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；<br> <br>但是中大型公司最好还是选用mycat这类proxy层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护mycat，然后大量项目直接透明使用即可。<br> <br>我们，数据库中间件都是自研的，也用过proxy层，后来也用过client层<br> <br>（3）你们具体是如何对数据库如何进行垂直拆分或水平拆分的？<br> <br>水平拆分的意思，就是把一个表的数据给弄到多个库的多个表里去，但是每个库的表结构都一样，只不过每个库表放的数据是不同的，所有库表的数据加起来就是全部数据。水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来抗更高的并发，还有就是用多个库的存储容量来进行扩容。<br> <br>垂直拆分的意思，就是把一个有很多字段的表给拆分成多个表，或者是多个库上去。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，会将较少的访问频率很高的字段放到一个表里去，然后将较多的访问频率很低的字段放到另外一个表里去。因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。<br> <br>这个其实挺常见的，不一定我说，大家很多同学可能自己都做过，把一个大表拆开，订单表、订单支付表、订单商品表。<br> <br>还有表层面的拆分，就是分表，将一个表变成N个表，就是让每个表的数据量控制在一定范围内，保证SQL的性能。否则单表数据量越大，SQL性能就越差。一般是200万行左右，不要太多，但是也得看具体你怎么操作，也可能是500万，或者是100万。你的SQL越复杂，就最好让单表行数越少。<br> <br>好了，无论是分库了还是分表了，上面说的那些数据库中间件都是可以支持的。就是基本上那些中间件可以做到你分库分表之后，中间件可以根据你指定的某个字段值，比如说userid，自动路由到对应的库上去，然后再自动路由到对应的表里去。<br> <br>你就得考虑一下，你的项目里该如何分库分表？一般来说，垂直拆分，你可以在表层面来做，对一些字段特别多的表做一下拆分；水平拆分，你可以说是并发承载不了，或者是数据量太大，容量承载不了，你给拆了，按什么字段来拆，你自己想好；分表，你考虑一下，你如果哪怕是拆到每个库里去，并发和容量都ok了，但是每个库的表还是太大了，那么你就分表，将这个表分开，保证每个表的数据量并不是很大。<br> <br>而且这儿还有两种分库分表的方式，一种是按照range来分，就是每个库一段连续的数据，这个一般是按比如时间范围来的，但是这种一般较少用，因为很容易产生热点问题，大量的流量都打在最新的数据上了；或者是按照某个字段hash一下均匀分散，这个较为常用。<br> <br>range来分，好处在于说，后面扩容的时候，就很容易，因为你只要预备好，给每个月都准备一个库就可以了，到了一个新的月份的时候，自然而然，就会写新的库了；缺点，但是大部分的请求，都是访问最新的数据。实际生产用range，要看场景，你的用户不是仅仅访问最新的数据，而是均匀的访问现在的数据以及历史的数据<br> <br>hash分法，好处在于说，可以平均分配没给库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的这么一个过程
 </p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】如何提升你的能力？给年轻程序员的几条建议</title>
    <url>/2019/01/26/how-to-improve-your-ability/</url>
    <content><![CDATA[<p>一转眼工作已有8年，前两天公司一位初入职场的同事希望我给一些建议与经验。我觉得这个话题很有价值，这里以个人的想法与经历写成此文，希望给年轻的开发者们一些启发。</p>
<p>我工作过的公司有4家，NVIDIA, Google, Slide和Glow。其中两家是知名的大公司，Slide我是D轮过后加入的，那时约150人。Glow则是从它第一天创立，一直走到现在。个人的工作也从Developer，Tech Lead，Engineering Manager到CTO。这些经历使我对程序员的个人发展之路有比较全面的看法。</p>
<p>如果你问一个年轻的前端开发人员，你在今后的3年内如何提升自己的能力？他可能会说“我现在对Web前端比较熟悉，但我想深入了解AngularJS，另外React现在发展的很快我也想看一下。之后，我会花时间去学习iOS和Android开发。”看上去不错，但缺乏系统性的目标。或者说，他制定了学什么，但对为什么要学这些并没有仔细的思考。</p>
<p>在技术领域，有太多的东西会迅速的过时，如何利用有限时间，最大化你的长期收益？这里我可以给出几条建议</p>
<span id="more"></span>

<h3 id="打造你的工具箱"><a href="#打造你的工具箱" class="headerlink" title="打造你的工具箱"></a>打造你的工具箱</h3><p>工欲善其事，必先利其器。每个开发者都应该有一把自己的瑞士军刀，在将来漫长的职业生涯中，这些工具可以为你省下宝贵的时间，并帮助你更好的组织个人知识库。举两个例子</p>
<ul>
<li>一套高效的开发环境</li>
<li>一个信息采集器和一本笔记本</li>
</ul>
<h4 id="高效的开发环境"><a href="#高效的开发环境" class="headerlink" title="高效的开发环境"></a>高效的开发环境</h4><p>我们可以从编缉器谈起，这里有IDE vs Text Editor，有Vim vs Emacs，有Sublime vs Atom，那该如何选择呢？在做选择之前，我们先想想自己的目标。我们希望这是一个长期的投资，这款编缉器能被长期使用，在这个过程不断的打磨，使其能完全适合自己的习惯，最大化编缉效率。如果程序员是侠客，编缉器则是他手中的剑。</p>
<p>虽然我是Vim的重度用户，但我觉得当年选择Vim时有欠考虑。如果让我重选一次，我的第一选择会是Emacs，第二选择会是Atom。Emacs已存在30年，社区仍然活跃，其可扩展性在编缉器中无人能出其右。Emacs的脚本语言elisp又是lisp的一种dialect，我觉得对lisp的学习可以提升程序员对编程核心思想的理解。另一个加分点是Emacs由于其本身的高门槛及lisp特质，吸引了大批高质素的程序员，其社区可谓藏龙卧虎，更诞生了像Org-mode这样神级的插件。反观Vim，Vim的精髓在于Mode editing，这是值得学习的，可以极大提高文本编缉的效率。但当你熟悉了这一理念后，我觉得可以转投其他编缉器，因为Vim的架构与Vimscript限制了其扩展性。Emacs通过Evil插件非常完整的支持了Mode editing，其他主流的编辑器也有类似插件，所以你一旦掌握了这个理念，在别的编辑器中也可以发挥作用。可能有人会说没有一个Vim emulator能做到Vim 100%的功能，但重点不在于某条指令是否被移植，而是mode editing思想的精髓能否被移植，我觉得答案是肯定的。</p>
<p>再看Atom vs Sublime，Atom的可扩展性非常好，它的大部分核心功能也是以插件的方式实现，这点与Emacs有异曲同工之妙。并且其开源的特性，使我相信它有比Sublime更持久的生命力。</p>
<p>关于IDE，我的看法是，我不排斥IDE，但每个IDE都是为了某个特定的任务或是编程语言服务的。做为一个有追求的程序员，可以用IDE，但依然需要精通一个强大的通用编缉器。</p>
<p>类似编缉器，高效的开发环境还包括Shell，Launcher，窗口管理器，文档阅读器等等。其中有一部分只需要你化很少的时间就可以完成配置，它们的投资回报率是非常高。</p>
<h4 id="信息采集器和笔记本"><a href="#信息采集器和笔记本" class="headerlink" title="信息采集器和笔记本"></a>信息采集器和笔记本</h4><p>前者是用来收集别人产生的信息，后者则是收集自己产生的信息。前者一个简单的例子就是浏览器的Bookmark。你需要能随时将一组有用的信息归档，并在未来的某个时刻快速找到它。后者最直观的例子则是Mac OS或是iOS自带的笔记本，这里的目的是能随时随地记录你自己的想法。从本质上讲，就是你需要有一套好用的工具来做你的知识库管理（Knowledge management），也可以说是你知识和思想的外部备份。我个人现在是用Evernote同时来做信息采集与笔记的。如果有一个好的流程，你也完全可以用两个工具来分别把这两件事做好。但我建议你花足够多的时间来思考如何组织你的个人知识库。</p>
<p>以上只是两个典型的例子，你需要做的是发现那些你要长期从事的任务（往往不随技术而改变，也不随公司而改变），将完成这些任务所需的工具调整至最优。再举一个例子，我会留意身边的程序员所用的键盘。只有少部分的程序员会买高端的静电容键盘，比如HHKB。而在我看来，这明显是一笔很划得来的投资，程序员在工作的大部分时间里都需要和键盘打交道，一个舒适的打字体验是非常有收益的，更何况这类高品质的键盘都非常的耐用。</p>
<h3 id="开阔你的视野，构建你的技术体系"><a href="#开阔你的视野，构建你的技术体系" class="headerlink" title="开阔你的视野，构建你的技术体系"></a>开阔你的视野，构建你的技术体系</h3><p>首先你要给自己设定一个目标，就如同一个公司会设定它的Vision。</p>
<ul>
<li>目标要够大，这样你才能看到更多的风景。</li>
<li>目标应该设定在解决哪一类问题，而不是精通哪一类技术。技术只是手段，不是目的。</li>
</ul>
<p>例如，“我要成为iOS developer中的达人”这个目标，就远不如“我要成为前端应用开发的专家”来得有意义。前者学到深处你可能会去钻研iOS framework里各种奇技淫巧，而后者你会开始关注视觉与交互设计，研究各平台间的差异与共同趋势。显然，后者更有助于你的个人发展。</p>
<p>不过即便有了明确的目标，选择哪一类技术学习，如何学习，在信息过载的今天依然是一个难题。常有的观点是应该学习最新的技术，因为老的已经过时，而反对的观点则是新技术还不成熟。我个人的观点是，当初入一个领域时，选择主流技术框架；当你有一定经验后，选择技术时更应该关注背后的推动者，我相信优秀的人和团队总能打造优秀的产品，无论是商业公司还是开源社区。不必太在意技术的新旧，因为可能很快都会成为过去时。你真正要学习的是技术背后的思想。有不少语言与开源项目会写它的Coding philosophy，这是很有意思的，你可以从它们的源代码中去验证这些编程理念。以Python为例，如果你执行import this就会看到它的理念，再如Python中一个著名的开源库Celery，在它的文档有专门一节讲述它的编程理念。它们对你的影响会比这些技术本身来得更深远，这是我给初学者们的一个忠告。同理，我非常推荐读一些优秀开源库或是语言的源代码，例如Python的标准库绝大部分都是用Python实现的，而且可读性非常好。如果学习一门技术仅仅停留在用的层面上，你就还没有完全吸取其中的精华，而且学习的收益会随着技术的过时而消失。</p>
<p>我的另一个学习原则是，在选择学习一门新技术时，最大化它与你现有知识库的差异性。读起来可能有拗口，例如你会Django，接下去你应该去学习Ruby on Rails还是NodeJS? 依据这个原则，你应该学NodeJS，因为它的异步IO模型在理念上与Django的同步模型差异很大，而RoR则与Django更多相似之处。但更好的选择是不要去学另一个Web framework，去学习ZeroMQ或是Redis，这两者对于Web development也非常有帮助，这样就做到了最大化差异。从构建一个程序员的技术理念角度，我会推荐每一个程序至少去了解Lisp或是一门Functional programming language，不管你是否会在可见的未来用到，它们能让你从一个不同的角度看待编程。</p>
<p>最后我建议每个程序员都应该经营一款自己的产品，它可以是一款app，一个网站或是一个开源软件。除非你是一个创业公司的早期员工，不然你可能没有机会将所有学到的技术或是理念都付之实践，有很多人想成为全栈工程师，最快的捷径就是打造一款自己的产品。任何一个设计师都会精心打造自己的Portfolio，但大部分程序员却不会。当评估一个程序员的Coding能力时，我会去看他的Github上是否有出彩的项目，可惜国内绝大部分程序员的Github空空如也，或者只有一些非常简单的程序。我建议大家好好经营自己Github上项目，这不但可以提高你的声誉，对你将来的求职也非常有帮助。当你报怨求职面试时又被问到各种无厘头的程序题时，有没有想过面试官也很无奈，因为他没有任何其他方法得知你的Coding能力究竟如何。如果每一个程序员都有自己的作品，我想程序员的面试会简单许多。</p>
<h3 id="重视沟通能力的培养"><a href="#重视沟通能力的培养" class="headerlink" title="重视沟通能力的培养"></a>重视沟通能力的培养</h3><p>当被问到“你觉得Junior Developer和Senior Developer最大的差别是什么”时，我最自然的反应是沟通与文档。沟通包括程序员团队内部的沟通，与其他团队的沟通，与Manager的沟通等等。我不认为自己有能力把这些问题非常概括地说清楚，不过我可以给一条建议，那就是先学会和你的Manager沟通，让他来教你其余的部分。许多公司都会设置Manager与组员的1:1，一个有效率的1:1应该大部分时间有组员来主导。这需要你在1:1之前花足够多的时间来考虑要问的问题，并且最好提前1天发给Manager，让他有机会思考答案。许多人对此不太重视，或者只问非常具体的问题而不是一些开放性问题，这样你很难在你的Manager身上学到东西。如果你渐渐懂得如何利用1:1的时间，它很会成为你在工作中单位时间投资回报率最高的活动。</p>
<h3 id="累积你的人脉"><a href="#累积你的人脉" class="headerlink" title="累积你的人脉"></a>累积你的人脉</h3><p>每个人都明白人脉的重要性，但实际做起来却不容易。参加一些线下的会议或是活动，可能是最直接的扩展人脉的方式之一。可惜大部分人似乎只是去听了一场技术讲座就回家了。当然，这和不少活动的时间安排也有关系，讲座时间排得太满，茶歇时间短，加上有时嘉宾迟到或是没控制好时间，干脆就把茶歇取消了。而实际上，结识一两个同道中人远比听技术讲座有价值。下次去参加这类会议，不妨给你自己设个目标，比如至少加两个同行的微信。之后维系你的人脉可能需要花更多的时间，下了班或是周末找你的朋友们喝个咖啡吧！</p>
<p>另外我觉得每个人都需要一个职场导师，他可以是你第一份工作的导师或是Manager，也可以是你认识的其他前辈。你们需要维系一个非常长期的关系，不止于一家公司，最好贯穿你的整个职业生涯。每当你遇到疑惑时，都可以询求他的建议，我觉得这将是你最宝贵的一笔人脉财富。</p>
<h3 id="寻找发挥你才华的平台"><a href="#寻找发挥你才华的平台" class="headerlink" title="寻找发挥你才华的平台"></a>寻找发挥你才华的平台</h3><p>最后也是最重要的一步，找到适合你的公司。做为求职者评估一家公司可以看三个方面</p>
<ul>
<li>公司的发展前景（大公司的话，看所在部门的发展前景）</li>
<li>你将要加入的团队</li>
<li>薪资福利</li>
</ul>
<p>所以在面试一家公司的时候，你要意识到面试是双向的，公司在面试你的同时，你也在面试这家公司。面试前你应该对这家公司做足功课，准备好一些有质量的问题，比如指出产品中的问题，询问开发流程或是如何做绩效评估。到时你也可以检验一下你的面试官是否合格。</p>
<p>每次选择公司对以上三个方面都应兼顾，但在职业生涯的不同阶段，侧重点不同。比如，在刚刚工作时，加入一个优秀的团队最为重要，他们可以教会你很多东西，提升你的能力。工作5年之后，你需要一个平台施展你的才华，体现个人价值，公司发展前景的重要性迅速提升。当你做出一番成绩，证明了自己的价值之后，逐渐进入收获期，就有了与公司要价的资格。另一方面，团队实力对公司的前景也有很大的影响。</p>
<p>对一个刚毕业，初入职场的同学，一个近几年被问了无数次的问题“我的第一份工作是去创业公司还是大公司？”我的回答仍旧是“加入一个优秀的团队最为重要”。一些知名的大公司，团队的素质是有一定保证，但创业公司则不然，团队素质参差不齐，所以如我前面所说你需要面试这个团队，做出自己的判断。不过除了团队因素之外，我想提一下毕业生去创业公司的几个好处。首先，在刚毕业的一段时间内，经济压力小，是最自由最能承受风险的时期，而这段时间往往不长，所以应把握好这个去创业公司的黄金时段。其次，所有的学生进入大公司后，都会担任初级职位，某种程度上来讲是学校学习的延续，规范有条理，但缺乏独立性和创新性，而这正是中国大部分学生所欠缺的。这方面的能力在一家创业公司可以得到快速锻炼，而在大公司可能要等升到中级职位后才有这方面的机会。个人观点，仅供参考。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>我觉得步入职场的前3年对今后的发展尤其重要，希望此文能对年轻的程序员们有所帮助。欢迎评论！</p>
<blockquote>
<p>原文地址：<a href="https://tech.glowing.com/cn/advices-to-junior-developers/">https://tech.glowing.com/cn/advices-to-junior-developers/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>使用git webhook实现代码自动部署</title>
    <url>/2019/08/19/git-webhook/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>每次项目修改完代码后，需要通过一些文件传输工具上传到服务器，显得有些繁琐。希望git push的时候，服务器上的代码也能自动更新，这样也能节省不少时间。</p>
<span id="more"></span>

<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>利用git的hook机制，当每次用户提交了代码后触发一个动作去请求我们自己的服务器，服务器收到通知后将代码重新拉取一下，实现代码的自动部署。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="服务端设置SSH秘钥免密登录"><a href="#服务端设置SSH秘钥免密登录" class="headerlink" title="服务端设置SSH秘钥免密登录"></a>服务端设置SSH秘钥免密登录</h4><ol>
<li>在客户端生成公钥和私钥</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen [-t rsa] [-C <span class="string">&quot;comment&quot;</span>]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>将公钥拷贝到需要免密登录的服务端，路径<code>/path/to/.ssh</code></li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>/path/to/.ssh 文件权限必须为700</li>
<li>/path/to/.ssh/authorized_keys 权限必须为600</li>
<li>公钥文件权限必须为600</li>
</ol>
</blockquote>
<h4 id="在服务端创建一个站点，用来响应hook动作。"><a href="#在服务端创建一个站点，用来响应hook动作。" class="headerlink" title="在服务端创建一个站点，用来响应hook动作。"></a>在服务端创建一个站点，用来响应hook动作。</h4><h5 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h5><figure class="highlight nginxconf"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>  /path/to/hook.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">try_files</span> $uri $uri/ /index.php?$query_string;</span><br><span class="line">		<span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* ^\/(upload|plugins|themes)\/.+\.(html|php)$</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php(.*)$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span> <span class="regexp"> ^((?U).+\.php)(/?.+)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="hook-php"><a href="#hook-php" class="headerlink" title="hook.php"></a>hook.php</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Git钩子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span> &amp;&amp; safe_filter(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="variable">$_POST</span> &amp;&amp; safe_filter(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$_REQUEST</span> &amp;&amp; safe_filter(<span class="variable">$_REQUEST</span>);</span><br><span class="line"><span class="variable">$_COOKIE</span> &amp;&amp; safe_filter(<span class="variable">$_COOKIE</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$gitMaps</span> = [</span><br><span class="line">    <span class="string">&#x27;xxxx&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;xxx@qq.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;domain&#x27;</span> =&gt; <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;savePath&#x27;</span> =&gt; <span class="string">&#x27;/www/wwwroot/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gitPath&#x27;</span> =&gt; <span class="string">&#x27;git@code.aliyun.com:xxx/xxx.git&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$logPath</span> = <span class="string">&#x27;git-webhook.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$projectName</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] ?? <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$projectName</span>) </span><br><span class="line">|| !array_key_exists(<span class="variable">$projectName</span>, <span class="variable">$gitMaps</span>))&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$gitMaps</span>[<span class="variable">$projectName</span>]);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $email</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $domain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $savePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $gitPath</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在.git文件夹</span></span><br><span class="line"><span class="variable">$isCloned</span> = is_dir(<span class="variable">$savePath</span> . <span class="variable">$domain</span> . <span class="string">&#x27;/.git&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$isCloned</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$requestBody</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$requestBody</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析Git服务器通知过来的JSON信息</span></span><br><span class="line">    <span class="variable">$content</span> = json_decode(<span class="variable">$requestBody</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若是主分支且提交数大于0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$content</span>[<span class="string">&#x27;ref&#x27;</span>] == <span class="string">&#x27;refs/heads/master&#x27;</span> </span><br><span class="line">        &amp;&amp; <span class="variable">$content</span>[<span class="string">&#x27;total_commits_count&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 拉取更新</span></span><br><span class="line">        shell_exec(<span class="string">&quot;cd <span class="subst">&#123;$savePath&#125;</span><span class="subst">&#123;$domain&#125;</span> &amp;&amp; git pull&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改web路径的权限</span></span><br><span class="line">        shell_exec(<span class="string">&quot;chown -R www.www <span class="subst">&#123;$savePath&#125;</span><span class="subst">&#123;$domain&#125;</span>&quot;</span>); </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="variable">$log</span> = sprintf(<span class="string">&#x27;%s在%s向%s项目的%s分支推送了%s个提交&#x27;</span>,</span><br><span class="line">            <span class="variable">$content</span>[<span class="string">&#x27;user_name&#x27;</span>],</span><br><span class="line">            date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>),</span><br><span class="line">            <span class="variable">$content</span>[<span class="string">&#x27;repository&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">            <span class="variable">$content</span>[<span class="string">&#x27;ref&#x27;</span>],</span><br><span class="line">            <span class="variable">$content</span>[<span class="string">&#x27;total_commits_count&#x27;</span>]</span><br><span class="line">        );</span><br><span class="line">        file_put_contents(<span class="variable">$logPath</span>, <span class="variable">$log</span>, FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果本地项目不存在，直接克隆项目</span></span><br><span class="line">    <span class="comment">//注:在这里需要设置用户邮箱和用户名,不然后面无法拉去代码</span></span><br><span class="line">    <span class="comment">//shell_exec 需要root的权限</span></span><br><span class="line">    shell_exec(<span class="string">&quot;git config --global user.email <span class="subst">&#123;$email&#125;</span>&#125;&quot;</span>);</span><br><span class="line">    shell_exec(<span class="string">&quot;git config --global user.name <span class="subst">&#123;$name&#125;</span>&#125;&quot;</span>);</span><br><span class="line">    shell_exec(<span class="string">&quot;git clone <span class="subst">&#123;$gitPath&#125;</span> <span class="subst">&#123;$savePath&#125;</span><span class="subst">&#123;$domain&#125;</span>&quot;</span>);</span><br><span class="line">    shell_exec(<span class="string">&quot;chown -R www.www <span class="subst">&#123;$savePath&#125;</span><span class="subst">&#123;$domain&#125;</span>&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$log</span> = sprintf(<span class="string">&#x27;克隆项目&#x27;</span>);</span><br><span class="line">    file_put_contents(<span class="variable">$logPath</span>, <span class="variable">$log</span>, FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * php防注入和XSS攻击过滤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_filter</span>(<span class="params">&amp;<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ra</span> =[</span><br><span class="line">        <span class="string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/script/&#x27;</span>, <span class="string">&#x27;/javascript/&#x27;</span>, <span class="string">&#x27;/vbscript/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/expression/&#x27;</span>, <span class="string">&#x27;/applet/&#x27;</span>, <span class="string">&#x27;/meta/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/xml/&#x27;</span>, <span class="string">&#x27;/blink/&#x27;</span>, <span class="string">&#x27;/link/&#x27;</span>, <span class="string">&#x27;/style/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/embed/&#x27;</span>, <span class="string">&#x27;/object/&#x27;</span>, <span class="string">&#x27;/frame/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/layer/&#x27;</span>, <span class="string">&#x27;/title/&#x27;</span>, <span class="string">&#x27;/bgsound/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/base/&#x27;</span>, <span class="string">&#x27;/onload/&#x27;</span>, <span class="string">&#x27;/onunload/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/onchange/&#x27;</span>, <span class="string">&#x27;/onsubmit/&#x27;</span>, <span class="string">&#x27;/onreset/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/onselect/&#x27;</span>, <span class="string">&#x27;/onblur/&#x27;</span>, <span class="string">&#x27;/onfocus/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/onabort/&#x27;</span>, <span class="string">&#x27;/onkeydown/&#x27;</span>, <span class="string">&#x27;/onkeypress/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/onkeyup/&#x27;</span>, <span class="string">&#x27;/onclick/&#x27;</span>, <span class="string">&#x27;/ondblclick/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/onmousedown/&#x27;</span>, <span class="string">&#x27;/onmousemove/&#x27;</span>, <span class="string">&#x27;/onmouseout/&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;/onmouseover/&#x27;</span>, <span class="string">&#x27;/onmouseup/&#x27;</span>, <span class="string">&#x27;/onunload/&#x27;</span></span><br><span class="line">     ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$arr</span>)) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!is_array(<span class="variable">$value</span>)) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//不对magic_quotes_gpc转义过的字符使用addslashes()</span></span><br><span class="line">                <span class="comment">//避免双重转义</span></span><br><span class="line">                <span class="keyword">if</span> (!get_magic_quotes_gpc())  </span><br><span class="line">                &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 给单引号（&#x27;）、双引号（&quot;）、反斜线（\）</span></span><br><span class="line">                    <span class="comment">//与 NUL（NULL 字符）加上反斜线转义</span></span><br><span class="line">                    <span class="variable">$value</span> = addslashes(<span class="variable">$value</span>); </span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">//删除非打印字符，粗暴式过滤xss可疑字符串</span></span><br><span class="line">                <span class="variable">$value</span> = preg_replace(<span class="variable">$ra</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$value</span>);     </span><br><span class="line">            </span><br><span class="line">                <span class="comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span></span><br><span class="line">                <span class="variable">$arr</span>[<span class="variable">$key</span>] = htmlentities(strip_tags(<span class="variable">$value</span>)); </span><br><span class="line">            </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            </span><br><span class="line">                safe_filter(<span class="variable">$arr</span>[<span class="variable">$key</span>]);</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>php</tag>
        <tag>git</tag>
        <tag>webhook</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>IP概览</title>
    <url>/2019/01/28/ip-overview/</url>
    <content><![CDATA[<h2 id="IP地址的概念"><a href="#IP地址的概念" class="headerlink" title="IP地址的概念"></a>IP地址的概念</h2><p>IP 地址是我们进行TCP/IP通讯的基础，每个连接到网络上的计算机都必须有一个IP地址。我们目前使用的IP地址是32位的，通常以点分十进制表示。例如: 192.168.0.181。IP地址的格式为: IP地址 = 网络地址 + 主机地址 或者 IP地址=主机地址 + 子网地址 + 主机地址。一个简单的IP地址其实包含了网络地址和主机地址两部分重要的信息。 </p>
<span id="more"></span>

<h3 id="IP地址基本概念"><a href="#IP地址基本概念" class="headerlink" title="IP地址基本概念"></a>IP地址基本概念</h3><p>Internet依靠TCP/IP协议，在全球范围内实现不同硬件结构、不同操作系统、不同网络系统的互联。在Internet上，每一个节点都依靠唯一的IP地址互相区分和相互联系。IP地址是一个32位二进制数的地址, 由4个8位字段组成，每个字段之间用点号隔开,用于标识TCP/IP宿主机。 </p>
<p>每个IP地址都包含两部分:网络ID和主机ID。网络ID标识在同一个物理网络上的所有宿主机，主机ID 标识该物理网络上的每一个宿主机，于是整个Internet上的每个计算机都依靠各自唯一的IP地址来标识。 </p>
<p>IP地址构成了整个Internet的基础，它是如此重要，每一台联网的计算机无权自行设定IP地址，有一个统一的机构—IANA负责对申请的组织分配唯一的网络ID,而该组织可以对自己的网络中的每一个主机分配一个唯一的主机ID，正如一个单位无权决定自己在所属城市的街道名称和门牌号，但可以自主决定本单位内部的各个办公室编号一样。 </p>
<h3 id="静态IP与动态IP"><a href="#静态IP与动态IP" class="headerlink" title="静态IP与动态IP"></a>静态IP与动态IP</h3><p>IP地址是一个32位二进制数的地址，理论上讲,有大约40亿（2的32次方）个可能的地址组合，这似乎是一个很大的地址空间。实际上，根据网络ID和主机ID的不同位数规则，可以将IP地址分为A（7位网络ID和24位主机ID）、B（14位网络ID和16位主机ID）、C（21位网络ID和8位主机ID）三类，由于历史原因和技术发展的差异，A类地址和B类地址几乎分配殆尽，目前能够供全球各国各组织分配的只有C类地址。所以说IP地址是一种非常重要的网络资源。 </p>
<p>对于一个设立了因特网服务的组织机构，由于其主机对外开放了诸如WWW、FTP、E-mail等访问服务，通常要对外公布一个固定的IP地址，以方便用户访问。当然，数字IP不便记忆和识别，人们更习惯于通过域名来访问主机，而域名实际上仍然需要被域名服务器（DNS）翻译为IP地址。例如，你的主页地址是<a href="http://www.myhost.com/">www.myhost.com</a> ，用户可以方便地记忆和使用，而域名服务器会将这个域名翻译为101.12.123.234，这才是你在网上的真正地址。 </p>
<p>而对于大多数拨号上网的用户，由于其上网时间和空间的离散性，为每个用户分配一个固定的IP地址（静态I P）是非常不可取的，这将造成IP地址资源的极大浪费。因此这些用户通常会在每次拨通ISP的主机后，自动获得一个动态的IP地址，该地址当然不是任意的，而是该ISP申请的网络ID和主机ID的合法区间中的某个地址。拨号用户任意两次连接时的IP地址很可能不同，但是在每次连接时间内IP地址不变。</p>
<h2 id="IP地址类型"><a href="#IP地址类型" class="headerlink" title="IP地址类型"></a>IP地址类型</h2><p>最初设计者，为了便于网络寻址以及层次化构造网络，每个IP地址包括两个标识(ID)，即网络ID和主机ID。同一个物理网络上的所有机器都用同一个网络ID，网络上的一个主机(包括网络上工作站，服务器和路由器等)有一个主机ID与其对应。 </p>
<p>IP地址根据网络ID的不同分为5种类型: A/B/C/D/E。  </p>
<h3 id="A-class-IP"><a href="#A-class-IP" class="headerlink" title="A class IP:"></a>A class IP:</h3><p>结构: 网络地址(1字节) + 主机地址(3字节)<br>保留: 网络地址的最高位(二进制)必须是0, 值0和127不能使用。<br>范围: 1.x.x.x ~ 126.x.x.x<br>数量: ( ( 2 ** ( 8 - 1 ) ) - 2 ) * ( ( 2 ** 24 ) - 2 ) = 126 * 16,777,214 = 2,113,928,964<br>使用: 国家级</p>
<h3 id="B-class-IP"><a href="#B-class-IP" class="headerlink" title="B class IP:"></a>B class IP:</h3><p>结构: 网络地址(2字节) + 主机地址(2字节)<br>保留: 网络地址的最高两位(二进制)必须是10<br>范围: 128.x.x.x ~ 191.x.x.x<br>主机: ( ( 2 ** ( 16 - 2 ) ) ) * ( ( 2 ** 16 ) - 2 ) = 16384 * 65534 = 1,073,709,056<br>使用: 跨国的组织 </p>
<h3 id="C-class-IP"><a href="#C-class-IP" class="headerlink" title="C class IP:"></a>C class IP:</h3><p>结构: 网络地址(3字节) + 主机地址(1字节)<br>保留: 网络地址的最高三位(二进制)必须是110<br>范围: 192.x.x.x ~ 223.x.x.x<br>主机: ( ( 2 ** ( 24 - 3 ) ) ) * ( ( 2 ** 8 ) - 2 ) = 2097152 * 254 = 532,676,608<br>使用: 企业组织 </p>
<h3 id="D-class-for-Multicast"><a href="#D-class-for-Multicast" class="headerlink" title="D class for Multicast:"></a>D class for Multicast:</h3><p>保留: 网络地址的最高四位(二进制)必须是1110<br>作用: 它是一个专门保留的地址, 它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。 </p>
<h3 id="E-class-for-Reservation"><a href="#E-class-for-Reservation" class="headerlink" title="E class for Reservation:"></a>E class for Reservation:</h3><p>保留: 网络地址的最高五位(二进制)必须是11110<br>用作: 暂时无用，保留待用。</p>
<p>备注: 全零 0.0.0.0 地址对应于当前主机。全”1”的 255.255.255.255 是当前子网的广播地址。  </p>
<h2 id="网络掩码-Net-Mask-是做什么用的"><a href="#网络掩码-Net-Mask-是做什么用的" class="headerlink" title="网络掩码(Net Mask)是做什么用的"></a>网络掩码(Net Mask)是做什么用的</h2><p>IP地址必须和一个网络掩码(Net Mask)对应使用, 缺一不可。网络掩码的主要作用是告诉计算机如何从IP地址中析取网络标识和主机标识。A/B/C class 都有缺省的网络掩码, A -&gt; 255.0.0.0, B -&gt; 255.255.0.0, C -&gt; 255.255.255.0 </p>
<h2 id="子网掩码-Sub-Net-Mask-是做什么用的"><a href="#子网掩码-Sub-Net-Mask-是做什么用的" class="headerlink" title="子网掩码(Sub-Net Mask)是做什么用的"></a>子网掩码(Sub-Net Mask)是做什么用的</h2><p>子网掩码的作用是将一个主机量超过了物理设备的限制，过大的IP网络划分为更多的子网络，而每个子网络的主机数量相对而言维持在一个较少的量上。起到物理设备上的负载均衡以及提高网络的可靠性。其实现是通过设置掩码来将原本属于主机ID的位(bit)借用给网络ID, 从而起到减少主机数量的作用。当通过设置掩码从主机ID来借用位(bit)时， 至少要留下2个位(bit)来做主机ID。因为只留一个位的情况下，全0和全1都没有意义(见前边)。 </p>
<h2 id="什么是私有IP地址和保留IP地址"><a href="#什么是私有IP地址和保留IP地址" class="headerlink" title="什么是私有IP地址和保留IP地址"></a>什么是私有IP地址和保留IP地址</h2><p>私有IP地址和保留IP地址是两个常见的翻译用法。概念是一样的，都是对英文中的Private IP的翻译。我们以下通称为私有IP地址。 </p>
<p>实践中证明，并不是每一台联网的计算都需要一个全球唯一的IP地址，同时为了减少对于有限的IP地址资源的消耗，最初设计者在A/B /C class 中各自划分了一些地址范围作为私有地址来使用。 </p>
<ul>
<li>A class: 10.0.0.0 ~ 10.255.255.255  </li>
<li>B class: 172.16.0.0 ~ 172.31.255.255  </li>
<li>C class: 192.168.0.0 ~ 192.168.255.255  </li>
</ul>
<h2 id="私有IP地址的主要特点"><a href="#私有IP地址的主要特点" class="headerlink" title="私有IP地址的主要特点:"></a>私有IP地址的主要特点:</h2><ul>
<li>在全球范围内不具有唯一性，因此不能唯一标识一台联网的计算机。无需担心私有IP地址在全球范围内的冲突问题。 </li>
<li>私有IP地址的路由信息不能对外发布，外部的IP数据包无法路由到私有IP地址的计算机上。 </li>
<li>IP数据包中的源地址和目的地址是私有IP地址的, 不能在Internet上的路由器间进行存储转发的操作。 </li>
</ul>
<h2 id="IP地址间传输TCP-IP数据包的流程"><a href="#IP地址间传输TCP-IP数据包的流程" class="headerlink" title="IP地址间传输TCP/IP数据包的流程"></a>IP地址间传输TCP/IP数据包的流程</h2><p>在TCP/IP协议栈的实现中设定了许多的规则，其中有一条就是, 两台联网的主机想直接通讯的话，必须有相同的网络标识和不同的主机标识。具有不同的网络标识的两台主机要想通讯的话必须通过一台中间设备 - 路由器的转发才能实现。 </p>
<h2 id="IP地址在我们身边的不同的应用"><a href="#IP地址在我们身边的不同的应用" class="headerlink" title="IP地址在我们身边的不同的应用"></a>IP地址在我们身边的不同的应用</h2><p>先看看我们目前的主要连接互联网的方式， Dial, ISDN, ADSL, ethernet 等等。其实，只要我们有一个非私有的IP地址，那么我们就可以在 </p>
<p>Internet上冲浪了。呜呼，线路那里来呢？所以我们必须每月向网络接入提供商支付Money来获取到线路的使用权，同时会给我们分配一个非私有的IP地址。那么网络接入提供商的非私有IP地址那里来的呢？当然是申请得来的了。 </p>
<p>根据中国互联网络信息中心(CNNIC)公布的最新数据显示, 截至2004年9月30日, 我国网民数已居世界第二, 而所拥有的IPv4和 IPv6资源均仅占世界的3%, 不仅远远低于美国, 而且也无法与亚太地区日本的7%和16%相比。而另一方面，在亚太地区已分配IP地址中，我国IP 地址总量只占25%, 居于日本29%和韩国21%之间。看到了吗？这就是发达国家的垄断和霸权，我国分配的IPv4的地址资源甚至不如美国的两个大学分配的IPv4的地址资源多。因此，我们时刻要记住打到美帝国主义… </p>
<p>IP地址的分配管理机构: (I CANN)[全球] -&gt; (APNIC)[亚太] -&gt; (CNNIC)[中国] </p>
<p>APNIC规定, 亚太地区需要IP地址资源的企业、单位或团体, 均可申请成为其会员。会员单位使用IP地址, 除了每年每个地址要交纳一定的资源占用费外, 每个会员还要根据等级的不同交纳不等的地址使用费。但是在目前IPv4的地址紧张的情况下企业要想申请到B class 的地址的机会很少，看看长宽，使用的都是C class 的IP地址，增加了路由器的设备和维护费用而已。 </p>
]]></content>
  </entry>
  <entry>
    <title>解决Centos7在Vmware中无法全屏的问题</title>
    <url>/2020/11/30/jie-jue-centos7-zai-vwmare-zhong-wu-fa-quan-pin-de-wen-ti/</url>
    <content><![CDATA[<h2 id="安装Vmware-Tools"><a href="#安装Vmware-Tools" class="headerlink" title="安装Vmware-Tools"></a>安装Vmware-Tools</h2><h3 id="启动系统，点击安装VMware-Tools"><a href="#启动系统，点击安装VMware-Tools" class="headerlink" title="启动系统，点击安装VMware Tools"></a>启动系统，点击安装VMware Tools</h3><h3 id="装载VMware-Tool镜像"><a href="#装载VMware-Tool镜像" class="headerlink" title="装载VMware Tool镜像"></a>装载VMware Tool镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -t auto /dev/cdrom /mnt/cdrom </span><br></pre></td></tr></table></figure>
<h3 id="复制-mnt-cdrom-目录下的-VMwareTools-tar-gz文件到用户目录下，并解压"><a href="#复制-mnt-cdrom-目录下的-VMwareTools-tar-gz文件到用户目录下，并解压" class="headerlink" title="复制 /mnt/cdrom 目录下的 VMwareTools-*.tar.gz文件到用户目录下，并解压"></a>复制 /mnt/cdrom 目录下的 VMwareTools-*.tar.gz文件到用户目录下，并解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /mnt/cdrom/VMwareTools-10.3.10-12406962.tar.gz ~/</span><br><span class="line"><span class="built_in">cd</span> ~/ </span><br><span class="line">tar -zxvf VMwareTools-10.3.10-12406962.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="进入目录后安装"><a href="#进入目录后安装" class="headerlink" title="进入目录后安装"></a>进入目录后安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/vmware-tools-distrib</span><br><span class="line">./vmware-install.pl</span><br></pre></td></tr></table></figure>

<h3 id="安装时可能会出现错误，提示-ipconfig命令-不存在-需要安装-net-tools"><a href="#安装时可能会出现错误，提示-ipconfig命令-不存在-需要安装-net-tools" class="headerlink" title="安装时可能会出现错误，提示 ipconfig命令 不存在, 需要安装 net-tools"></a>安装时可能会出现错误，提示 ipconfig命令 不存在, 需要安装 net-tools</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools</span><br></pre></td></tr></table></figure>

<h2 id="更改Centos7分辨率"><a href="#更改Centos7分辨率" class="headerlink" title="更改Centos7分辨率"></a>更改Centos7分辨率</h2><h3 id="进入系统更改分辨率"><a href="#进入系统更改分辨率" class="headerlink" title="进入系统更改分辨率"></a>进入系统更改分辨率</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure>

<h3 id="将GRUB-TERMINAL-OUTPUT值由默认的”console”改为”gfxterm”，并添加GRUB-GFXMODE"><a href="#将GRUB-TERMINAL-OUTPUT值由默认的”console”改为”gfxterm”，并添加GRUB-GFXMODE" class="headerlink" title="将GRUB_TERMINAL_OUTPUT值由默认的”console”改为”gfxterm”，并添加GRUB_GFXMODE"></a>将GRUB_TERMINAL_OUTPUT值由默认的”console”改为”gfxterm”，并添加GRUB_GFXMODE</h3><p>ubuntu自带grub2默认是gfxterm, 而centos默认是console，所以只设置GRUB_GFXMODE不生效！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_TIMEOUT=2</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;<span class="subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL_OUTPUT=<span class="string">&quot;gfxterm&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br><span class="line">GRUB_GFXMODE=1440x900,1024x768,640x480</span><br></pre></td></tr></table></figure>

<h3 id="更新grub-cfg"><a href="#更新grub-cfg" class="headerlink" title="更新grub.cfg"></a>更新grub.cfg</h3><p>新版grub2已经不再使用update-grub这个命令了，改用grub2-mkconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg </span><br></pre></td></tr></table></figure>

<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>centos7</tag>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据库备份与恢复</title>
    <url>/2018/12/07/mysql-mysqldump/</url>
    <content><![CDATA[<p>MySql数据库备份与恢复——使用mysqldump 导入与导出方法总结<br>mysqldump客户端可用来转储数据库或搜集数据库进行备份或将数据转移到另一个sql服务器(不一定是一个mysql服务器)。转储包含创建表和/或装载表的sql语句。<br>如果在服务器上进行备份，并且表均为myisam表，应考虑使用mysqlhotcopy，因为可以更快地进行备份和恢复。<br>本文从四部分介绍了mysql数据备份与恢复：第一，mysql基本常识；第二，数据备份与恢复示例；第三，mysqldump具体参数说明。</p>
<h3 id="一、MySql基本常识"><a href="#一、MySql基本常识" class="headerlink" title="一、MySql基本常识"></a>一、MySql基本常识</h3><p>（1）连接mysql：(格式： mysql -h主机地址 -u用户名 －p用户密码)  </p>
<ol>
<li><p>连接到本机上的MYSQL<br>键入命令mysql-uroot -p，回车后提示你输密码，如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是：mysql&gt;</p>
</li>
<li><p>连接到远程主机上的MYSQL<br>假设远程主机的IP为：10.0.0.1，用户名为root,密码为12356。则键入以下命令：mysql -h10.0.0.1 -uroot -p12356（注：u与root可以不用加空格，其它也一样）</p>
</li>
<li><p>退出MYSQL命令<br>exit （回车）</p>
<span id="more"></span>
<p>（2）常见命令：</p>
</li>
<li><p>显示数据库列表：<br>show databases;<br>刚开始时才两个数据库：mysql和test。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p>
</li>
<li><p>显示库中的数据表：<br>use mysql; //打开库<br>show tables;</p>
</li>
<li><p>显示数据表的结构：<br>describe 表名;(简写：desc 表名)</p>
</li>
<li><p>建库：<br>create database 库名;</p>
</li>
<li><p>建表：<br>use 库名;<br>create table 表名 (字段设定列表)；</p>
</li>
<li><p>删库和删表:<br>drop database 库名;<br>drop table 表名;</p>
</li>
<li><p>将表中记录删除：<br>delete from 表名;</p>
</li>
<li><p>将表中记录清空<br>truncate 表名;</p>
</li>
<li><p>显示表中的记录：<br>select * from 表名; </p>
</li>
</ol>
<h3 id="二、数据备份与恢复"><a href="#二、数据备份与恢复" class="headerlink" title="二、数据备份与恢复"></a>二、数据备份与恢复</h3><p>（1）备份：从数据库导出数据：  </p>
<ul>
<li>格式：mysqldump -h链接ip -P(大写)端口 -u用户名 -p密码数据库名&gt;d:XX.sql(路劲)  </li>
<li>示例：mysqldump -h132.72.192.432 -P3307 -uroot -p8888 htgl&gt;d:\htgl.sql;  </li>
</ul>
<p>（2）备份导出示例：</p>
<ol>
<li><p>导出数据和表结构——将特定数据库特定表中的数据和表格结构和数据全部返回<br>mysqldump --u  b_user -h 101.3.20.33 -p’H_password’  -P3306 database_di up_subjects &gt; 0101_0630_up_subjects.sql</p>
</li>
<li><p>导出表结构却不导出表数据——只返回特定数据库特定表格的表格结构，不返回数据,添加“-d”命令参数<br>mysqldump --u  b_user -h 101.3.20.33 -p’H_password’  -P3306 -d database_di up_subjects &gt; 0101_0630_up_subjects.sql</p>
</li>
<li><p>导出表结构和满足挑顶条件的表数据——只返回特定数据库中特定表的表格结构和满足特定条件的数据<br>mysqldump --u  b_user -h 101.3.20.33 -p’H_password’  -P3306 database_di up_subjects --where=” ctime&gt;’2017-01-01’ and ctime&lt;’2017-06-30’” &gt; 0101_0630_up_subjects.sql  </p>
</li>
<li><p>导出数据却不导出表结构——只返回特定数据库中特定表格的数据，不返回表格结构，添加“-t”命令参数<br>mysqldump --u  b_user -h 101.3.20.33 -p’H_password’ -t -P3306 database_di up_subjects  &gt;0101_0630_up_subjects.sql</p>
</li>
<li><p>导出特定数据库的所有表格的表结构及其数据，添加“--databases ”命令参数<br>mysqldump  --u  b_user -h 101.3.20.33 -p’H_password’ -P3306 --databases test  &gt; all_database.sql</p>
</li>
</ol>
<p>（3）恢复，导入数据库数据：<br>将导出的本地文件导入到指定数据库</p>
<ol>
<li>系统命令行<br>格式：mysql -h链接ip -P(大写)端口 -u用户名 -p密码 数据库名 &lt; d:XX.sql(路劲)<br>mysql -uusername -ppassword db1 &lt;tb1tb2.sql  </li>
<li>或mysql命令行<br>mysql&gt;<br>user db1;<br>source tb1_tb2.sql;  </li>
<li>恢复整个数据库的方法：<br>mysql -u  b_user -h 101.3.20.33 -p’H_password’ -P3306   &lt; all_database.sql  </li>
</ol>
<p>（4）具体恢复示例：</p>
<ol>
<li><p>先登录该MySQL服务器，切换要导入数据的数据<br>具体命令如下：<br>mysql&gt; use test;<br>mysql&gt; source /home/test/0101_0630_up_subjects.sql<br>Query OK, 0 rows affected (0.01 sec)<br>……<br>Query OK, 0 rows affected (0.00 sec)<br>Query OK, 9 rows affected (0.00 sec)<br>Records: 9 Duplicates: 0  Warnings: 0<br>注释：表示影响的记录为9行，重复的记录有0行，警告的记录有0个  </p>
</li>
<li><p>直接使用系统命令行<br>mysql -u b_user -h 101.3.20.33 -p’H_password’ -P3306 test  &lt;/home/test/0101_0630_up_subjects.sql</p>
</li>
</ol>
<h3 id="三、mysqldump参数说明"><a href="#三、mysqldump参数说明" class="headerlink" title="三、mysqldump参数说明"></a>三、mysqldump参数说明</h3><ul>
<li>--default-character-set<br>字符集设置<br>mysqldump -uusername -ppassword --default-character-set=gb2312 db1 table1 &gt; tb1.sql</li>
<li>--all-databases, -A<br>导出全部数据库<br>mysqldump -uroot -p --all-databases</li>
<li>--all-tablespaces,-Y<br>导出全部表空间<br>mysqldump -uroot -p --all-databases --all-tablespaces</li>
<li>--no-tablespaces,-y<br>不导出任何表空间信息<br>mysqldump -uroot -p --all-databases --no-tablespaces</li>
<li>--add-drop-database<br>每个数据库创建之前添加drop数据库语句<br>mysqldump -uroot -p --all-databases --add-drop-database</li>
<li>--add-drop-table<br>每个数据表创建之前添加drop数据表语句（默认为打开状态，使用--skip-add-drop-table取消选项）<br>mysqldump -uroot -p --all-databases  (默认添加drop语句)<br>mysqldump -uroot -p --all-databases –skip-add-drop-table  (取消drop语句)</li>
<li>--add-locks<br>在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(默认为打开状态，使用--skip-add-locks取消选项)<br>mysqldump -uroot -p --all-databases(默认添加LOCK语句)<br>mysqldump -uroot -p --all-databases –skip-add-locks(取消LOCK语句)</li>
<li>--allow-keywords<br>允许创建是关键词的列名字。这由表名前缀于每个列名做到<br>mysqldump -uroot -p --all-databases --allow-keywords</li>
<li>--apply-slave-statements<br>在’CHANGE MASTER’前添加’STOP SLAVE’，并且在导出的最后添加’START SLAVE’<br>mysqldump -uroot -p --all-databases --apply-slave-statements</li>
<li>--character-sets-dir<br>字符集文件的目录<br>mysqldump -uroot -p --all-databases --character-sets-dir=/usr/local/mysql/share/mysql/charsets</li>
<li>--comments<br>附加注释信息。默认为打开，可以用--skip-comments取消<br>mysqldump -uroot -p --all-databases  (默认记录注释)<br>mysqldump -uroot -p --all-databases --skip-comments   (取消注释)</li>
<li>--compatible<br>导出的数据将和其它数据库或旧版本的MySQL 相兼容。值可以为ansi、mysql323、mysql40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_tables_options、no_field_options等，要使用几个值，用逗号将它们隔开。它并不保证能完全兼容，而是尽量兼容。<br>mysqldump -uroot -p --all-databases --compatible=ansi</li>
<li>--compact<br>导出更少的输出信息(用于调试)。去掉注释和头尾等结构。可以使用选项：<br>--skip-add-drop-table --skip-add-locks --skip-comments --skip-disable-keys<br>mysqldump -uroot -p --all-databases --compact  </li>
<li>--complete-insert,  -c<br>使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。<br>mysqldump -uroot -p --all-databases --complete-insert  </li>
<li>--compress, -C<br>在客户端和服务器之间启用压缩传递所有信息<br>mysqldump -uroot -p --all-databases --compress</li>
<li>--create-options,  -a<br>在CREATE TABLE语句中包括所有MySQL特性选项。(默认为打开状态)<br>mysqldump -uroot -p --all-databases</li>
<li> --databases,  -B<br>导出几个数据库。参数后面所有名字参量都被看作数据库名。<br>mysqldump -uroot -p --databases test mysql  </li>
<li>--debug<br>输出debug信息，用于调试。默认值为：d:t,/tmp/mysqldump.trace<br>mysqldump -uroot -p --all-databases --debug<br>mysqldump -uroot -p --all-databases --debug=” d:t,/tmp/debug.trace”</li>
<li>--debug-check<br>检查内存和打开文件使用说明并退出。<br>mysqldump -uroot -p --all-databases --debug-check  </li>
<li>--debug-info<br>输出调试信息并退出<br>mysqldump -uroot -p --all-databases --debug-info  </li>
<li>--default-character-set<br>设置默认字符集，默认值为utf8<br>mysqldump -uroot -p --all-databases --default-character-set=utf8  </li>
<li>--delayed-insert<br>采用延时插入方式（INSERT DELAYED）导出数据<br>mysqldump -uroot -p --all-databases --delayed-insert  </li>
<li>--delete-master-logs<br>master备份后删除日志. 这个参数将自动激活--master-data。<br>mysqldump -uroot -p --all-databases --delete-master-logs  </li>
<li>--disable-keys<br>对于每个表，用/*!40000 ALTER TABLE tbl_name DISABLE KEYS <em>/;和/</em>!40000ALTER TABLE tbl_name ENABLE KEYS */;语句引用INSERT语句。这样可以更快地导入dump出来的文件，因为它是在插入所有行后创建索引的。该选项只适合MyISAM表，默认为打开状态。<br>mysqldump -uroot -p --all-databases  </li>
<li>--dump-slave<br>该选项将主的binlog位置和文件名追加到导出数据的文件中(show slave status)。设置为1时，将会以CHANGE MASTER命令输出到数据文件；设置为2时，会在change前加上注释。该选项将会打开--lock-all-tables，除非--single-transaction被指定。该选项会自动关闭--lock-tables选项。默认值为0。<br>mysqldump -uroot -p --all-databases --dump-slave=1<br>mysqldump -uroot -p --all-databases --dump-slave=2  </li>
<li>--master-data<br>该选项将当前服务器的binlog的位置和文件名追加到输出文件中(show master status)。如果为1，将会输出CHANGE MASTER 命令；如果为2，输出的CHANGE  MASTER命令前添加注释信息。该选项将打开--lock-all-tables 选项，除非--single-transaction也被指定（在这种情况下，全局读锁在开始导出时获得很短的时间；其他内容参考下面的--single-transaction选项）。该选项自动关闭--lock-tables选项。<br>mysqldump -uroot -p --host=localhost --all-databases --master-data=1;<br>mysqldump -uroot -p --host=localhost --all-databases --master-data=2;</li>
<li>--events, -E<br>导出事件。<br>mysqldump -uroot -p --all-databases --events  </li>
<li>--extended-insert,  -e<br>使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用 --skip-extended-insert取消选项。<br>mysqldump -uroot -p --all-databases<br>mysqldump -uroot -p --all-databases--skip-extended-insert   (取消选项)  </li>
<li>--fields-terminated-by<br>导出文件中忽略给定字段。<br>与--tab选项一起使用，不能用于--databases和--all-databases选项<br>mysqldump -uroot -p test test --tab=”/home/mysql” --fields-terminated-by=”#”<br>--fields-enclosed-by<br>输出文件中的各个字段用给定字符包裹。<br>与--tab选项一起使用，不能用于--databases和--all-databases选项<br>mysqldump -uroot -p test test --tab=”/home/mysql” --fields-enclosed-by=”#”<br>--fields-optionally-enclosed-by<br>输出文件中的各个字段用给定字符选择性包裹。<br>与--tab选项一起使用，不能用于--databases和--all-databases选项<br>mysqldump -uroot -p test test --tab=”/home/mysql” --fields-enclosed-by=”#” --fields-optionally-enclosed-by  =”#”<br>--fields-escaped-by<br>输出文件中的各个字段忽略给定字符。<br>与--tab选项一起使用，不能用于--databases和--all-databases选项<br>mysqldump -uroot -p mysql user --tab=”/home/mysql” --fields-escaped-by=”#”</li>
<li>--flush-logs<br>开始导出之前刷新日志。<br>请注意：假如一次导出多个数据库(使用选项--databases或者--all-databases)，将会逐个数据库刷新日志。除使用--lock-all-tables或者--master-data外。在这种情况下，日志将会被刷新一次，相应的所以表同时被锁定。因此，如果打算同时导出和刷新日志应该使用--lock-all-tables 或者--master-data 和--flush-logs。<br>mysqldump -uroot -p --all-databases --flush-logs</li>
<li>--flush-privileges<br>在导出mysql数据库之后，发出一条FLUSH  PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。<br>mysqldump -uroot -p --all-databases --flush-privileges</li>
<li>--force<br>在导出过程中忽略出现的SQL错误。<br>mysqldump -uroot -p --all-databases --force</li>
<li>--help<br>显示帮助信息并退出。<br>mysqldump --help  </li>
<li>--hex-blob<br>使用十六进制格式导出二进制字符串字段。如果有二进制数据就必须使用该选项。影响到的字段类型有BINARY、VARBINARY、BLOB。<br>mysqldump -uroot -p --all-databases --hex-blob</li>
<li>--host, -h<br>需要导出的主机信息<br>mysqldump -uroot -p --host=localhost --all-databases</li>
<li>--ignore-table<br>不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名。例如：--ignore-table=database.table1 --ignore-table=database.table2 ……<br>mysqldump -uroot -p --host=localhost --all-databases --ignore-table=mysql.user<br>--include-master-host-port<br>在--dump-slave产生的’CHANGE  MASTER TO..’语句中增加’MASTER_HOST=<host>，MASTER_PORT=<port>‘<br>mysqldump -uroot -p --host=localhost --all-databases --include-master-host-port</li>
<li>--insert-ignore<br>在插入行时使用INSERT IGNORE语句.<br>mysqldump -uroot -p --host=localhost --all-databases --insert-ignore</li>
<li>--lines-terminated-by<br>输出文件的每行用给定字符串划分。与--tab选项一起使用，不能用于--databases和--all-databases选项。<br>mysqldump -uroot -p --host=localhost test test --tab=”/tmp/mysql”  --lines-terminated-by=”##”</li>
<li>--lock-all-tables,  -x<br>提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭--single-transaction 和--lock-tables 选项。<br>mysqldump -uroot -p --host=localhost --all-databases --lock-all-tables</li>
<li>--lock-tables,  -l<br>开始导出前，锁定所有表。用READ  LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，--single-transaction是一个更好的选择，因为它根本不需要锁定表。<br>请注意当导出多个数据库时，--lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。<br>mysqldump -uroot -p --host=localhost --all-databases --lock-tables</li>
<li>--log-error<br>附加警告和错误信息到给定文件<br>mysqldump -uroot -p --host=localhost --all-databases  --log-error=/tmp/mysqldump_error_log.err</li>
<li>--max_allowed_packet<br>服务器发送和接受的最大包长度。<br>mysqldump -uroot -p --host=localhost --all-databases --max_allowed_packet=10240</li>
<li>--net_buffer_length<br>TCP/IP和socket连接的缓存大小。<br>mysqldump -uroot -p --host=localhost --all-databases --net_buffer_length=1024</li>
<li>--no-autocommit<br>使用autocommit/commit 语句包裹表。<br>mysqldump -uroot -p --host=localhost --all-databases --no-autocommit</li>
<li>--no-create-db,  -n<br>只导出数据，而不添加CREATE DATABASE 语句。<br>mysqldump -uroot -p --host=localhost --all-databases --no-create-db</li>
<li>--no-create-info,  -t<br>只导出数据，而不添加CREATE TABLE 语句。<br>mysqldump -uroot -p --host=localhost --all-databases --no-create-info</li>
<li>--no-data, -d<br>不导出任何数据，只导出数据库表结构。<br>mysqldump -uroot -p --host=localhost --all-databases --no-data</li>
<li>--no-set-names,  -N<br>等同于--skip-set-charset<br>mysqldump -uroot -p --host=localhost --all-databases --no-set-names</li>
<li>--opt<br>等同于--add-drop-table, --add-locks, --create-options, --quick, --extended-insert,--lock-tables,  --set-charset,--disable-keys 该选项默认开启,  可以用--skip-opt禁用.<br>mysqldump -uroot -p --host=localhost --all-databases --opt</li>
<li>--order-by-primary<br>如果存在主键，或者第一个唯一键，对每个表的记录进行排序。在导出MyISAM表到InnoDB表时有效，但会使得导出工作花费很长时间。<br>mysqldump -uroot -p --host=localhost --all-databases --order-by-primary</li>
<li>--password, -p<br>连接数据库密码</li>
<li>--pipe(windows系统可用)<br>使用命名管道连接mysql<br>mysqldump -uroot -p --host=localhost --all-databases --pipe</li>
<li>--port, -P<br>连接数据库端口号</li>
<li>--protocol<br>使用的连接协议，包括：tcp, socket, pipe, memory.<br>mysqldump -uroot -p --host=localhost --all-databases --protocol=tcp</li>
<li>--quick, -q<br>不缓冲查询，直接导出到标准输出。默认为打开状态，使用--skip-quick取消该选项。<br>mysqldump -uroot -p --host=localhost --all-databases<br>mysqldump -uroot -p --host=localhost --all-databases --skip-quick</li>
<li>--quote-names,-Q<br>使用（`）引起表和列名。默认为打开状态，使用--skip-quote-names取消该选项。<br>mysqldump -uroot -p --host=localhost --all-databases<br>mysqldump -uroot -p --host=localhost --all-databases --skip-quote-names</li>
<li>--replace<br>使用REPLACE INTO 取代INSERT INTO.<br>mysqldump -uroot -p --host=localhost --all-databases --replace</li>
<li>--result-file,  -r<br>直接输出到指定文件中。该选项应该用在使用回车换行对（\r\n）换行的系统上（例如：DOS，Windows）。该选项确保只有一行被使用。<br>mysqldump -uroot -p --host=localhost   --all-databases--result-file=/tmp/mysqldump_result_file.txt</li>
<li>--routines, -R<br>导出存储过程以及自定义函数。<br>mysqldump -uroot -p --host=localhost --all-databases --routines</li>
<li>--set-charset<br>添加’SET NAMES default_character_set’到输出文件。默认为打开状态，使用--skip-set-charset关闭选项。<br>mysqldump -uroot -p --host=localhost --all-databases<br>mysqldump -uroot -p --host=localhost --all-databases --skip-set-charset  </li>
<li>--single-transaction<br>该选项在导出数据之前提交一个BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于多版本存储引擎，仅InnoDB。本选项和--lock-tables 选项是互斥的，因为LOCK  TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用--quick 选项。<br>mysqldump -uroot -p --host=localhost --all-databases --single-transaction</li>
<li>--dump-date<br>将导出时间添加到输出文件中。默认为打开状态，使用--skip-dump-date关闭选项。<br>mysqldump -uroot -p --host=localhost --all-databases<br>mysqldump -uroot -p --host=localhost --all-databases --skip-dump-date  </li>
<li>--skip-opt<br>禁用–opt选项.<br>mysqldump -uroot -p --host=localhost --all-databases --skip-opt</li>
<li>--socket,-S<br>指定连接mysql的socket文件位置，默认路径/tmp/mysql.sock<br>mysqldump -uroot -p --host=localhost --all-databases --socket=/tmp/mysqld.sock</li>
<li>--tab,-T<br>为每个表在给定路径创建tab分割的文本文件。注意：仅仅用于mysqldump和mysqld服务器运行在相同机器上。注意使用--tab不能指定--databases参数<br>mysqldump -uroot -p --host=localhost test test --tab=”/home/mysql”</li>
<li>--tables<br>覆盖--databases (-B)参数，指定需要导出的表名，在后面的版本会使用table取代tables。<br>mysqldump -uroot -p --host=localhost --databases test --tables test</li>
<li>--triggers<br>导出触发器。该选项默认启用，用--skip-triggers禁用它。<br>mysqldump -uroot -p --host=localhost --all-databases --triggers</li>
<li>--tz-utc<br>在导出顶部设置时区TIME_ZONE=’+00:00’ ，以保证在不同时区导出的TIMESTAMP 数据或者数据被移动其他时区时的正确性。<br>mysqldump -uroot -p --host=localhost --all-databases --tz-utc  </li>
<li>--user, -u<br>指定连接的用户名。</li>
<li>--verbose, --v<br>输出多种平台信息。</li>
<li>--version, -V<br>输出mysqldump版本信息并退出  </li>
<li>--where, -w<br>只转储给定的WHERE条件选择的记录。请注意如果条件包含命令解释符专用空格或字符，一定要将条件引用起来。<br>mysqldump -uroot -p --host=localhost --all-databases --where=” user=’root’”</li>
<li>--xml, -X<br>导出XML格式.<br>mysqldump -uroot -p --host=localhost --all-databases --xml</li>
<li>--plugin_dir<br>客户端插件的目录，用于兼容不同的插件版本。<br>mysqldump -uroot -p --host=localhost --all-databases--plugin_dir=”/usr/local/lib/plugin”</li>
<li>--default_auth<br>客户端插件默认使用权限。<br>mysqldump -uroot -p --host=localhost --all-databases--default-auth=”/usr/local/lib/plugin/<PLUGIN>”</li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mysqldump</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做到自律</title>
    <url>/2017/01/26/ru-he-zi-lv/</url>
    <content><![CDATA[<p>原文链接地址：<a href="https://www.zhihu.com/question/37226968/answer/779988275">如何逼自己做到真正的自律？ - 黛西巫巫的回答 - 知乎</a></p>
<p>这篇回答会颠覆你的人生观哦。</p>
<p>如果你总是喜欢拖延，晚上躺床上玩手机不想闭眼，做事三分钟热度，偶尔想坚持努力，过不了几天就被打回原形，不要怕，你不是真的懒，而是没有找到方法。今天方法来了，刷到这篇回答的你很幸运。我帮你找到适合你的自律方法，像玩手机和玩游戏一起轻松地实现自律。 我自己就是这套方法的受益者。曾经我也是个死肥宅，又胖又丑，每次照镜子都觉得自己恶心，连男朋友都找不到。后来我下定决心，一定要瘦下来，一日三餐只吃果蔬沙拉，坚持每天去健身房跑步30分钟做20分钟Hit燃脂训练。不到半年时间，我的身材发生了明显的变化：  腰瘦了，胸型也好看了很多~接下来开始进入正题，文章有点长，4000多字，但请答应我，咬牙读完，腰挺直认真看，一定可以帮你改变糟糕的生活。</p>
<span id="more"></span>
<h2 id="先认识什么是真正的自律"><a href="#先认识什么是真正的自律" class="headerlink" title="先认识什么是真正的自律"></a>先认识什么是真正的自律</h2><p>6点半起床到图书馆，低头看书学习到午饭时间，吃饱后在桌子上趴一会，中午两点开始继续学习到晚上10点，除了晚饭外都在看书。周一到周六都机械般重复上面的事。你觉得这是自律吗？不是，这跟流水线生产东西一样，只是一种流程。 这种生活让人难以忍受，枯燥无味，大多数人坚持一段时间后都会放弃，不具备普适性。</p>
<h3 id="那么，什么是真正的自律？"><a href="#那么，什么是真正的自律？" class="headerlink" title="那么，什么是真正的自律？"></a>那么，什么是真正的自律？</h3><p>首先，你得想明白自己要什么。有些人的自律之所以是假的，就是因为他们没有明确的目标，他们之所以给自己制定了很多计划，只是因为感觉人就应该努力，不努力就是堕落。然后偶尔努力一下就会有一段时间感觉到踏实，但过几天又会因为坚持不下去堕落了。所谓的间歇性努力持续性混吃等死，基本就是这样产生的。所以，你要给自己定一个目标，让欲望和动力去驱动你，而不是焦虑和自责，当每天唤醒你的是梦想而不是闹钟，你就开始明白什么是真正的自律了。</p>
<h2 id="说完什么是自律，我们再来讲如何让自己变得自律起来。"><a href="#说完什么是自律，我们再来讲如何让自己变得自律起来。" class="headerlink" title="说完什么是自律，我们再来讲如何让自己变得自律起来。"></a>说完什么是自律，我们再来讲如何让自己变得自律起来。</h2><blockquote>
<p>“清华北大只是过程，不是目的。” </p>
</blockquote>
<blockquote>
<p>“人生就像射箭，梦想就像箭靶子，如果没有箭靶子，你每天的拉弓就毫无意义。”</p>
</blockquote>
<blockquote>
<p>《银河补习班》里的邓超希望儿子能想明白自己要什么，说了这两句话。</p>
</blockquote>
<p>要想自律，你先要找到自己的箭靶子。而这箭靶子，也就是我们的自律驱动器。 </p>
<h3 id="如何找到你的自律驱动器？"><a href="#如何找到你的自律驱动器？" class="headerlink" title="如何找到你的自律驱动器？"></a>如何找到你的自律驱动器？</h3><ol>
<li>首先要理性地面对自己的欲望。<br> 一个经常健身，不吃油炸食品，八块腹肌的帅哥，他之所以自律，是因为喜欢别人看他时羡慕的眼神，是因为他爬10楼楼梯都不累时的那种从容，这些欲望让他战胜了大汗淋漓时想放弃的心。一个清华北大的学子每天依旧刻苦学习，他之所以自律，是因为想要改命的决心，是因为他希望父母看到自己功成名就时能开心地笑，上清华和北大不是他的目的，通过努力而改变自己的命运，让家人过上更好的生活，这些才是他的目的，也正是因为这些欲望让他战胜了懒惰和不想学习的心。那么，你有什么欲望呢？比如，我想发财让家人过上更好的生活、我想拥有一个好的身体能在床上更持久让伴侣开心等等。</li>
<li>接着，直面你的欲望，然后把你的欲望具体化。<br> 最好精确到能用数字表述出来。 比如，我想3年赚100万，给家人买1套房，我想坚持30分钟。然后，把你足够具体的欲望写下来，可以放在床头，也可以放在手机备忘录里，只要你能经常看到就行。 </li>
<li>把目标细分化。<br> 比如说，你想3年赚100万，那么你每个月要存2.8万，然后，你需要掌握什么技能，升到什么职位，完成这些需要做哪些事，细分到每一天去，只有当你足够想要，你才能得到。然后，在执行的过程中，你还要不断提醒自己最初的计划，因为如果你一个星期没思考的话很容易就忘，千万不要对你的大脑过度自信，重复提醒自己才能让你最终收获到果实。接着，像我最开始说的那样，不要把计划做得太机械，而且也不要有过度完美主义，当出现问题时，平静沉稳地解决就行，不要指责自己，继续下去。 能读到这里的人都是愿意深度思考的优秀者，我想请你帮个忙，如果内容对你有启发，你可以花1秒钟点个赞后再继续阅读。 </li>
</ol>
<p>下面我再分享一些私货，你可以提起精神来，重点内容到啦！</p>
<h2 id="一些让你像玩手机一样轻松的自律方法"><a href="#一些让你像玩手机一样轻松的自律方法" class="headerlink" title="一些让你像玩手机一样轻松的自律方法"></a>一些让你像玩手机一样轻松的自律方法</h2><ol>
<li>用「方式替换」帮你喜欢上自律的生活。<br> 我之前因为工作一直需要对着电脑，身体虚弱了很多，所以就想要运动锻炼下身体。一开始选择了到户外跑步，但坚持了几天我就放弃了，因为跑步是一种没有太多惊喜的运动，很枯燥无味。但那时我还是把原因归为自己不自律。 以前尝试跑步，但没坚持多久 后来偶然一次，朋友拉我去健身房，我被好几个运动吸引了，瑜伽、搏击操、有氧舞蹈，到现在两年多，我每天都会锻炼1小时左右。跑步让我想死，瑜伽、搏击操、有氧舞蹈等运动使我快乐，但这些运动都是能实现我锻炼身体的目标，所以，在不影响终极目的情况下，可以去寻找适合自己的方式。比如你定了一个运动目标，可以去试一试跑步、篮球、台球、舞蹈等等，找到自己喜欢的再去行动。比如你喜欢摄影却在做着文案的工作，那么就辞职改成去影楼工作吧，这样产生的自律才是健康且长期的。 </li>
<li>每一小步都值得干杯有什么样的方法，能让没耐心的小孩把一件繁琐的事做好？<br> 当他完成一小步，就给他一颗他喜欢的糖，当他完成第二步，再给他一颗，第三步，再给他一颗，十步、十颗，他完成了。大人也一样，当你完成一个分期任务之后，我们需要为自己取得的成就庆祝，哪怕这成就很小。对你付出的努力作出肯定，这种庆祝的仪式感会产生正向的反馈，让你的自律生活处于正向的循环。  </li>
<li>让你的身体充满能量。<br> 身体虚弱的人，真的很难谈什么享受生活，更别说坚持自律的生活，一个人生活中80%的不开心，基本也是来源于没睡够或者吃不好。所以，用1.的方法去找到一个你喜欢的运动方式，锻炼好身体，用下面这张图，把自己喂成一个营养健康的人，而在这过程中，你不仅能享受到身体逐渐变好的红利，还能借着这个过程培养自己的自律习惯。中国营养学会根据设计的中国居民膳食指南，靠谱，也很有普适性。</li>
<li>找到优质的环境和志同道合的人。<br> 在宿舍学习的效果不如在自习室和图书馆、在家里工作的效果不如在办公室。一个坏的环境让好的人变差，一个好的环境能让一个坏的人变好。所以，找到一个能让你心仪的环境很重要，比如说你想健身，可以尝试在家里买一个跑步机、也可以去户外跑步、还可以去健身房里运动，但千万不要去空气很差的地方跑，在经济条件能接受的情况下，找到最优质的环境，对你的人生有很大的帮助。另外，要远离那些打击你成长的人。这种打击分为「被动打击」和「主动打击」。被动打击如：你身边那些好吃懒做、喜欢打游戏刷抖音、不思进取的人，他们会同化你的思维，让你提不起劲去努力。再比如说：你想戒烟，而当你身边的人都在吸烟的时候，你想戒都借不了，因为不仅你看别人吸的时候会有瘾，而且总有人会递烟给你。更可恨的，是那些知道你戒烟后还跟你说：“戒什么烟，男人不抽烟不喝酒，算什么男人。”这种就是最可怕的主动打击了，像学生时代也有一些人喜欢刺几句去图书馆学习的人。如果你身边有类似的人，请远离，哪怕需要付出代价，长痛不如短痛。真正好的社交关系，是1+1&gt;2甚至大于3的，大家一起学习、一起看书、一起研究赚钱方法、一起成长，互相帮助对方解决困难，在这种氛围和环境里，自律是顺其自然且幸福的。</li>
</ol>
<h2 id="再分享一些小技巧，让你提升工作效率，时刻保持饱满的精神状态。"><a href="#再分享一些小技巧，让你提升工作效率，时刻保持饱满的精神状态。" class="headerlink" title="再分享一些小技巧，让你提升工作效率，时刻保持饱满的精神状态。"></a>再分享一些小技巧，让你提升工作效率，时刻保持饱满的精神状态。</h2><ol>
<li>规律的作息。<br> 一个在白天睡觉、晚上工作的人身体好？还是一个在晚上睡觉，白天工作的人身体好？答案是一样的。真正会伤害人身体的，是作息的不规律，比如倒班，比如你今天晚上12点睡，明天10点睡，后天晚上3点睡，这才会伤害你的身体。有规律的作息会让身体各部位能够知道在该休息的时候休息。如果无规律，身体就无法协调一致。时间久了就如该保养的车没保养，会出事故的。所以，早睡早起不是重点，规律的作息才是。保持充足且规律的睡眠，人的思维活跃，精力旺盛。</li>
<li>番茄工作法<br> “番茄工作法是由西里洛创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。“学会使用这个方法，能让你每天都处于高效的工作状态。 </li>
<li>曼特拉冥想<br> “在所有的瑜伽冥想体系中，没有哪一种比得上曼特拉冥想的功效那么直接。”，一些已经被现代医学证实的冥想功效：改善大脑，保持脑细胞的年轻活力，提升人的专注力，而且能使人产生心情愉快的感觉，使免疫功能增强、延缓衰老等。冥想的方法：平躺着，做深呼吸，注意力放在呼吸上面，可以跟着呼吸的节奏在心里默念“呼”“吸”，如果注意力分散了，就重新来过，每天5分钟的冥想，会让你受用无穷。也可以运用想象，推荐一段曼特拉冥想词：想象自己躺在一片绿色的草地上，软软的，绵绵的，阵阵清香扑面而来。蓝蓝的天空没有一丝云彩。潺潺的小溪，从身边缓缓流过，叫不出名的野花，争相开放。远处一只母牛带着它的崽崽在散步，身边孩子们尽情地嬉戏玩耍着。一只蛐蛐在地里蹦来蹦去，还有那树上的鸟儿不停地在歌唱。（还可以下载一些帮助冥想的音乐）</li>
<li>杀死时间黑洞，除掉干扰源。<br> 卸载一些消耗时间的APP：游戏、抖音、快手、垃圾小说和脑残剧。工作时关掉干扰源：朋友圈的红点、手机信号等整洁的桌面：不要放太多东西，漫画书、零食、美女海报等会让你分心的东西都清理掉。</li>
</ol>
<p>最后，再送你四句话，一定要看完： </p>
<ul>
<li>“真的想做成某件事，如果可以的话，就从现在开始，不是明天，不是下个月，就此刻，然后坚持。即使今天跟明天之间，也隔着很多意外，所以不要等。” </li>
<li>“看100篇、1000篇回答，不如看精通一篇回答，然后深度思考并且结合自己的感悟，去把事情做好。” </li>
<li>“赠人一赞，手留余香。我获得了你的鼓励，会写出更好的东西来回馈给你。”</li>
<li>“乾坤未定，你我皆是黑马。”</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SSL证书生成</title>
    <url>/2019/01/21/ssl-certificate-generation/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要做这件事情的起因在于，代码的升级包放在一个https的服务器上，我们的设备要实现升级，则是通过wget 获取https上的升级包，并且要实现验证证书的功能，这样可以防止设备被恶意篡改升级成其他文件包。</p>
<p>起初，https的服务器都已经被搭建好了，可是验证证书的过程一直不顺利，现在把网络上自己试验成功方法总结如下，日后出现类似问题方便参考了。</p>
<blockquote>
<p>环境：https服务器，Ubuntu12.04+apache2+openssl</p>
</blockquote>
<p>首先，理解一下证书的类型。SSL证书包括：</p>
<ul>
<li>CA证书，也叫根证书或者中间级证书。如果是单向https认证的话，该证书是可选的。不安装CA证书的话，浏览器默认是不安全的。</li>
<li>服务器证书，必选项。通过key，证书请求文件csr，再通过CA证书签名，生成服务器证书。</li>
<li>客户端证书，可选项。若有客户端证书则是双向https验证。</li>
</ul>
<blockquote>
<p>以上所有证书都可以自己生成。</p>
</blockquote>
<span id="more"></span>

<h2 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h2><p>linux系统是不以后缀名来判断文件类型的，但是为了我们能够更好地判断文件用途，所以添加各种后缀。以下是约定成俗的后缀。</p>
<ul>
<li>*.key：密钥文件，一般是SSL中的私钥；</li>
<li>*.csr：证书请求文件，里面包含公钥和其他信息，通过签名后就可以生成证书；</li>
<li>*.crt, *.cert：证书文件，包含公钥，签名和其他需要认证的信息，比如主机名称（IP）等。</li>
<li>*.pem：里面一般包含私钥和证书的信息。</li>
</ul>
<h2 id="服务器证书的生成"><a href="#服务器证书的生成" class="headerlink" title="服务器证书的生成"></a>服务器证书的生成</h2><p>生成服务器私钥</p>
<blockquote>
<p>输入加密密码，用 128 位 rsa 算法生成密钥，得到 server.key 文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out server.key 1024</span><br></pre></td></tr></table></figure>
<p>生成服务器证书请求（ CSR ）</p>
<blockquote>
<p>CSR（ Certificate Signing Request）是一个证书签名请求，在申请证书之前，首先要在服务器上生成 CSR ，并将其提交给 CA 认证中心， CA 才能签发 SSL 服务器证书。也可以认为， CSR 就是一个在服务器上生成的证书。<br>在生成这个文件的过程中，有一点需要特别注意，Common Name 填入主机名（或者服务器IP）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure>
<p>自己生成服务器证书 </p>
<p>如果不使用 CA 证书签名的话，用如下方式生成： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -days 1024 -key server.key -in server.csr &gt; server.crt </span><br></pre></td></tr></table></figure>
<blockquote>
<p>用服务器密钥和证书请求生成证书 server.crt ， -days 参数指明证书有效期，单位为天。商业上来说，服务器证书是由通过第三方机构颁发的，该证书由第三方认证机构颁发的。　</p>
</blockquote>
<p>如果使用 CA 证书签名，用 openssl 提供的工具 CA.sh 生成服务器证书：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv server.csr newreq.pem</span><br><span class="line">./CA.sh -sign</span><br><span class="line">mv newcert.pem server.crt</span><br></pre></td></tr></table></figure>
<p>签名证书后，可通过如下命令可查看服务器证书的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -noout -text -in server.crt</span><br></pre></td></tr></table></figure>
<p>可通过如下命令验证服务器证书：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile ca.crt server.crt </span><br></pre></td></tr></table></figure>
<p>　　 </p>
<h2 id="客户证书的生成"><a href="#客户证书的生成" class="headerlink" title="客户证书的生成"></a>客户证书的生成</h2><p>客户证书是可选的。如果有客户证书，就是双向认证 HTTPS ，否则就是单向认证 HTTPS 。<br>生成客户私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out client.key 1024</span><br></pre></td></tr></table></figure>
<p>生成客户证书签名请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key client.key -out client.csr</span><br></pre></td></tr></table></figure>
<p>生成客户证书（使用 CA 证书签名）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl ca -in client.csr -out client.crt</span><br></pre></td></tr></table></figure>
<p>证书转换成浏览器认识的格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.pfx</span><br></pre></td></tr></table></figure>
<h2 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h2><h3 id="证书列表"><a href="#证书列表" class="headerlink" title="证书列表"></a>证书列表</h3><ul>
<li>如果使用双向认证，就会有三个私钥和三个证书。分别是 ca.key, ca.crt, server.key, server.crt, client.key, client.crt ，以及给浏览器的 client.pfx 。</li>
<li>如果使用有 CA 证书的单向认证，证书和私钥就是 ca.key, ca.crt, server.key, server.crt 。</li>
<li>如果使用无 CA 证书的单向认证，证书和私钥就是 server.key, server.crt 。</li>
</ul>
<p>最后在fedora作为客户端，wget 1.14通过如下命令成功获取文件，证书验证通过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --ca-certificate=server.crt https://+ip+file</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel学习(一)</title>
    <url>/2019/08/01/laravel-learn-1/</url>
    <content><![CDATA[<blockquote>
<p>原文地址：<a href="https://blog.csdn.net/zdw19861127/article/details/75394365">https://blog.csdn.net/zdw19861127/article/details/75394365</a></p>
</blockquote>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Laravel 是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。</p>
<span id="more"></span>

<h3 id="请求周期"><a href="#请求周期" class="headerlink" title="请求周期"></a>请求周期</h3><p>Laravel 采用了单一入口模式，应用的所有请求入口都是 public/index.php 文件。</p>
<ol>
<li>注册类文件自动加载器：Laravel通过composer进行依赖管理，并在bootstrap/autoload.php中注册了Composer Auto Loader (PSR-4)，应用中类的命名空间将被映射到类文件实际路径，不再需要开发者手动导入各种类文件，而由自动加载器自行导入。因此，Laravel允许你在应用中定义的类可以自由放置在Composer Auto Loader能自动加载的任何目录下，但大多数时候还是建议放置在app目录下或app的某个子目录下</li>
<li>创建服务容器：从 bootstrap/app.php 文件中取得 Laravel 应用实例 $app (服务容器)</li>
<li>创建 HTTP / Console 内核：传入的请求会被发送给 HTTP 内核或者 console 内核进行处理，HTTP 内核继承自 Illuminate\Foundation\Http\Kernel 类。它定义了一个 bootstrappers 数组，数组中的类在请求真正执行前进行前置执行，这些引导程序配置了错误处理，日志记录，检测应用程序环境，以及其他在请求被处理前需要完成的工作；HTTP 内核同时定义了一个 HTTP 中间件列表，所有的请求必须在处理前通过这些中间件处理 HTTP session 的读写，判断应用是否在维护模式， 验证 CSRF token 等等</li>
<li>载入服务提供者至容器：在内核引导启动的过程中最重要的动作之一就是载入服务提供者到你的应用，服务提供者负责引导启动框架的全部各种组件，例如数据库、队列、验证器以及路由组件。因为这些组件引导和配置了框架的各种功能，所以服务提供者是整个 Laravel 启动过程中最为重要的部分，所有的服务提供者都配置在 config/app.php 文件中的 providers 数组中。首先，所有提供者的 register 方法会被调用；一旦所有提供者注册完成，接下来，boot 方法将会被调用</li>
<li>分发请求：一旦应用完成引导和所有服务提供者都注册完成，Request 将会移交给路由进行分发。路由将分发请求给一个路由或控制器，同时运行路由指定的中间件</li>
</ol>
<h3 id="服务容器和服务提供者"><a href="#服务容器和服务提供者" class="headerlink" title="服务容器和服务提供者"></a>服务容器和服务提供者</h3><p>服务容器是 Laravel 管理类依赖和运行依赖注入的有力工具，在类中可通过 $this-&gt;app 来访问容器，在类之外通过 $app 来访问容器；服务提供者是 Laravel 应用程序引导启动的中心，关系到服务提供者自身、事件监听器、路由以及中间件的启动运行。应用程序中注册的路由通过RouteServiceProvider实例来加载；事件监听器在EventServiceProvider类中进行注册；中间件又称路由中间件，在app/Http/Kernel.php类文件中注册，调用时与路由进行绑定。在新创建的应用中，AppServiceProvider 文件中方法实现都是空的，这个提供者是你添加应用专属的引导和服务的最佳位置，当然，对于大型应用你可能希望创建几个服务提供者，每个都具有粒度更精细的引导。服务提供者在 config/app.php 配置文件中的providers数组中进行注册</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Foo</span>\<span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiakServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在容器中注册绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(Bar::class, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bar(config(<span class="string">&#x27;riak&#x27;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>Laravel 实现依赖注入方式有两种：自动注入和主动注册。自动注入通过参数类型提示由服务容器自动注入实现；主动注册则需开发人员通过绑定机制来实现，即绑定服务提供者或类（参考： <a href="https://laravel.com/docs/5.5/container">https://laravel.com/docs/5.5/container</a> ）。</p>
<ol>
<li>绑定服务提供者或类：这种方式对依赖注入的实现可以非常灵活多样</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Storage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">PhotoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">VideoController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Filesystem</span>\<span class="title">Filesystem</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;when(PhotoController::class)</span><br><span class="line">  -&gt;needs(Filesystem::class)</span><br><span class="line">  -&gt;give(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Storage::disk(<span class="string">&#x27;local&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;when(VideoController::class)</span><br><span class="line">  -&gt;needs(Filesystem::class)</span><br><span class="line">  -&gt;give(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Storage::disk(<span class="string">&#x27;s3&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>参数类型声明：通过对类的构造器参数类型、类的方法参数类型、闭包的参数类型给出提示来实现</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Users</span>\<span class="title">Repository</span> <span class="title">as</span> <span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * user repository 实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$users</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制器构造方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  UserRepository  $users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">UserRepository <span class="variable">$users</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;users = <span class="variable">$users</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 储存一个新用户。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$request</span>-&gt;input(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>路由参数依赖：下边的示例使用 Illuminate\Http\Request 类型提示的同时还获取到路由参数id</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"></span><br><span class="line">Route::put(<span class="string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;UserController@update&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/Http/Controllers/UserController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新指定的用户。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Artisan-Console"><a href="#Artisan-Console" class="headerlink" title="Artisan Console"></a>Artisan Console</h3><p>Laravel利用PHP的CLI构建了强大的Console工具artisan，artisan几乎能够创建任何你想要的模板类以及管理配置你的应用，在开发和运维管理中扮演着极其重要的角色，artisan是Laravel开发不可或缺的工具。在Laravel根目录下运行：PHP artisan list可查看所有命令列表。用好artisan能极大地简化开发工作，并减少错误发生的可能；另外，还可以编写自己的命令。下面列举部分比较常用的命令：</p>
<ul>
<li>启用维护模式：php artisan down –message=’Upgrading Database’ –retry=60</li>
<li>关闭维护模式：php artisan up</li>
<li>生成路由缓存：php artisan route:cache</li>
<li>清除路由缓存：php artisan route:clear</li>
<li>数据库迁移 Migrations：php artisan make:migration create_users_table –create=users</li>
<li>创建资源控制器：php artisan make:controller PhotoController –resource –model=Photo</li>
<li>创建模型及迁移：php artisan make:model User -m</li>
</ul>
<h3 id="表单验证机制"><a href="#表单验证机制" class="headerlink" title="表单验证机制"></a>表单验证机制</h3><p>表单验证在web开发中是不可或缺的，其重要性也不言而喻，也算是每个web框架的标配部件了。Laravel表单验证拥有标准且庞大的规则集，通过规则调用来完成数据验证，多个规则组合调用须以“|”符号连接，一旦验证失败将自动回退并可自动绑定视图。</p>
<p>下例中，附加bail规则至title属性，在第一次验证required失败后将立即停止验证；“.”语法符号在Laravel中通常表示嵌套包含关系，这个在其他语言或框架语法中也比较常见</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;validate(Request::all(), [</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;bail|required|unique:posts|max:255&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author.name&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author.description&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>Laravel验证规则参考 <a href="https://laravel.com/docs/5.5/validation">https://laravel.com/docs/5.5/validation</a> ；另外，在Laravel开发中还可采用如下扩展规则：</p>
<ul>
<li>自定义FormRequest (须继承自 Illuminate\Foundation\Http\FormRequest )</li>
<li>Validator::make()手动创建validator实例</li>
<li>创建validator实例验证后钩子</li>
<li>按条件增加规则</li>
<li>数组验证</li>
<li>自定义验证规则</li>
</ul>
<h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3><p>Laravel事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。事件类 (Event) 类通常保存在 app/Events 目录下，而它们的监听类 (Listener) 类被保存在 app/Listeners 目录下，使用 Artisan 命令来生成事件和监听器时他们会被自动创建。</p>
<ol>
<li><p>注册事件和监听器：EventServiceProvider的 listen 属性数组用于事件（键）到对应的监听器（值）的注册，然后运行 php artisan event:generate将自动生成EventServiceProvider中所注册的事件(类)模板和监听器模板，然后在此基础之上进行修改来实现完整事件和监听器定义；另外，你也可以在 EventServiceProvider 类的 boot 方法中通过注册闭包事件来实现</p>
</li>
<li><p>定义事件(类)：事件(类)就是一个包含与事件相关信息数据的容器，不包含其它逻辑</p>
</li>
<li><p>定义监听器：事件监听器在 handle 方法中接受了事件实例作为参数</p>
</li>
<li><p>停止事件传播：在监听器的 handle 方法中返回 false 来停止事件传播到其他的监听器</p>
</li>
<li><p>触发事件：调用 event 辅助函数可触发事件，事件将被分发到它所有已经注册的监听器上</p>
</li>
<li><p>队列化事件监听器：如果监听器中需要实现一些耗时的任务，比如发送邮件或者进行 HTTP 请求，那把它放到队列中处理是非常有用的。在使用队列化监听器，须在服务器或者本地环境中配置队列并开启一个队列监听器，还要增加 ShouldQueue 接口到你的监听器类；如果你想要自定义队列的连接和名称，你可以在监听器类中定义 $connection 和 $queue 属性；如果队列监听器任务执行次数超过在工作队列中定义的最大尝试次数，监听器的 failed 方法将会被自动调用</p>
</li>
<li><p>事件订阅者：事件订阅者允许在单个类中定义多个事件处理器，还应该定义一个 subscribe 方法，这个方法接受一个事件分发器的实例，通过调用事件分发器的 listen 方法来注册事件监听器，然后在 EventServiceProvider 类的 $subscribe 属性中注册订阅者</p>
</li>
</ol>
<h3 id="Eloquent-模型"><a href="#Eloquent-模型" class="headerlink" title="Eloquent 模型"></a>Eloquent 模型</h3><p>Eloquent ORM 以ActiveRecord形式来和数据库进行交互，拥有全部的数据表操作定义，单个模型实例对应数据表中的一行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flights</span> = App\Flight::where(<span class="string">&#x27;active&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    -&gt;orderBy(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">    -&gt;take(<span class="number">10</span>)</span><br><span class="line">    -&gt;get(); </span><br></pre></td></tr></table></figure>

<p>config/database.php中包含了模型的相关配置项。Eloquent 模型约定：</p>
<ul>
<li>数据表名：模型以单数形式命名(CamelCase)，对应的数据表为蛇形复数名(snake_cases)，模型的$table属性也可用来指定自定义的数据表名称</li>
<li>主键：模型默认以id为主键且假定id是一个递增的整数值，也可以通过incrementing = false</li>
<li>时间戳：模型会默认在你的数据库表有 created_at 和 updated_at 字段，设置dateFormat 属性用于在模型中设置自己的时间戳格式</li>
<li>数据库连接：模型默认会使用应用程序中配置的数据库连接，如果你想为模型指定不同的连接，可以使用 $connection 属性自定义</li>
<li>批量赋值：当用户通过 HTTP 请求传入了非预期的参数，并借助这些参数 create 方法更改了数据库中你并不打算要更改的字段，这时就会出现批量赋值（Mass-Assignment）漏洞，所以你需要先在模型上定义一个 guarded(黑名单，禁止批量赋值字段名数组)</li>
<li>模型软删除：如果模型有一个非空值 deleted_at，代表模型已经被软删除了。要在模型上启动软删除，则必须在模型上使用Illuminate\Database\Eloquent\SoftDeletes trait 并添加 deleted_at 字段到你的模型 $dates 属性上和数据表中，通过调用trashed方法可查询模型是否被软删除</li>
<li>查询作用域：Laravel允许对模型设定全局作用域和本地作用域(包括动态范围)，全局作用域允许我们为模型的所有查询添加条件约束(定义一个实现 Illuminate\Database\Eloquent\Scope 接口的类)，而本地作用域允许我们在模型中定义通用的约束集合(模型方法前加上一个 scope 前缀)。作用域总是返回查询构建器</li>
<li>隐藏和显示属性：模型visible 属性用于显示属性和关联的输出，另外makeVisible()还可用来临时修改可见性。当你要对关联进行隐藏时，需使用关联的方法名称，而不是它的动态属性名称</li>
<li>访问器和修改器：访问器(getFooAttribute)和修改器(setFooAttribute)可以让你修改 Eloquent 模型中的属性或者设置它们的值，比如你想要使用 Laravel 加密器来加密一个被保存在数据库中的值，当你从 Eloquent 模型访问该属性时该值将被自动解密。访问器和修改器要遵循cameCase命名规范，修改器会设置值到 Eloquent 模型内部的 $attributes 属性上</li>
<li>追加属性：在转换模型到数组或JSON时，你希望添加一个在数据库中没有对应字段的属性，首先你需要为这个值定义一个 访问器，然后添加该属性到改模型的 appends 属性中</li>
<li>属性类型转换：$casts 属性数组在模型中提供了将属性转换为常见的数据类型的方法，且键是那些需要被转换的属性名称，值则是代表字段要转换的类型。支持的转换的类型有：integer、real、float、double、string、boolean、object、array、collection、date、datetime、timestamp</li>
<li>序列化： Laravel模型及关联可递归序列化成数组或JSON</li>
<li>关联(方法)与动态属性：在 Eloquent 模型中，关联被定义成方法（methods），也可以作为强大的查询语句构造器。Eloquent 模型支持多种类型的关联：一对一、一对多、多对多、远层一对多、多态关联、多态多对多关联</li>
<li>模型事件： Laravel为模型定义的事件包括creating, created, updating, updated, saving, saved, deleting, deleted, restoring, restored。 模型上定义一个 $events 属性</li>
</ul>
<h3 id="Laravel的Restful风格"><a href="#Laravel的Restful风格" class="headerlink" title="Laravel的Restful风格"></a>Laravel的Restful风格</h3><p>一般认为Restful风格的资源定义不包含操作，但是在Laravel中操作(动词)也可作为一种资源来定义。下图是对Laravel中资源控制器操作原理的描述，可以看到，create、edit就直接出现在了URI中，它们是一种合法的资源。对于create和edit这两种资源的访问都采用GET方法来实现，第一眼看到顿感奇怪，后来尝试通过artisan console生成资源控制器，并注意到其对create、edit给出注释“ Show the form for ”字样，方知它们只是用来展现表单而非提交表单的。</p>
<h3 id="扩展开发"><a href="#扩展开发" class="headerlink" title="扩展开发"></a>扩展开发</h3><p>我们知道，Laravel本身是基于Composer管理的一个包，遵循Composer的相关规范，可以通过Composer来添加所依赖的其他Composer包，因此在做应用的扩展开发时，可以开发Composer包然后引入项目中即可；另外也可开发基于Laravel的专属扩展包。下面所讲的就是Laravel的专属扩展开发，最好的方式是使用 contracts ，而不是 facades，因为你开发的包并不能访问所有 Laravel 提供的测试辅助函数，模拟 contracts 要比模拟 facade 简单很多。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Laravel</tag>
        <tag>Laravel学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tcpdump查看HTTP请求响应</title>
    <url>/2019/01/25/use-tcpdump-to-view-http-request-response-details/</url>
    <content><![CDATA[<h2 id="tcpdump安装"><a href="#tcpdump安装" class="headerlink" title="tcpdump安装"></a>tcpdump安装</h2><p>在Ubuntu/Debian系统上，执行如下命令安装tcpdump工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tcpdump</span><br></pre></td></tr></table></figure>
<p>在CentOS系统上，执行如下命令安装tcpdump工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install tcpdump</span><br></pre></td></tr></table></figure>
<p>安装完tcpdump后，就可以使用man命令查看tcpdump的文档了。如果想直接看看tcpdump的一些使用例子，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man tcpdump | less -Ip examples</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="tcpdump查看HTTP流量"><a href="#tcpdump查看HTTP流量" class="headerlink" title="tcpdump查看HTTP流量"></a>tcpdump查看HTTP流量</h2><p>查看HTTP GET请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -s 0 -A <span class="string">&#x27;tcp dst port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#x27;</span></span><br></pre></td></tr></table></figure>
<p>查看HTTP POST请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -s 0 -A <span class="string">&#x27;tcp dst port 80 and (tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354)&#x27;</span></span><br></pre></td></tr></table></figure>
<p>查看HTTP请求响应头以及数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -A -s 0 <span class="string">&#x27;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#x27;</span></span><br><span class="line">sudo tcpdump -X -s 0 <span class="string">&#x27;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>要理解上述tcpdump过滤器中的位操作，需要了解TCP数据包的构造。后面的参考资料中给出了一个分析例子。</p>
<p>笔者有过这样的经历，接手一个遗留的软件项目，发现各个API接口参数没有文档记录，而代码中的注释说明是过时的！当接手这种项目开始重构的时候，需要理解代码逻辑，如果能知道线上实际运行中的API请求参数是什么样子的，将有助于理解。笔者曾尝试修改Nginx配置文件来记录HTTP POST请求信息，却没有发现一个简单有效的方案。使用上述tcpdump命令来捕获HTTP POST请求就十分简单了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://link.jianshu.com/?t=http://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body">Can I use tcpdump to get HTTP requests, response header and response body?</a></li>
<li><a href="https://link.jianshu.com/?t=https://sites.google.com/site/jimmyxu101/testing/use-tcpdump-to-monitor-http-traffic">Use TCPDUMP to Monitor HTTP Traffic</a></li>
<li><a href="https://link.jianshu.com/?t=https://www.wireshark.org/tools/string-cf.html">String-Matching Capture Filter Generator</a></li>
</ul>
]]></content>
      <tags>
        <tag>tcpdump</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法</title>
    <url>/2019/01/25/top-ten-classical-sorting-algorithms/</url>
    <content><![CDATA[<h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><h3 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h3><p>十种常见排序算法可以分为两大类：</p>
<blockquote>
<p>非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。<br>线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。 </p>
</blockquote>
<span id="more"></span>

<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><p>|排序方法|时间复杂度（平均）|时间复杂度（最坏）|时间复杂度（最好）|空间复杂度|稳定性|占用额外内存|<br>|-|-|-|-|-|-|<br>|插入排序|O(n^2)|O(n^2)|O(n)|O(1)|稳定|否|<br>|希尔排序|O(n^1.3)|O(n^2)|O(n)|O(1)|不稳定|否|<br>|选择排序|O(n^2)|O(n^2)|O(n^2)|O(1)|不稳定|否|<br>|堆排序|O(nlog₂n)|O(nlog₂n)|O(nlog₂n)|O(1)|不稳定|否|<br>|冒泡排序|O(n^2)|O(n^2)|O(n)|O(1)|稳定|否|<br>|快速排序|O(nlog₂n)|O(n^2)|O(nlog₂n)|O(nlog₂n)|不稳定|否|<br>|归并排序|O(nlog₂n)|O(nlog₂n)|O(nlog₂n)|O(n)|稳定|是|<br>|计数排序|O(n+k)|O(n+k)|O(n+k)|O(n+k)|稳定|是|<br>|桶排序|O(n+k)|O(n^2)|O(n)|O(n+k)|稳定|是|<br>|基数排序|O(n<em>k)|O(n</em>k)|O(n*k)|O(n+k)|稳定|是|</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><blockquote>
<p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。<br>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。<br>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。<br>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 </p>
</blockquote>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。</li>
</ul>
<h4 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101248889" alt="https://img-blog.csdn.net/20180611101248889"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">// 元素交换</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h4 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h4><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空；</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。 </li>
</ul>
<h4 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101320746" alt="https://img-blog.csdn.net/20180611101320746"></p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">// 寻找最小的数</span></span><br><span class="line">                minIndex = j;                 <span class="comment">// 将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
<h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<h4 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h4><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。</li>
</ul>
<h4 id="动图演示-2"><a href="#动图演示-2" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101342725" alt="https://img-blog.csdn.net/20180611101342725"></p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span>;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>
<h4 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h4><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<h4 id="动图演示-3"><a href="#动图演示-3" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101405573" alt="https://img-blog.csdn.net/20180611101405573"></p>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length,</span><br><span class="line">        temp,</span><br><span class="line">        gap = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;          <span class="comment">// 动态定义间隔序列</span></span><br><span class="line">        gap = gap * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">3</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i-gap; j &gt; <span class="number">0</span> &amp;&amp; arr[j]&gt; temp; j-=gap) &#123;</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h4><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。　</p>
<h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p>
<h4 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。</li>
</ul>
<h4 id="动图描述"><a href="#动图描述" class="headerlink" title="动图描述"></a>动图描述</h4><p><img src="https://img-blog.csdn.net/20180611101425190" alt="https://img-blog.csdn.net/20180611101425190"></p>
<h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;  <span class="comment">// 采用自上而下的递归方法</span></span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">        left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length&gt;<span class="number">0</span> &amp;&amp; right.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-3"><a href="#算法分析-3" class="headerlink" title="算法分析"></a>算法分析</h4><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p>
<h3 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
<h4 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h4><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<h4 id="动图演示-4"><a href="#动图演示-4" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101500303" alt="https://img-blog.csdn.net/20180611101500303"></p>
<h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr, partitionIndex+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left ,right</span>) </span>&#123;     <span class="comment">// 分区操作</span></span><br><span class="line">    <span class="keyword">var</span> pivot = left,                      <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<h4 id="算法描述-6"><a href="#算法描述-6" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li>
</ul>
<h4 id="动图演示-5"><a href="#动图演示-5" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101532837" alt="https://img-blog.csdn.net/20180611101532837"></p>
<h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> len;    <span class="comment">// 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123;   <span class="comment">// 建立大顶堆</span></span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;     <span class="comment">// 堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">        largest = i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计数排序（Counting-Sort）"><a href="#计数排序（Counting-Sort）" class="headerlink" title="计数排序（Counting Sort）"></a>计数排序（Counting Sort）</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<h4 id="算法描述-7"><a href="#算法描述-7" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
</ul>
<h4 id="动图演示-6"><a href="#动图演示-6" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101554634" alt="https://img-blog.csdn.net/20180611101554634"></p>
<h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, maxValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">        sortedIndex = <span class="number">0</span>;</span><br><span class="line">        arrLen = arr.length,</span><br><span class="line">        bucketLen = maxValue + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[sortedIndex++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-4"><a href="#算法分析-4" class="headerlink" title="算法分析"></a>算法分析</h4><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p>
<h3 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p>
<h4 id="算法描述-8"><a href="#算法描述-8" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>设置一个定量的数组当作空桶；</li>
<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
<li>对每个不是空的桶进行排序；</li>
<li>从不是空的桶里把排好序的数据拼接起来。 </li>
</ul>
<h4 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h4><p><img src="https://img-blog.csdn.net/20180611101611983" alt="https://img-blog.csdn.net/20180611101611983"></p>
<h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, bucketSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> minValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">          minValue = arr[i];                <span class="comment">// 输入数据的最小值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">          maxValue = arr[i];                <span class="comment">// 输入数据的最大值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 桶的初始化</span></span><br><span class="line">    <span class="keyword">var</span> DEFAULT_BUCKET_SIZE = <span class="number">5</span>;            <span class="comment">// 设置桶的默认数量为5</span></span><br><span class="line">    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;</span><br><span class="line">    <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[<span class="built_in">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    arr.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertionSort(buckets[i]);                      <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j]);                     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-5"><a href="#算法分析-5" class="headerlink" title="算法分析"></a>算法分析</h4><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>
<h3 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p>
<h4 id="算法描述-9"><a href="#算法描述-9" class="headerlink" title="算法描述"></a>算法描述</h4><ul>
<li>取得数组中的最大数，并取得位数；</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组；</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li>
</ul>
<h4 id="动图演示-7"><a href="#动图演示-7" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="https://img-blog.csdn.net/20180611101637983" alt="https://img-blog.csdn.net/20180611101637983"></p>
<h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LSD Radix Sort</span></span><br><span class="line"><span class="keyword">var</span> counter = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> dev = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span>(counter[bucket]==<span class="literal">null</span>) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(counter[j]!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                      arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法分析-6"><a href="#算法分析-6" class="headerlink" title="算法分析"></a>算法分析</h4><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p>
<p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p>
]]></content>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>正则入门</title>
    <url>/2019/08/19/zheng-ze-ru-meng/</url>
    <content><![CDATA[<h3 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h3><p>30分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。    </p>
<span id="more"></span>

<h3 id="如何使用本教程"><a href="#如何使用本教程" class="headerlink" title="如何使用本教程"></a>如何使用本教程</h3><p>别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。  </p>
<p>除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？  </p>
<p>清除格式 文本格式约定：专业术语 元字符/语法格式 正则表达式 正则表达式中的一部分(用于分析) 对其进行匹配的源字符串 对正则表达式或其中一部分的说明。</p>
<p>隐藏边注 本文右边有一些注释，主要是用来提供一些相关信息，或者给没有程序员背景的读者解释一些基本概念，通常可以忽略。</p>
<h3 id="正则表达式到底是什么东西？"><a href="#正则表达式到底是什么东西？" class="headerlink" title="正则表达式到底是什么东西？"></a>正则表达式到底是什么东西？</h3><p>字符是计算机软件处理文字时最基本的单位，可能是字母，数字， 标点符号，空格，换行符，汉字等等。字符串是0个或更多个字符的序列。文本也就是文字，字符串。说某个字符串匹配某个正则表达 式，通常是指这个字符串里有一部分（或几部分分别）能满足表达式给出的条件。在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就 是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
<p>很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)， 也就是*和?。如果你想查找某个目录下的所 有的Word文档的话，你会搜索*.doc。在这里，*会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精 确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着 2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。</p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。</p>
<p>假设你在一篇英文小说里查找hi，你可以使用正则表达式hi。</p>
<p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。</p>
<p>不幸的是，很多单词里包含hi这两个连续的字符，比如him,history,high等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用\bhi\b。</p>
<p>\b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p>
<p>如果需要更精确的说法，\b匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)\w。<br>假如你要找的是hi后面不远处跟着一个Lucy，你应该用\bhi\b.*\bLucy\b。</p>
<p>这里，.是另一个元字符，匹配除了换行符以外的任意字符。*同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定*前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.*连在一起就意味着任意数量的不包含换行的字符。现在\bhi\b.*\bLucy\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</p>
<p>换行符就是’\n’,ASCII编码为10(十六进制0x0A)的字符。<br>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：</p>
<p>0\d\d-\d\d\d\d\d\d\d\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。</p>
<p>这里的\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。</p>
<p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\d{2}-\d{8}。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。</p>
<h3 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h3><p>如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。</p>
<p>不同的环境下正则表达式的一些细节是不相同的，本教程介绍的是微软 .Net Framework 4.5 下正则表达式的行为，所以，我向你推荐我编写的.Net下的工具 Regester。请参考该页面的说明来安装和运行该软件。</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>现在你已经知道几个很有用的元字符了，如\b,.,*，还有\d. 正则表达式里还有更多的元字符，比如\s匹配任意的空白 符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配字母或数字或下划线或汉字等。</p>
<p>对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看 相关文档。</p>
<p>下面来看看更多的例子：<br>\ba\w<em>\b匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字 母a,然后是任意数量的字母或数字(\w</em>)， 最后是单词结束处(\b)。</p>
<p>好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的\w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)</p>
<p>\d+匹配1个或更多连续的数字。 这里的+是和<em>类似的元字符，不同的是</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</p>
<p>\b\w{6}\b 匹配刚好6个字符的 单词。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
</tbody></table>
<p>正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的 RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到 12连续位数字，而不是整个字符串就是5到12位数字。</p>
<p>元字符^（和数字6在同一个键位上的符号）和$都 匹配一个位置，这和\b有点类似。^匹配你 要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果 要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。</p>
<p>这里的{5,12}和前面介绍过的{2}是 类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次， 否则都不匹配。</p>
<p>因为使用了^和$，所以输入 的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p>
<p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。</p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用.和*。当然，要查找\本身，你也得用\.</p>
<p>例如：deerchao.net匹配deerchao.net，C:\Windows匹配C:\Windows。</p>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p>你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是 正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<p>下面是一些使用重复的例子：</p>
<p>Windows\d+匹配Windows 后面跟1个或更多数字</p>
<p>^\w+匹配一行的第一个单词(或整个字 符串的第一个单词，具体匹配哪个意思得看选项设置)</p>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元 音字母a,e,i,o,u),应该怎么办？</p>
<p>很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p>
<p>我们也可以轻松地指定一个字符范围，像[0-9]代 表的含意与\d就是完全一致的：一位数字； 同理[a-z0-9A-Z_]也完全等同于\w（如 果只考虑英文的话）。</p>
<p>下面是一个更复杂的表达式：(?0\d{2}[) -]?\d{8}。</p>
<p>“(”和“)”也是元字符，后面的分组节里会提 到，所以在这里需要使用转义。<br>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455， 或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中 的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达 式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。</p>
<p>(\d{1,3}.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹 配1到3位的数字，(\d{1,3}.){3}匹 配三位数字加上一个英文句号(这个整体也就是这个分组)重 复3次，最后再加上一个一到三位的数字(\d{1,3})。</p>
<p>IP地址中每个数字都不能大于255，大家千万不要被《24》第三季的编剧给忽悠了……<br>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地 址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个 正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。</p>
<p>理解这个表达式的关键是理解2[0-4]\d|25[0-5]|[01]?\d\d?， 这里我就不细说了，你自己应该能分析得出来它的意义。</p>
<h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td>匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td>匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody></table>
<p>例子：\S+匹配不包含空白符的字符串。</p>
<p>&lt;a[^&gt;]+&gt;匹配用 尖括号括起来的以a开头的字符串。</p>
<h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它 程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括 号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p>
<p>呃……其实,组号分配还不像我刚说得那么简单：</p>
<ul>
<li>分组0对应整个正则表达式</li>
<li>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组 号</li>
<li>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权．</li>
</ul>
<p>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：</p>
<ul>
<li>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词， 也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)， 这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</li>
<li>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<Word>\w+)(或者把尖括号换成’也 行：(?’Word’\w+)),这样就把\w+的 组名指定为Word了。要反向引用这个分组捕获的 内容，你可以使用\k<Word>,所以上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b。</li>
</ul>
<p>使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td>捕获</td>
<td>(?<name>exp)</td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成 (?’name’exp)</td>
</tr>
<tr>
<td>捕获</td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释</td>
<td>(?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody></table>
<p>我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只 是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样 做？”——好问题，你觉得为什么呢？</p>
<h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><p>地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去 吧！人若无名，便可专心练剑；物若无名，便可随意取舍……<br>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的 条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：</p>
<p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。<br>(?=exp)也叫零宽度正预测先行断言， 它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)， 匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p>
<p>(?&lt;=exp)也叫零宽度正回顾后 发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部 分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p>
<p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})+\b，用它对1234567890进 行查找时结果是234567890。<br>下面这个例子同时使用了这两种断言：(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</p>
<h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确 保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u, 我们可以尝试这样：</p>
<p>\b\w<em>q[^u]\w</em>\b匹配包含后 面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词 的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将 会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w<em>\b将会匹配下一 个单词，于是\b\w</em>q[^u]\w<em>\b就能匹配整个Iraq fighting。负向零宽断言能解决这 样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w</em>q(?!u)\w*\b。</p>
<p>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹 配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹 配不包含连续字符串abc的单词。<br>同理，我们可以用(?&lt;!exp),零 宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数 字。</p>
<p>请详细分析表达式(?&lt;=&lt;(\w+)&gt;).*(?=&lt;/\1&gt;)， 这个表达式最能表现零宽断言的真正用途。</p>
<p>一个更复杂的例子：(?&lt;=&lt;(\w+)&gt;).*(?=&lt;/\1&gt;)匹 配不包含属性的简单HTML标签内里的内容。(&lt;?(\w+)&gt;)指 定了这样的前缀：被尖括号括起来的单词(比 如可能是)，然后是.*(任意的字符串),最后是一个后缀(?=&lt;/\1&gt;)。注意后缀里的/，它用到了前面提过的字符转义；\1则是一个反向 引用，引用的正是捕获的第一组，前面的(\w+)匹 配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b> 之间的内容(再次提醒，不包括前缀和后缀本身)。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。<br>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽 略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?&lt;=    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?=     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\/\1&gt;  # 查找尖括号括起来的内容：前面是一个&quot;/&quot;，后面是先前捕获的标签</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure>

<h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的 字符。以这个表达式为例：a.*b，它将会匹配最长的以 a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</p>
<p>有时，我们更需要懒惰匹配，也就是匹配尽可能少的 字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提 下使用最少的重复。现在看看懒惰版的例子吧：</p>
<p>a.*?b匹配最短的，以a开始，以b结 束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p>
<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另 一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*?</td>
<td>重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td>+?</td>
<td>重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td>??</td>
<td>重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,m}?</td>
<td>重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,}?</td>
<td>重复n次以上，但尽可能少重复</td>
</tr>
</tbody></table>
<h3 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h3><p>在C#中，你可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。 如：Regex regex = new Regex(@”\ba\w{6}\b”, RegexOptions.IgnoreCase);<br>上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>IgnoreCase(忽略大小写)</td>
<td>匹配时不区分大小写。</td>
</tr>
<tr>
<td>Multiline(多行模式)</td>
<td>更改^和$的 含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的 精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td>
</tr>
<tr>
<td>Singleline(单行模式)</td>
<td>更改.的含义，使它与每一个字符匹配（包括换行 符\n）。</td>
</tr>
<tr>
<td>IgnorePatternWhitespace(忽略空白)</td>
<td>忽略表达式中的非转义空白并启用由#标记的注释。</td>
</tr>
<tr>
<td>ExplicitCapture(显式捕获)</td>
<td>仅捕获已被显式命名的组。</td>
</tr>
</tbody></table>
<p>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较 相似（以至于让人感到疑惑）以外。</p>
<h3 id="平衡组-递归匹配"><a href="#平衡组-递归匹配" class="headerlink" title="平衡组/递归匹配"></a>平衡组/递归匹配</h3><p>这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。</p>
<p>有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构， 这时简单地使用(.+)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论 的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的 内容呢？</p>
<p>为了避免(和(把你的大脑 彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx &lt;aa <bbb> <bbb> aa&gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？</p>
<p>这里需要用到以下的语法构造：</p>
<ul>
<li>(?’group’) 把捕获的内容命名为group,并压入堆栈(Stack)</li>
<li>(?’-group’) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</li>
<li>(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</li>
<li>(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li>
</ul>
<p>如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就 是在黑板上写一个”group”，第二个就是从黑板上擦掉一个”group”，第三个就是看黑板上写的还有没有”group”，如果有就继续匹配yes部 分，否则就匹配no部分。</p>
<p>我们需要做的是每碰到了左括号，就在压入一个”Open”,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就 证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;                         #最外层的左括号</span><br><span class="line">    [^&lt;&gt;]*                #最外层的左括号后面的不是括号的内容</span><br><span class="line">    (</span><br><span class="line">        (</span><br><span class="line">            (?&#x27;Open&#x27;&lt;)    #碰到了左括号，在黑板上写一个&quot;Open&quot;</span><br><span class="line">            [^&lt;&gt;]*       #匹配左括号后面的不是括号的内容</span><br><span class="line">        )+</span><br><span class="line">        (</span><br><span class="line">            (?&#x27;-Open&#x27;&gt;)   #碰到了右括号，擦掉一个&quot;Open&quot;</span><br><span class="line">            [^&lt;&gt;]*        #匹配右括号后面不是括号的内容</span><br><span class="line">        )+</span><br><span class="line">    )*</span><br><span class="line">    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&quot;Open&quot;；如果还有，则匹配失败</span><br><span class="line"></span><br><span class="line">&gt;                         #最外层的右括号</span><br></pre></td></tr></table></figure>

<p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<div>标签：<code>&lt;div[^&gt;]*&gt;[^&lt;&gt;]*(((?&#39;Open&#39;&lt;div[^&gt;]*&gt;)[^&lt;&gt;]*)+((?&#39;-Open&#39;&lt;/div&gt;)[^&lt;&gt;]*)+)*(?(Open)(?!))&lt;/div&gt;</code>。</p>
<h3 id="还有些什么东西没提到"><a href="#还有些什么东西没提到" class="headerlink" title="还有些什么东西没提到"></a>还有些什么东西没提到</h3><p>上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网 上找到更详细的参考资料来学习它们–当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.net下正则表达式详细的文档。</p>
<p>这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看关于正则表达式语言元素 的MSDN在线文档。</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>报警字符(打印它的效果是电脑嘀一声)</td>
</tr>
<tr>
<td>\b</td>
<td>通常是单词分界位置，但如果在字符类里使用代表退格</td>
</tr>
<tr>
<td>\t</td>
<td>制表符，Tab</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\v</td>
<td>竖向制表符</td>
</tr>
<tr>
<td>\f</td>
<td>换页符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\e</td>
<td>Escape</td>
</tr>
<tr>
<td>\0nn</td>
<td>ASCII代码中八进制代码为nn的字符</td>
</tr>
<tr>
<td>\xnn</td>
<td>ASCII代码中十六进制代码为nn的字符</td>
</tr>
<tr>
<td>\unnnn</td>
<td>Unicode代码中十六进制代码为nnnn的字符</td>
</tr>
<tr>
<td>\cN</td>
<td>ASCII控制字符。比如\cC代表Ctrl+C</td>
</tr>
<tr>
<td>\A</td>
<td>字符串开头(类似^，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td>\Z</td>
<td>字符串结尾或行尾(不受处理多行选项的影响)</td>
</tr>
<tr>
<td>\z</td>
<td>字符串结尾(类似$，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td>\G</td>
<td>当前搜索的开头</td>
</tr>
<tr>
<td>\p{name}</td>
<td>Unicode中命名为name的字符类，例如\p{IsGreek}</td>
</tr>
<tr>
<td>(?&gt;exp)</td>
<td>贪婪子表达式</td>
</tr>
<tr>
<td>(?<x>-<y>exp)</td>
<td>平衡组</td>
</tr>
<tr>
<td>(?im-nsx:exp)</td>
<td>在子表达式exp中改变处理选项</td>
</tr>
<tr>
<td>(?im-nsx)</td>
<td>为表达式后面的部分改变处理选项</td>
</tr>
<tr>
<td>(?(exp)yes&#124;no)</td>
<td>把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为 此组的表达式；否则使用no</td>
</tr>
<tr>
<td>(?(exp)yes)</td>
<td>同上，只是使用空表达式作为no</td>
</tr>
<tr>
<td>(?(name)yes&#124;no)</td>
<td>如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用 no</td>
</tr>
<tr>
<td>(?(name)yes)</td>
<td>同上，只是使用空表达式作为no</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>regex</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
</search>
